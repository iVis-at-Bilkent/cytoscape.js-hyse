
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.cytoscape = global.cytoscape || {}, global.cytoscape["js-hyse"] = factory()));
})(this, (function () { 'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    var DEFAULT_OPTIONS = Object.freeze({
        // dagre algo options, uses default value on undefined
        nodeSep: undefined,
        edgeSep: undefined,
        rankSep: undefined,
        rankDir: undefined,
        align: undefined,
        acyclicer: undefined,
        // A feedback arc set is a set of edges that can be removed to make a graph acyclic.
        ranker: undefined,
        // Possible values: network-simplex, tight-tree or longest-path
        minLen: function (edge) { return 1; },
        edgeWeight: function (edge) { return 1; },
        // animation
        animate: undefined,
        animationDuration: undefined,
        animationEasing: undefined,
        animateFilter: function (node, i) { return true; },
        // viewport
        pan: undefined,
        zoom: undefined,
        fit: undefined,
        // modifications
        padding: undefined,
        boundingBox: undefined,
        spacingFactor: undefined,
        nodeDimensionsIncludeLabels: undefined,
        transform: function (node, pos) { return pos; },
        ticksPerFrame: 30,
        // layout event callbacks
        ready: function () { },
        stop: function () { },
        performPostProcessing: undefined,
    });
    function isFunction$4(o) { return typeof o === 'function'; }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function commonjsRequire (path) {
    	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
    }

    var coseBase$1 = {exports: {}};

    var layoutBase = {exports: {}};

    (function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
    	module.exports = factory();
    })(commonjsGlobal, function() {
    return /******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    /******/
    /******/ 		// Check if module is in cache
    /******/ 		if(installedModules[moduleId]) {
    /******/ 			return installedModules[moduleId].exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = installedModules[moduleId] = {
    /******/ 			i: moduleId,
    /******/ 			l: false,
    /******/ 			exports: {}
    /******/ 		};
    /******/
    /******/ 		// Execute the module function
    /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ 		// Flag the module as loaded
    /******/ 		module.l = true;
    /******/
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// identity function for calling harmony imports with the correct context
    /******/ 	__webpack_require__.i = function(value) { return value; };
    /******/
    /******/ 	// define getter function for harmony exports
    /******/ 	__webpack_require__.d = function(exports, name, getter) {
    /******/ 		if(!__webpack_require__.o(exports, name)) {
    /******/ 			Object.defineProperty(exports, name, {
    /******/ 				configurable: false,
    /******/ 				enumerable: true,
    /******/ 				get: getter
    /******/ 			});
    /******/ 		}
    /******/ 	};
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/ 	__webpack_require__.n = function(module) {
    /******/ 		var getter = module && module.__esModule ?
    /******/ 			function getDefault() { return module['default']; } :
    /******/ 			function getModuleExports() { return module; };
    /******/ 		__webpack_require__.d(getter, 'a', getter);
    /******/ 		return getter;
    /******/ 	};
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "";
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(__webpack_require__.s = 28);
    /******/ })
    /************************************************************************/
    /******/ ([
    /* 0 */
    /***/ (function(module, exports, __webpack_require__) {


    function LayoutConstants() {}

    /**
     * Layout Quality: 0:draft, 1:default, 2:proof
     */
    LayoutConstants.QUALITY = 1;

    /**
     * Default parameters
     */
    LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED = false;
    LayoutConstants.DEFAULT_INCREMENTAL = false;
    LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT = true;
    LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT = false;
    LayoutConstants.DEFAULT_ANIMATION_PERIOD = 50;
    LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES = false;

    // -----------------------------------------------------------------------------
    // Section: General other constants
    // -----------------------------------------------------------------------------
    /*
     * Margins of a graph to be applied on bouding rectangle of its contents. We
     * assume margins on all four sides to be uniform.
     */
    LayoutConstants.DEFAULT_GRAPH_MARGIN = 15;

    /*
     * Whether to consider labels in node dimensions or not
     */
    LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = false;

    /*
     * Default dimension of a non-compound node.
     */
    LayoutConstants.SIMPLE_NODE_SIZE = 40;

    /*
     * Default dimension of a non-compound node.
     */
    LayoutConstants.SIMPLE_NODE_HALF_SIZE = LayoutConstants.SIMPLE_NODE_SIZE / 2;

    /*
     * Empty compound node size. When a compound node is empty, its both
     * dimensions should be of this value.
     */
    LayoutConstants.EMPTY_COMPOUND_NODE_SIZE = 40;

    /*
     * Minimum length that an edge should take during layout
     */
    LayoutConstants.MIN_EDGE_LENGTH = 1;

    /*
     * World boundaries that layout operates on
     */
    LayoutConstants.WORLD_BOUNDARY = 1000000;

    /*
     * World boundaries that random positioning can be performed with
     */
    LayoutConstants.INITIAL_WORLD_BOUNDARY = LayoutConstants.WORLD_BOUNDARY / 1000;

    /*
     * Coordinates of the world center
     */
    LayoutConstants.WORLD_CENTER_X = 1200;
    LayoutConstants.WORLD_CENTER_Y = 900;

    module.exports = LayoutConstants;

    /***/ }),
    /* 1 */
    /***/ (function(module, exports, __webpack_require__) {


    var LGraphObject = __webpack_require__(2);
    var IGeometry = __webpack_require__(8);
    var IMath = __webpack_require__(9);

    function LEdge(source, target, vEdge) {
      LGraphObject.call(this, vEdge);

      this.isOverlapingSourceAndTarget = false;
      this.vGraphObject = vEdge;
      this.bendpoints = [];
      this.source = source;
      this.target = target;
    }

    LEdge.prototype = Object.create(LGraphObject.prototype);

    for (var prop in LGraphObject) {
      LEdge[prop] = LGraphObject[prop];
    }

    LEdge.prototype.getSource = function () {
      return this.source;
    };

    LEdge.prototype.getTarget = function () {
      return this.target;
    };

    LEdge.prototype.isInterGraph = function () {
      return this.isInterGraph;
    };

    LEdge.prototype.getLength = function () {
      return this.length;
    };

    LEdge.prototype.isOverlapingSourceAndTarget = function () {
      return this.isOverlapingSourceAndTarget;
    };

    LEdge.prototype.getBendpoints = function () {
      return this.bendpoints;
    };

    LEdge.prototype.getLca = function () {
      return this.lca;
    };

    LEdge.prototype.getSourceInLca = function () {
      return this.sourceInLca;
    };

    LEdge.prototype.getTargetInLca = function () {
      return this.targetInLca;
    };

    LEdge.prototype.getOtherEnd = function (node) {
      if (this.source === node) {
        return this.target;
      } else if (this.target === node) {
        return this.source;
      } else {
        throw "Node is not incident with this edge";
      }
    };

    LEdge.prototype.getOtherEndInGraph = function (node, graph) {
      var otherEnd = this.getOtherEnd(node);
      var root = graph.getGraphManager().getRoot();

      while (true) {
        if (otherEnd.getOwner() == graph) {
          return otherEnd;
        }

        if (otherEnd.getOwner() == root) {
          break;
        }

        otherEnd = otherEnd.getOwner().getParent();
      }

      return null;
    };

    LEdge.prototype.updateLength = function () {
      var clipPointCoordinates = new Array(4);

      this.isOverlapingSourceAndTarget = IGeometry.getIntersection(this.target.getRect(), this.source.getRect(), clipPointCoordinates);

      if (!this.isOverlapingSourceAndTarget) {
        this.lengthX = clipPointCoordinates[0] - clipPointCoordinates[2];
        this.lengthY = clipPointCoordinates[1] - clipPointCoordinates[3];

        if (Math.abs(this.lengthX) < 1.0) {
          this.lengthX = IMath.sign(this.lengthX);
        }

        if (Math.abs(this.lengthY) < 1.0) {
          this.lengthY = IMath.sign(this.lengthY);
        }

        this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);
      }
    };

    LEdge.prototype.updateLengthSimple = function () {
      this.lengthX = this.target.getCenterX() - this.source.getCenterX();
      this.lengthY = this.target.getCenterY() - this.source.getCenterY();

      if (Math.abs(this.lengthX) < 1.0) {
        this.lengthX = IMath.sign(this.lengthX);
      }

      if (Math.abs(this.lengthY) < 1.0) {
        this.lengthY = IMath.sign(this.lengthY);
      }

      this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);
    };

    module.exports = LEdge;

    /***/ }),
    /* 2 */
    /***/ (function(module, exports, __webpack_require__) {


    function LGraphObject(vGraphObject) {
      this.vGraphObject = vGraphObject;
    }

    module.exports = LGraphObject;

    /***/ }),
    /* 3 */
    /***/ (function(module, exports, __webpack_require__) {


    var LGraphObject = __webpack_require__(2);
    var Integer = __webpack_require__(10);
    var RectangleD = __webpack_require__(13);
    var LayoutConstants = __webpack_require__(0);
    var RandomSeed = __webpack_require__(16);
    var PointD = __webpack_require__(5);

    function LNode(gm, loc, size, vNode) {
      //Alternative constructor 1 : LNode(LGraphManager gm, Point loc, Dimension size, Object vNode)
      if (size == null && vNode == null) {
        vNode = loc;
      }

      LGraphObject.call(this, vNode);

      //Alternative constructor 2 : LNode(Layout layout, Object vNode)
      if (gm.graphManager != null) gm = gm.graphManager;

      this.estimatedSize = Integer.MIN_VALUE;
      this.inclusionTreeDepth = Integer.MAX_VALUE;
      this.vGraphObject = vNode;
      this.edges = [];
      this.graphManager = gm;

      if (size != null && loc != null) this.rect = new RectangleD(loc.x, loc.y, size.width, size.height);else this.rect = new RectangleD();
    }

    LNode.prototype = Object.create(LGraphObject.prototype);
    for (var prop in LGraphObject) {
      LNode[prop] = LGraphObject[prop];
    }

    LNode.prototype.getEdges = function () {
      return this.edges;
    };

    LNode.prototype.getChild = function () {
      return this.child;
    };

    LNode.prototype.getOwner = function () {
      //  if (this.owner != null) {
      //    if (!(this.owner == null || this.owner.getNodes().indexOf(this) > -1)) {
      //      throw "assert failed";
      //    }
      //  }

      return this.owner;
    };

    LNode.prototype.getWidth = function () {
      return this.rect.width;
    };

    LNode.prototype.setWidth = function (width) {
      this.rect.width = width;
    };

    LNode.prototype.getHeight = function () {
      return this.rect.height;
    };

    LNode.prototype.setHeight = function (height) {
      this.rect.height = height;
    };

    LNode.prototype.getCenterX = function () {
      return this.rect.x + this.rect.width / 2;
    };

    LNode.prototype.getCenterY = function () {
      return this.rect.y + this.rect.height / 2;
    };

    LNode.prototype.getCenter = function () {
      return new PointD(this.rect.x + this.rect.width / 2, this.rect.y + this.rect.height / 2);
    };

    LNode.prototype.getLocation = function () {
      return new PointD(this.rect.x, this.rect.y);
    };

    LNode.prototype.getRect = function () {
      return this.rect;
    };

    LNode.prototype.getDiagonal = function () {
      return Math.sqrt(this.rect.width * this.rect.width + this.rect.height * this.rect.height);
    };

    /**
     * This method returns half the diagonal length of this node.
     */
    LNode.prototype.getHalfTheDiagonal = function () {
      return Math.sqrt(this.rect.height * this.rect.height + this.rect.width * this.rect.width) / 2;
    };

    LNode.prototype.setRect = function (upperLeft, dimension) {
      this.rect.x = upperLeft.x;
      this.rect.y = upperLeft.y;
      this.rect.width = dimension.width;
      this.rect.height = dimension.height;
    };

    LNode.prototype.setCenter = function (cx, cy) {
      this.rect.x = cx - this.rect.width / 2;
      this.rect.y = cy - this.rect.height / 2;
    };

    LNode.prototype.setLocation = function (x, y) {
      this.rect.x = x;
      this.rect.y = y;
    };

    LNode.prototype.moveBy = function (dx, dy) {
      this.rect.x += dx;
      this.rect.y += dy;
    };

    LNode.prototype.getEdgeListToNode = function (to) {
      var edgeList = [];
      var self = this;

      self.edges.forEach(function (edge) {

        if (edge.target == to) {
          if (edge.source != self) throw "Incorrect edge source!";

          edgeList.push(edge);
        }
      });

      return edgeList;
    };

    LNode.prototype.getEdgesBetween = function (other) {
      var edgeList = [];

      var self = this;
      self.edges.forEach(function (edge) {

        if (!(edge.source == self || edge.target == self)) throw "Incorrect edge source and/or target";

        if (edge.target == other || edge.source == other) {
          edgeList.push(edge);
        }
      });

      return edgeList;
    };

    LNode.prototype.getNeighborsList = function () {
      var neighbors = new Set();

      var self = this;
      self.edges.forEach(function (edge) {

        if (edge.source == self) {
          neighbors.add(edge.target);
        } else {
          if (edge.target != self) {
            throw "Incorrect incidency!";
          }

          neighbors.add(edge.source);
        }
      });

      return neighbors;
    };

    LNode.prototype.withChildren = function () {
      var withNeighborsList = new Set();
      var childNode;
      var children;

      withNeighborsList.add(this);

      if (this.child != null) {
        var nodes = this.child.getNodes();
        for (var i = 0; i < nodes.length; i++) {
          childNode = nodes[i];
          children = childNode.withChildren();
          children.forEach(function (node) {
            withNeighborsList.add(node);
          });
        }
      }

      return withNeighborsList;
    };

    LNode.prototype.getNoOfChildren = function () {
      var noOfChildren = 0;
      var childNode;

      if (this.child == null) {
        noOfChildren = 1;
      } else {
        var nodes = this.child.getNodes();
        for (var i = 0; i < nodes.length; i++) {
          childNode = nodes[i];

          noOfChildren += childNode.getNoOfChildren();
        }
      }

      if (noOfChildren == 0) {
        noOfChildren = 1;
      }
      return noOfChildren;
    };

    LNode.prototype.getEstimatedSize = function () {
      if (this.estimatedSize == Integer.MIN_VALUE) {
        throw "assert failed";
      }
      return this.estimatedSize;
    };

    LNode.prototype.calcEstimatedSize = function () {
      if (this.child == null) {
        return this.estimatedSize = (this.rect.width + this.rect.height) / 2;
      } else {
        this.estimatedSize = this.child.calcEstimatedSize();
        this.rect.width = this.estimatedSize;
        this.rect.height = this.estimatedSize;

        return this.estimatedSize;
      }
    };

    LNode.prototype.scatter = function () {
      var randomCenterX;
      var randomCenterY;

      var minX = -LayoutConstants.INITIAL_WORLD_BOUNDARY;
      var maxX = LayoutConstants.INITIAL_WORLD_BOUNDARY;
      randomCenterX = LayoutConstants.WORLD_CENTER_X + RandomSeed.nextDouble() * (maxX - minX) + minX;

      var minY = -LayoutConstants.INITIAL_WORLD_BOUNDARY;
      var maxY = LayoutConstants.INITIAL_WORLD_BOUNDARY;
      randomCenterY = LayoutConstants.WORLD_CENTER_Y + RandomSeed.nextDouble() * (maxY - minY) + minY;

      this.rect.x = randomCenterX;
      this.rect.y = randomCenterY;
    };

    LNode.prototype.updateBounds = function () {
      if (this.getChild() == null) {
        throw "assert failed";
      }
      if (this.getChild().getNodes().length != 0) {
        // wrap the children nodes by re-arranging the boundaries
        var childGraph = this.getChild();
        childGraph.updateBounds(true);

        this.rect.x = childGraph.getLeft();
        this.rect.y = childGraph.getTop();

        this.setWidth(childGraph.getRight() - childGraph.getLeft());
        this.setHeight(childGraph.getBottom() - childGraph.getTop());

        // Update compound bounds considering its label properties    
        if (LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS) {

          var width = childGraph.getRight() - childGraph.getLeft();
          var height = childGraph.getBottom() - childGraph.getTop();

          if (this.labelWidth) {
            if (this.labelPosHorizontal == "left") {
              this.rect.x -= this.labelWidth;
              this.setWidth(width + this.labelWidth);
            } else if (this.labelPosHorizontal == "center" && this.labelWidth > width) {
              this.rect.x -= (this.labelWidth - width) / 2;
              this.setWidth(this.labelWidth);
            } else if (this.labelPosHorizontal == "right") {
              this.setWidth(width + this.labelWidth);
            }
          }

          if (this.labelHeight) {
            if (this.labelPosVertical == "top") {
              this.rect.y -= this.labelHeight;
              this.setHeight(height + this.labelHeight);
            } else if (this.labelPosVertical == "center" && this.labelHeight > height) {
              this.rect.y -= (this.labelHeight - height) / 2;
              this.setHeight(this.labelHeight);
            } else if (this.labelPosVertical == "bottom") {
              this.setHeight(height + this.labelHeight);
            }
          }
        }
      }
    };

    LNode.prototype.getInclusionTreeDepth = function () {
      if (this.inclusionTreeDepth == Integer.MAX_VALUE) {
        throw "assert failed";
      }
      return this.inclusionTreeDepth;
    };

    LNode.prototype.transform = function (trans) {
      var left = this.rect.x;

      if (left > LayoutConstants.WORLD_BOUNDARY) {
        left = LayoutConstants.WORLD_BOUNDARY;
      } else if (left < -LayoutConstants.WORLD_BOUNDARY) {
        left = -LayoutConstants.WORLD_BOUNDARY;
      }

      var top = this.rect.y;

      if (top > LayoutConstants.WORLD_BOUNDARY) {
        top = LayoutConstants.WORLD_BOUNDARY;
      } else if (top < -LayoutConstants.WORLD_BOUNDARY) {
        top = -LayoutConstants.WORLD_BOUNDARY;
      }

      var leftTop = new PointD(left, top);
      var vLeftTop = trans.inverseTransformPoint(leftTop);

      this.setLocation(vLeftTop.x, vLeftTop.y);
    };

    LNode.prototype.getLeft = function () {
      return this.rect.x;
    };

    LNode.prototype.getRight = function () {
      return this.rect.x + this.rect.width;
    };

    LNode.prototype.getTop = function () {
      return this.rect.y;
    };

    LNode.prototype.getBottom = function () {
      return this.rect.y + this.rect.height;
    };

    LNode.prototype.getParent = function () {
      if (this.owner == null) {
        return null;
      }

      return this.owner.getParent();
    };

    module.exports = LNode;

    /***/ }),
    /* 4 */
    /***/ (function(module, exports, __webpack_require__) {


    var LayoutConstants = __webpack_require__(0);

    function FDLayoutConstants() {}

    //FDLayoutConstants inherits static props in LayoutConstants
    for (var prop in LayoutConstants) {
      FDLayoutConstants[prop] = LayoutConstants[prop];
    }

    FDLayoutConstants.MAX_ITERATIONS = 2500;

    FDLayoutConstants.DEFAULT_EDGE_LENGTH = 50;
    FDLayoutConstants.DEFAULT_SPRING_STRENGTH = 0.45;
    FDLayoutConstants.DEFAULT_REPULSION_STRENGTH = 4500.0;
    FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = 0.4;
    FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = 1.0;
    FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = 3.8;
    FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = 1.5;
    FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION = true;
    FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION = true;
    FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = 0.3;
    FDLayoutConstants.COOLING_ADAPTATION_FACTOR = 0.33;
    FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT = 1000;
    FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT = 5000;
    FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL = 100.0;
    FDLayoutConstants.MAX_NODE_DISPLACEMENT = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL * 3;
    FDLayoutConstants.MIN_REPULSION_DIST = FDLayoutConstants.DEFAULT_EDGE_LENGTH / 10.0;
    FDLayoutConstants.CONVERGENCE_CHECK_PERIOD = 100;
    FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = 0.1;
    FDLayoutConstants.MIN_EDGE_LENGTH = 1;
    FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD = 10;

    module.exports = FDLayoutConstants;

    /***/ }),
    /* 5 */
    /***/ (function(module, exports, __webpack_require__) {


    function PointD(x, y) {
      if (x == null && y == null) {
        this.x = 0;
        this.y = 0;
      } else {
        this.x = x;
        this.y = y;
      }
    }

    PointD.prototype.getX = function () {
      return this.x;
    };

    PointD.prototype.getY = function () {
      return this.y;
    };

    PointD.prototype.setX = function (x) {
      this.x = x;
    };

    PointD.prototype.setY = function (y) {
      this.y = y;
    };

    PointD.prototype.getDifference = function (pt) {
      return new DimensionD(this.x - pt.x, this.y - pt.y);
    };

    PointD.prototype.getCopy = function () {
      return new PointD(this.x, this.y);
    };

    PointD.prototype.translate = function (dim) {
      this.x += dim.width;
      this.y += dim.height;
      return this;
    };

    module.exports = PointD;

    /***/ }),
    /* 6 */
    /***/ (function(module, exports, __webpack_require__) {


    var LGraphObject = __webpack_require__(2);
    var Integer = __webpack_require__(10);
    var LayoutConstants = __webpack_require__(0);
    var LGraphManager = __webpack_require__(7);
    var LNode = __webpack_require__(3);
    var LEdge = __webpack_require__(1);
    var RectangleD = __webpack_require__(13);
    var Point = __webpack_require__(12);
    var LinkedList = __webpack_require__(11);

    function LGraph(parent, obj2, vGraph) {
      LGraphObject.call(this, vGraph);
      this.estimatedSize = Integer.MIN_VALUE;
      this.margin = LayoutConstants.DEFAULT_GRAPH_MARGIN;
      this.edges = [];
      this.nodes = [];
      this.isConnected = false;
      this.parent = parent;

      if (obj2 != null && obj2 instanceof LGraphManager) {
        this.graphManager = obj2;
      } else if (obj2 != null && obj2 instanceof Layout) {
        this.graphManager = obj2.graphManager;
      }
    }

    LGraph.prototype = Object.create(LGraphObject.prototype);
    for (var prop in LGraphObject) {
      LGraph[prop] = LGraphObject[prop];
    }

    LGraph.prototype.getNodes = function () {
      return this.nodes;
    };

    LGraph.prototype.getEdges = function () {
      return this.edges;
    };

    LGraph.prototype.getGraphManager = function () {
      return this.graphManager;
    };

    LGraph.prototype.getParent = function () {
      return this.parent;
    };

    LGraph.prototype.getLeft = function () {
      return this.left;
    };

    LGraph.prototype.getRight = function () {
      return this.right;
    };

    LGraph.prototype.getTop = function () {
      return this.top;
    };

    LGraph.prototype.getBottom = function () {
      return this.bottom;
    };

    LGraph.prototype.isConnected = function () {
      return this.isConnected;
    };

    LGraph.prototype.add = function (obj1, sourceNode, targetNode) {
      if (sourceNode == null && targetNode == null) {
        var newNode = obj1;
        if (this.graphManager == null) {
          throw "Graph has no graph mgr!";
        }
        if (this.getNodes().indexOf(newNode) > -1) {
          throw "Node already in graph!";
        }
        newNode.owner = this;
        this.getNodes().push(newNode);

        return newNode;
      } else {
        var newEdge = obj1;
        if (!(this.getNodes().indexOf(sourceNode) > -1 && this.getNodes().indexOf(targetNode) > -1)) {
          throw "Source or target not in graph!";
        }

        if (!(sourceNode.owner == targetNode.owner && sourceNode.owner == this)) {
          throw "Both owners must be this graph!";
        }

        if (sourceNode.owner != targetNode.owner) {
          return null;
        }

        // set source and target
        newEdge.source = sourceNode;
        newEdge.target = targetNode;

        // set as intra-graph edge
        newEdge.isInterGraph = false;

        // add to graph edge list
        this.getEdges().push(newEdge);

        // add to incidency lists
        sourceNode.edges.push(newEdge);

        if (targetNode != sourceNode) {
          targetNode.edges.push(newEdge);
        }

        return newEdge;
      }
    };

    LGraph.prototype.remove = function (obj) {
      var node = obj;
      if (obj instanceof LNode) {
        if (node == null) {
          throw "Node is null!";
        }
        if (!(node.owner != null && node.owner == this)) {
          throw "Owner graph is invalid!";
        }
        if (this.graphManager == null) {
          throw "Owner graph manager is invalid!";
        }
        // remove incident edges first (make a copy to do it safely)
        var edgesToBeRemoved = node.edges.slice();
        var edge;
        var s = edgesToBeRemoved.length;
        for (var i = 0; i < s; i++) {
          edge = edgesToBeRemoved[i];

          if (edge.isInterGraph) {
            this.graphManager.remove(edge);
          } else {
            edge.source.owner.remove(edge);
          }
        }

        // now the node itself
        var index = this.nodes.indexOf(node);
        if (index == -1) {
          throw "Node not in owner node list!";
        }

        this.nodes.splice(index, 1);
      } else if (obj instanceof LEdge) {
        var edge = obj;
        if (edge == null) {
          throw "Edge is null!";
        }
        if (!(edge.source != null && edge.target != null)) {
          throw "Source and/or target is null!";
        }
        if (!(edge.source.owner != null && edge.target.owner != null && edge.source.owner == this && edge.target.owner == this)) {
          throw "Source and/or target owner is invalid!";
        }

        var sourceIndex = edge.source.edges.indexOf(edge);
        var targetIndex = edge.target.edges.indexOf(edge);
        if (!(sourceIndex > -1 && targetIndex > -1)) {
          throw "Source and/or target doesn't know this edge!";
        }

        edge.source.edges.splice(sourceIndex, 1);

        if (edge.target != edge.source) {
          edge.target.edges.splice(targetIndex, 1);
        }

        var index = edge.source.owner.getEdges().indexOf(edge);
        if (index == -1) {
          throw "Not in owner's edge list!";
        }

        edge.source.owner.getEdges().splice(index, 1);
      }
    };

    LGraph.prototype.updateLeftTop = function () {
      var top = Integer.MAX_VALUE;
      var left = Integer.MAX_VALUE;
      var nodeTop;
      var nodeLeft;
      var margin;

      var nodes = this.getNodes();
      var s = nodes.length;

      for (var i = 0; i < s; i++) {
        var lNode = nodes[i];
        nodeTop = lNode.getTop();
        nodeLeft = lNode.getLeft();

        if (top > nodeTop) {
          top = nodeTop;
        }

        if (left > nodeLeft) {
          left = nodeLeft;
        }
      }

      // Do we have any nodes in this graph?
      if (top == Integer.MAX_VALUE) {
        return null;
      }

      if (nodes[0].getParent().paddingLeft != undefined) {
        margin = nodes[0].getParent().paddingLeft;
      } else {
        margin = this.margin;
      }

      this.left = left - margin;
      this.top = top - margin;

      // Apply the margins and return the result
      return new Point(this.left, this.top);
    };

    LGraph.prototype.updateBounds = function (recursive) {
      // calculate bounds
      var left = Integer.MAX_VALUE;
      var right = -Integer.MAX_VALUE;
      var top = Integer.MAX_VALUE;
      var bottom = -Integer.MAX_VALUE;
      var nodeLeft;
      var nodeRight;
      var nodeTop;
      var nodeBottom;
      var margin;

      var nodes = this.nodes;
      var s = nodes.length;
      for (var i = 0; i < s; i++) {
        var lNode = nodes[i];

        if (recursive && lNode.child != null) {
          lNode.updateBounds();
        }
        nodeLeft = lNode.getLeft();
        nodeRight = lNode.getRight();
        nodeTop = lNode.getTop();
        nodeBottom = lNode.getBottom();

        if (left > nodeLeft) {
          left = nodeLeft;
        }

        if (right < nodeRight) {
          right = nodeRight;
        }

        if (top > nodeTop) {
          top = nodeTop;
        }

        if (bottom < nodeBottom) {
          bottom = nodeBottom;
        }
      }

      var boundingRect = new RectangleD(left, top, right - left, bottom - top);
      if (left == Integer.MAX_VALUE) {
        this.left = this.parent.getLeft();
        this.right = this.parent.getRight();
        this.top = this.parent.getTop();
        this.bottom = this.parent.getBottom();
      }

      if (nodes[0].getParent().paddingLeft != undefined) {
        margin = nodes[0].getParent().paddingLeft;
      } else {
        margin = this.margin;
      }

      this.left = boundingRect.x - margin;
      this.right = boundingRect.x + boundingRect.width + margin;
      this.top = boundingRect.y - margin;
      this.bottom = boundingRect.y + boundingRect.height + margin;
    };

    LGraph.calculateBounds = function (nodes) {
      var left = Integer.MAX_VALUE;
      var right = -Integer.MAX_VALUE;
      var top = Integer.MAX_VALUE;
      var bottom = -Integer.MAX_VALUE;
      var nodeLeft;
      var nodeRight;
      var nodeTop;
      var nodeBottom;

      var s = nodes.length;

      for (var i = 0; i < s; i++) {
        var lNode = nodes[i];
        nodeLeft = lNode.getLeft();
        nodeRight = lNode.getRight();
        nodeTop = lNode.getTop();
        nodeBottom = lNode.getBottom();

        if (left > nodeLeft) {
          left = nodeLeft;
        }

        if (right < nodeRight) {
          right = nodeRight;
        }

        if (top > nodeTop) {
          top = nodeTop;
        }

        if (bottom < nodeBottom) {
          bottom = nodeBottom;
        }
      }

      var boundingRect = new RectangleD(left, top, right - left, bottom - top);

      return boundingRect;
    };

    LGraph.prototype.getInclusionTreeDepth = function () {
      if (this == this.graphManager.getRoot()) {
        return 1;
      } else {
        return this.parent.getInclusionTreeDepth();
      }
    };

    LGraph.prototype.getEstimatedSize = function () {
      if (this.estimatedSize == Integer.MIN_VALUE) {
        throw "assert failed";
      }
      return this.estimatedSize;
    };

    LGraph.prototype.calcEstimatedSize = function () {
      var size = 0;
      var nodes = this.nodes;
      var s = nodes.length;

      for (var i = 0; i < s; i++) {
        var lNode = nodes[i];
        size += lNode.calcEstimatedSize();
      }

      if (size == 0) {
        this.estimatedSize = LayoutConstants.EMPTY_COMPOUND_NODE_SIZE;
      } else {
        this.estimatedSize = size / Math.sqrt(this.nodes.length);
      }

      return this.estimatedSize;
    };

    LGraph.prototype.updateConnected = function () {
      var self = this;
      if (this.nodes.length == 0) {
        this.isConnected = true;
        return;
      }

      var queue = new LinkedList();
      var visited = new Set();
      var currentNode = this.nodes[0];
      var neighborEdges;
      var currentNeighbor;
      var childrenOfNode = currentNode.withChildren();
      childrenOfNode.forEach(function (node) {
        queue.push(node);
        visited.add(node);
      });

      while (queue.length !== 0) {
        currentNode = queue.shift();

        // Traverse all neighbors of this node
        neighborEdges = currentNode.getEdges();
        var size = neighborEdges.length;
        for (var i = 0; i < size; i++) {
          var neighborEdge = neighborEdges[i];
          currentNeighbor = neighborEdge.getOtherEndInGraph(currentNode, this);

          // Add unvisited neighbors to the list to visit
          if (currentNeighbor != null && !visited.has(currentNeighbor)) {
            var childrenOfNeighbor = currentNeighbor.withChildren();

            childrenOfNeighbor.forEach(function (node) {
              queue.push(node);
              visited.add(node);
            });
          }
        }
      }

      this.isConnected = false;

      if (visited.size >= this.nodes.length) {
        var noOfVisitedInThisGraph = 0;

        visited.forEach(function (visitedNode) {
          if (visitedNode.owner == self) {
            noOfVisitedInThisGraph++;
          }
        });

        if (noOfVisitedInThisGraph == this.nodes.length) {
          this.isConnected = true;
        }
      }
    };

    module.exports = LGraph;

    /***/ }),
    /* 7 */
    /***/ (function(module, exports, __webpack_require__) {


    var LGraph;
    var LEdge = __webpack_require__(1);

    function LGraphManager(layout) {
      LGraph = __webpack_require__(6); // It may be better to initilize this out of this function but it gives an error (Right-hand side of 'instanceof' is not callable) now.
      this.layout = layout;

      this.graphs = [];
      this.edges = [];
    }

    LGraphManager.prototype.addRoot = function () {
      var ngraph = this.layout.newGraph();
      var nnode = this.layout.newNode(null);
      var root = this.add(ngraph, nnode);
      this.setRootGraph(root);
      return this.rootGraph;
    };

    LGraphManager.prototype.add = function (newGraph, parentNode, newEdge, sourceNode, targetNode) {
      //there are just 2 parameters are passed then it adds an LGraph else it adds an LEdge
      if (newEdge == null && sourceNode == null && targetNode == null) {
        if (newGraph == null) {
          throw "Graph is null!";
        }
        if (parentNode == null) {
          throw "Parent node is null!";
        }
        if (this.graphs.indexOf(newGraph) > -1) {
          throw "Graph already in this graph mgr!";
        }

        this.graphs.push(newGraph);

        if (newGraph.parent != null) {
          throw "Already has a parent!";
        }
        if (parentNode.child != null) {
          throw "Already has a child!";
        }

        newGraph.parent = parentNode;
        parentNode.child = newGraph;

        return newGraph;
      } else {
        //change the order of the parameters
        targetNode = newEdge;
        sourceNode = parentNode;
        newEdge = newGraph;
        var sourceGraph = sourceNode.getOwner();
        var targetGraph = targetNode.getOwner();

        if (!(sourceGraph != null && sourceGraph.getGraphManager() == this)) {
          throw "Source not in this graph mgr!";
        }
        if (!(targetGraph != null && targetGraph.getGraphManager() == this)) {
          throw "Target not in this graph mgr!";
        }

        if (sourceGraph == targetGraph) {
          newEdge.isInterGraph = false;
          return sourceGraph.add(newEdge, sourceNode, targetNode);
        } else {
          newEdge.isInterGraph = true;

          // set source and target
          newEdge.source = sourceNode;
          newEdge.target = targetNode;

          // add edge to inter-graph edge list
          if (this.edges.indexOf(newEdge) > -1) {
            throw "Edge already in inter-graph edge list!";
          }

          this.edges.push(newEdge);

          // add edge to source and target incidency lists
          if (!(newEdge.source != null && newEdge.target != null)) {
            throw "Edge source and/or target is null!";
          }

          if (!(newEdge.source.edges.indexOf(newEdge) == -1 && newEdge.target.edges.indexOf(newEdge) == -1)) {
            throw "Edge already in source and/or target incidency list!";
          }

          newEdge.source.edges.push(newEdge);
          newEdge.target.edges.push(newEdge);

          return newEdge;
        }
      }
    };

    LGraphManager.prototype.remove = function (lObj) {
      if (lObj instanceof LGraph) {
        var graph = lObj;
        if (graph.getGraphManager() != this) {
          throw "Graph not in this graph mgr";
        }
        if (!(graph == this.rootGraph || graph.parent != null && graph.parent.graphManager == this)) {
          throw "Invalid parent node!";
        }

        // first the edges (make a copy to do it safely)
        var edgesToBeRemoved = [];

        edgesToBeRemoved = edgesToBeRemoved.concat(graph.getEdges());

        var edge;
        var s = edgesToBeRemoved.length;
        for (var i = 0; i < s; i++) {
          edge = edgesToBeRemoved[i];
          graph.remove(edge);
        }

        // then the nodes (make a copy to do it safely)
        var nodesToBeRemoved = [];

        nodesToBeRemoved = nodesToBeRemoved.concat(graph.getNodes());

        var node;
        s = nodesToBeRemoved.length;
        for (var i = 0; i < s; i++) {
          node = nodesToBeRemoved[i];
          graph.remove(node);
        }

        // check if graph is the root
        if (graph == this.rootGraph) {
          this.setRootGraph(null);
        }

        // now remove the graph itself
        var index = this.graphs.indexOf(graph);
        this.graphs.splice(index, 1);

        // also reset the parent of the graph
        graph.parent = null;
      } else if (lObj instanceof LEdge) {
        edge = lObj;
        if (edge == null) {
          throw "Edge is null!";
        }
        if (!edge.isInterGraph) {
          throw "Not an inter-graph edge!";
        }
        if (!(edge.source != null && edge.target != null)) {
          throw "Source and/or target is null!";
        }

        // remove edge from source and target nodes' incidency lists

        if (!(edge.source.edges.indexOf(edge) != -1 && edge.target.edges.indexOf(edge) != -1)) {
          throw "Source and/or target doesn't know this edge!";
        }

        var index = edge.source.edges.indexOf(edge);
        edge.source.edges.splice(index, 1);
        index = edge.target.edges.indexOf(edge);
        edge.target.edges.splice(index, 1);

        // remove edge from owner graph manager's inter-graph edge list

        if (!(edge.source.owner != null && edge.source.owner.getGraphManager() != null)) {
          throw "Edge owner graph or owner graph manager is null!";
        }
        if (edge.source.owner.getGraphManager().edges.indexOf(edge) == -1) {
          throw "Not in owner graph manager's edge list!";
        }

        var index = edge.source.owner.getGraphManager().edges.indexOf(edge);
        edge.source.owner.getGraphManager().edges.splice(index, 1);
      }
    };

    LGraphManager.prototype.updateBounds = function () {
      this.rootGraph.updateBounds(true);
    };

    LGraphManager.prototype.getGraphs = function () {
      return this.graphs;
    };

    LGraphManager.prototype.getAllNodes = function () {
      if (this.allNodes == null) {
        var nodeList = [];
        var graphs = this.getGraphs();
        var s = graphs.length;
        for (var i = 0; i < s; i++) {
          nodeList = nodeList.concat(graphs[i].getNodes());
        }
        this.allNodes = nodeList;
      }
      return this.allNodes;
    };

    LGraphManager.prototype.resetAllNodes = function () {
      this.allNodes = null;
    };

    LGraphManager.prototype.resetAllEdges = function () {
      this.allEdges = null;
    };

    LGraphManager.prototype.resetAllNodesToApplyGravitation = function () {
      this.allNodesToApplyGravitation = null;
    };

    LGraphManager.prototype.getAllEdges = function () {
      if (this.allEdges == null) {
        var edgeList = [];
        var graphs = this.getGraphs();
        graphs.length;
        for (var i = 0; i < graphs.length; i++) {
          edgeList = edgeList.concat(graphs[i].getEdges());
        }

        edgeList = edgeList.concat(this.edges);

        this.allEdges = edgeList;
      }
      return this.allEdges;
    };

    LGraphManager.prototype.getAllNodesToApplyGravitation = function () {
      return this.allNodesToApplyGravitation;
    };

    LGraphManager.prototype.setAllNodesToApplyGravitation = function (nodeList) {
      if (this.allNodesToApplyGravitation != null) {
        throw "assert failed";
      }

      this.allNodesToApplyGravitation = nodeList;
    };

    LGraphManager.prototype.getRoot = function () {
      return this.rootGraph;
    };

    LGraphManager.prototype.setRootGraph = function (graph) {
      if (graph.getGraphManager() != this) {
        throw "Root not in this graph mgr!";
      }

      this.rootGraph = graph;
      // root graph must have a root node associated with it for convenience
      if (graph.parent == null) {
        graph.parent = this.layout.newNode("Root node");
      }
    };

    LGraphManager.prototype.getLayout = function () {
      return this.layout;
    };

    LGraphManager.prototype.isOneAncestorOfOther = function (firstNode, secondNode) {
      if (!(firstNode != null && secondNode != null)) {
        throw "assert failed";
      }

      if (firstNode == secondNode) {
        return true;
      }
      // Is second node an ancestor of the first one?
      var ownerGraph = firstNode.getOwner();
      var parentNode;

      do {
        parentNode = ownerGraph.getParent();

        if (parentNode == null) {
          break;
        }

        if (parentNode == secondNode) {
          return true;
        }

        ownerGraph = parentNode.getOwner();
        if (ownerGraph == null) {
          break;
        }
      } while (true);
      // Is first node an ancestor of the second one?
      ownerGraph = secondNode.getOwner();

      do {
        parentNode = ownerGraph.getParent();

        if (parentNode == null) {
          break;
        }

        if (parentNode == firstNode) {
          return true;
        }

        ownerGraph = parentNode.getOwner();
        if (ownerGraph == null) {
          break;
        }
      } while (true);

      return false;
    };

    LGraphManager.prototype.calcLowestCommonAncestors = function () {
      var edge;
      var sourceNode;
      var targetNode;
      var sourceAncestorGraph;
      var targetAncestorGraph;

      var edges = this.getAllEdges();
      var s = edges.length;
      for (var i = 0; i < s; i++) {
        edge = edges[i];

        sourceNode = edge.source;
        targetNode = edge.target;
        edge.lca = null;
        edge.sourceInLca = sourceNode;
        edge.targetInLca = targetNode;

        if (sourceNode == targetNode) {
          edge.lca = sourceNode.getOwner();
          continue;
        }

        sourceAncestorGraph = sourceNode.getOwner();

        while (edge.lca == null) {
          edge.targetInLca = targetNode;
          targetAncestorGraph = targetNode.getOwner();

          while (edge.lca == null) {
            if (targetAncestorGraph == sourceAncestorGraph) {
              edge.lca = targetAncestorGraph;
              break;
            }

            if (targetAncestorGraph == this.rootGraph) {
              break;
            }

            if (edge.lca != null) {
              throw "assert failed";
            }
            edge.targetInLca = targetAncestorGraph.getParent();
            targetAncestorGraph = edge.targetInLca.getOwner();
          }

          if (sourceAncestorGraph == this.rootGraph) {
            break;
          }

          if (edge.lca == null) {
            edge.sourceInLca = sourceAncestorGraph.getParent();
            sourceAncestorGraph = edge.sourceInLca.getOwner();
          }
        }

        if (edge.lca == null) {
          throw "assert failed";
        }
      }
    };

    LGraphManager.prototype.calcLowestCommonAncestor = function (firstNode, secondNode) {
      if (firstNode == secondNode) {
        return firstNode.getOwner();
      }
      var firstOwnerGraph = firstNode.getOwner();

      do {
        if (firstOwnerGraph == null) {
          break;
        }
        var secondOwnerGraph = secondNode.getOwner();

        do {
          if (secondOwnerGraph == null) {
            break;
          }

          if (secondOwnerGraph == firstOwnerGraph) {
            return secondOwnerGraph;
          }
          secondOwnerGraph = secondOwnerGraph.getParent().getOwner();
        } while (true);

        firstOwnerGraph = firstOwnerGraph.getParent().getOwner();
      } while (true);

      return firstOwnerGraph;
    };

    LGraphManager.prototype.calcInclusionTreeDepths = function (graph, depth) {
      if (graph == null && depth == null) {
        graph = this.rootGraph;
        depth = 1;
      }
      var node;

      var nodes = graph.getNodes();
      var s = nodes.length;
      for (var i = 0; i < s; i++) {
        node = nodes[i];
        node.inclusionTreeDepth = depth;

        if (node.child != null) {
          this.calcInclusionTreeDepths(node.child, depth + 1);
        }
      }
    };

    LGraphManager.prototype.includesInvalidEdge = function () {
      var edge;
      var edgesToRemove = [];

      var s = this.edges.length;
      for (var i = 0; i < s; i++) {
        edge = this.edges[i];

        if (this.isOneAncestorOfOther(edge.source, edge.target)) {
          edgesToRemove.push(edge);
        }
      }

      // Remove invalid edges from graph manager
      for (var i = 0; i < edgesToRemove.length; i++) {
        this.remove(edgesToRemove[i]);
      }

      // Invalid edges are cleared, so return false
      return false;
    };

    module.exports = LGraphManager;

    /***/ }),
    /* 8 */
    /***/ (function(module, exports, __webpack_require__) {


    /**
     * This class maintains a list of static geometry related utility methods.
     *
     *
     * Copyright: i-Vis Research Group, Bilkent University, 2007 - present
     */

    var Point = __webpack_require__(12);

    function IGeometry() {}

    /**
     * This method calculates *half* the amount in x and y directions of the two
     * input rectangles needed to separate them keeping their respective
     * positioning, and returns the result in the input array. An input
     * separation buffer added to the amount in both directions. We assume that
     * the two rectangles do intersect.
     */
    IGeometry.calcSeparationAmount = function (rectA, rectB, overlapAmount, separationBuffer) {
      if (!rectA.intersects(rectB)) {
        throw "assert failed";
      }

      var directions = new Array(2);

      this.decideDirectionsForOverlappingNodes(rectA, rectB, directions);

      overlapAmount[0] = Math.min(rectA.getRight(), rectB.getRight()) - Math.max(rectA.x, rectB.x);
      overlapAmount[1] = Math.min(rectA.getBottom(), rectB.getBottom()) - Math.max(rectA.y, rectB.y);

      // update the overlapping amounts for the following cases:
      if (rectA.getX() <= rectB.getX() && rectA.getRight() >= rectB.getRight()) {
        /* Case x.1:
        *
        * rectA
        * 	|                       |
        * 	|        _________      |
        * 	|        |       |      |
        * 	|________|_______|______|
        * 			 |       |
        *           |       |
        *        rectB
        */
        overlapAmount[0] += Math.min(rectB.getX() - rectA.getX(), rectA.getRight() - rectB.getRight());
      } else if (rectB.getX() <= rectA.getX() && rectB.getRight() >= rectA.getRight()) {
        /* Case x.2:
        *
        * rectB
        * 	|                       |
        * 	|        _________      |
        * 	|        |       |      |
        * 	|________|_______|______|
        * 			 |       |
        *           |       |
        *        rectA
        */
        overlapAmount[0] += Math.min(rectA.getX() - rectB.getX(), rectB.getRight() - rectA.getRight());
      }
      if (rectA.getY() <= rectB.getY() && rectA.getBottom() >= rectB.getBottom()) {
        /* Case y.1:
         *          ________ rectA
         *         |
         *         |
         *   ______|____  rectB
         *         |    |
         *         |    |
         *   ______|____|
         *         |
         *         |
         *         |________
         *
         */
        overlapAmount[1] += Math.min(rectB.getY() - rectA.getY(), rectA.getBottom() - rectB.getBottom());
      } else if (rectB.getY() <= rectA.getY() && rectB.getBottom() >= rectA.getBottom()) {
        /* Case y.2:
        *          ________ rectB
        *         |
        *         |
        *   ______|____  rectA
        *         |    |
        *         |    |
        *   ______|____|
        *         |
        *         |
        *         |________
        *
        */
        overlapAmount[1] += Math.min(rectA.getY() - rectB.getY(), rectB.getBottom() - rectA.getBottom());
      }

      // find slope of the line passes two centers
      var slope = Math.abs((rectB.getCenterY() - rectA.getCenterY()) / (rectB.getCenterX() - rectA.getCenterX()));
      // if centers are overlapped
      if (rectB.getCenterY() === rectA.getCenterY() && rectB.getCenterX() === rectA.getCenterX()) {
        // assume the slope is 1 (45 degree)
        slope = 1.0;
      }

      var moveByY = slope * overlapAmount[0];
      var moveByX = overlapAmount[1] / slope;
      if (overlapAmount[0] < moveByX) {
        moveByX = overlapAmount[0];
      } else {
        moveByY = overlapAmount[1];
      }
      // return half the amount so that if each rectangle is moved by these
      // amounts in opposite directions, overlap will be resolved
      overlapAmount[0] = -1 * directions[0] * (moveByX / 2 + separationBuffer);
      overlapAmount[1] = -1 * directions[1] * (moveByY / 2 + separationBuffer);
    };

    /**
     * This method decides the separation direction of overlapping nodes
     *
     * if directions[0] = -1, then rectA goes left
     * if directions[0] = 1,  then rectA goes right
     * if directions[1] = -1, then rectA goes up
     * if directions[1] = 1,  then rectA goes down
     */
    IGeometry.decideDirectionsForOverlappingNodes = function (rectA, rectB, directions) {
      if (rectA.getCenterX() < rectB.getCenterX()) {
        directions[0] = -1;
      } else {
        directions[0] = 1;
      }

      if (rectA.getCenterY() < rectB.getCenterY()) {
        directions[1] = -1;
      } else {
        directions[1] = 1;
      }
    };

    /**
     * This method calculates the intersection (clipping) points of the two
     * input rectangles with line segment defined by the centers of these two
     * rectangles. The clipping points are saved in the input double array and
     * whether or not the two rectangles overlap is returned.
     */
    IGeometry.getIntersection2 = function (rectA, rectB, result) {
      //result[0-1] will contain clipPoint of rectA, result[2-3] will contain clipPoint of rectB
      var p1x = rectA.getCenterX();
      var p1y = rectA.getCenterY();
      var p2x = rectB.getCenterX();
      var p2y = rectB.getCenterY();

      //if two rectangles intersect, then clipping points are centers
      if (rectA.intersects(rectB)) {
        result[0] = p1x;
        result[1] = p1y;
        result[2] = p2x;
        result[3] = p2y;
        return true;
      }
      //variables for rectA
      var topLeftAx = rectA.getX();
      var topLeftAy = rectA.getY();
      var topRightAx = rectA.getRight();
      var bottomLeftAx = rectA.getX();
      var bottomLeftAy = rectA.getBottom();
      var bottomRightAx = rectA.getRight();
      var halfWidthA = rectA.getWidthHalf();
      var halfHeightA = rectA.getHeightHalf();
      //variables for rectB
      var topLeftBx = rectB.getX();
      var topLeftBy = rectB.getY();
      var topRightBx = rectB.getRight();
      var bottomLeftBx = rectB.getX();
      var bottomLeftBy = rectB.getBottom();
      var bottomRightBx = rectB.getRight();
      var halfWidthB = rectB.getWidthHalf();
      var halfHeightB = rectB.getHeightHalf();

      //flag whether clipping points are found
      var clipPointAFound = false;
      var clipPointBFound = false;

      // line is vertical
      if (p1x === p2x) {
        if (p1y > p2y) {
          result[0] = p1x;
          result[1] = topLeftAy;
          result[2] = p2x;
          result[3] = bottomLeftBy;
          return false;
        } else if (p1y < p2y) {
          result[0] = p1x;
          result[1] = bottomLeftAy;
          result[2] = p2x;
          result[3] = topLeftBy;
          return false;
        } else ;
      }
      // line is horizontal
      else if (p1y === p2y) {
          if (p1x > p2x) {
            result[0] = topLeftAx;
            result[1] = p1y;
            result[2] = topRightBx;
            result[3] = p2y;
            return false;
          } else if (p1x < p2x) {
            result[0] = topRightAx;
            result[1] = p1y;
            result[2] = topLeftBx;
            result[3] = p2y;
            return false;
          } else ;
        } else {
          //slopes of rectA's and rectB's diagonals
          var slopeA = rectA.height / rectA.width;
          var slopeB = rectB.height / rectB.width;

          //slope of line between center of rectA and center of rectB
          var slopePrime = (p2y - p1y) / (p2x - p1x);
          var cardinalDirectionA = void 0;
          var cardinalDirectionB = void 0;
          var tempPointAx = void 0;
          var tempPointAy = void 0;
          var tempPointBx = void 0;
          var tempPointBy = void 0;

          //determine whether clipping point is the corner of nodeA
          if (-slopeA === slopePrime) {
            if (p1x > p2x) {
              result[0] = bottomLeftAx;
              result[1] = bottomLeftAy;
              clipPointAFound = true;
            } else {
              result[0] = topRightAx;
              result[1] = topLeftAy;
              clipPointAFound = true;
            }
          } else if (slopeA === slopePrime) {
            if (p1x > p2x) {
              result[0] = topLeftAx;
              result[1] = topLeftAy;
              clipPointAFound = true;
            } else {
              result[0] = bottomRightAx;
              result[1] = bottomLeftAy;
              clipPointAFound = true;
            }
          }

          //determine whether clipping point is the corner of nodeB
          if (-slopeB === slopePrime) {
            if (p2x > p1x) {
              result[2] = bottomLeftBx;
              result[3] = bottomLeftBy;
              clipPointBFound = true;
            } else {
              result[2] = topRightBx;
              result[3] = topLeftBy;
              clipPointBFound = true;
            }
          } else if (slopeB === slopePrime) {
            if (p2x > p1x) {
              result[2] = topLeftBx;
              result[3] = topLeftBy;
              clipPointBFound = true;
            } else {
              result[2] = bottomRightBx;
              result[3] = bottomLeftBy;
              clipPointBFound = true;
            }
          }

          //if both clipping points are corners
          if (clipPointAFound && clipPointBFound) {
            return false;
          }

          //determine Cardinal Direction of rectangles
          if (p1x > p2x) {
            if (p1y > p2y) {
              cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 4);
              cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 2);
            } else {
              cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 3);
              cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 1);
            }
          } else {
            if (p1y > p2y) {
              cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 1);
              cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 3);
            } else {
              cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 2);
              cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 4);
            }
          }
          //calculate clipping Point if it is not found before
          if (!clipPointAFound) {
            switch (cardinalDirectionA) {
              case 1:
                tempPointAy = topLeftAy;
                tempPointAx = p1x + -halfHeightA / slopePrime;
                result[0] = tempPointAx;
                result[1] = tempPointAy;
                break;
              case 2:
                tempPointAx = bottomRightAx;
                tempPointAy = p1y + halfWidthA * slopePrime;
                result[0] = tempPointAx;
                result[1] = tempPointAy;
                break;
              case 3:
                tempPointAy = bottomLeftAy;
                tempPointAx = p1x + halfHeightA / slopePrime;
                result[0] = tempPointAx;
                result[1] = tempPointAy;
                break;
              case 4:
                tempPointAx = bottomLeftAx;
                tempPointAy = p1y + -halfWidthA * slopePrime;
                result[0] = tempPointAx;
                result[1] = tempPointAy;
                break;
            }
          }
          if (!clipPointBFound) {
            switch (cardinalDirectionB) {
              case 1:
                tempPointBy = topLeftBy;
                tempPointBx = p2x + -halfHeightB / slopePrime;
                result[2] = tempPointBx;
                result[3] = tempPointBy;
                break;
              case 2:
                tempPointBx = bottomRightBx;
                tempPointBy = p2y + halfWidthB * slopePrime;
                result[2] = tempPointBx;
                result[3] = tempPointBy;
                break;
              case 3:
                tempPointBy = bottomLeftBy;
                tempPointBx = p2x + halfHeightB / slopePrime;
                result[2] = tempPointBx;
                result[3] = tempPointBy;
                break;
              case 4:
                tempPointBx = bottomLeftBx;
                tempPointBy = p2y + -halfWidthB * slopePrime;
                result[2] = tempPointBx;
                result[3] = tempPointBy;
                break;
            }
          }
        }
      return false;
    };

    /**
     * This method returns in which cardinal direction does input point stays
     * 1: North
     * 2: East
     * 3: South
     * 4: West
     */
    IGeometry.getCardinalDirection = function (slope, slopePrime, line) {
      if (slope > slopePrime) {
        return line;
      } else {
        return 1 + line % 4;
      }
    };

    /**
     * This method calculates the intersection of the two lines defined by
     * point pairs (s1,s2) and (f1,f2).
     */
    IGeometry.getIntersection = function (s1, s2, f1, f2) {
      if (f2 == null) {
        return this.getIntersection2(s1, s2, f1);
      }

      var x1 = s1.x;
      var y1 = s1.y;
      var x2 = s2.x;
      var y2 = s2.y;
      var x3 = f1.x;
      var y3 = f1.y;
      var x4 = f2.x;
      var y4 = f2.y;
      var x = void 0,
          y = void 0; // intersection point
      var a1 = void 0,
          a2 = void 0,
          b1 = void 0,
          b2 = void 0,
          c1 = void 0,
          c2 = void 0; // coefficients of line eqns.
      var denom = void 0;

      a1 = y2 - y1;
      b1 = x1 - x2;
      c1 = x2 * y1 - x1 * y2; // { a1*x + b1*y + c1 = 0 is line 1 }

      a2 = y4 - y3;
      b2 = x3 - x4;
      c2 = x4 * y3 - x3 * y4; // { a2*x + b2*y + c2 = 0 is line 2 }

      denom = a1 * b2 - a2 * b1;

      if (denom === 0) {
        return null;
      }

      x = (b1 * c2 - b2 * c1) / denom;
      y = (a2 * c1 - a1 * c2) / denom;

      return new Point(x, y);
    };

    /**
     * This method finds and returns the angle of the vector from the + x-axis
     * in clockwise direction (compatible w/ Java coordinate system!).
     */
    IGeometry.angleOfVector = function (Cx, Cy, Nx, Ny) {
      var C_angle = void 0;

      if (Cx !== Nx) {
        C_angle = Math.atan((Ny - Cy) / (Nx - Cx));

        if (Nx < Cx) {
          C_angle += Math.PI;
        } else if (Ny < Cy) {
          C_angle += this.TWO_PI;
        }
      } else if (Ny < Cy) {
        C_angle = this.ONE_AND_HALF_PI; // 270 degrees
      } else {
        C_angle = this.HALF_PI; // 90 degrees
      }

      return C_angle;
    };

    /**
     * This method checks whether the given two line segments (one with point
     * p1 and p2, the other with point p3 and p4) intersect at a point other
     * than these points.
     */
    IGeometry.doIntersect = function (p1, p2, p3, p4) {
      var a = p1.x;
      var b = p1.y;
      var c = p2.x;
      var d = p2.y;
      var p = p3.x;
      var q = p3.y;
      var r = p4.x;
      var s = p4.y;
      var det = (c - a) * (s - q) - (r - p) * (d - b);

      if (det === 0) {
        return false;
      } else {
        var lambda = ((s - q) * (r - a) + (p - r) * (s - b)) / det;
        var gamma = ((b - d) * (r - a) + (c - a) * (s - b)) / det;
        return 0 < lambda && lambda < 1 && 0 < gamma && gamma < 1;
      }
    };

    /**
     * This method checks and calculates the intersection of 
     * a line segment and a circle.
     */
    IGeometry.findCircleLineIntersections = function (Ex, Ey, Lx, Ly, Cx, Cy, r) {

      // E is the starting point of the ray,
      // L is the end point of the ray,
      // C is the center of sphere you're testing against
      // r is the radius of that sphere

      // Compute:
      // d = L - E ( Direction vector of ray, from start to end )
      // f = E - C ( Vector from center sphere to ray start )

      // Then the intersection is found by..
      // P = E + t * d
      // This is a parametric equation:
      // Px = Ex + tdx
      // Py = Ey + tdy

      // get a, b, c values
      var a = (Lx - Ex) * (Lx - Ex) + (Ly - Ey) * (Ly - Ey);
      var b = 2 * ((Ex - Cx) * (Lx - Ex) + (Ey - Cy) * (Ly - Ey));
      var c = (Ex - Cx) * (Ex - Cx) + (Ey - Cy) * (Ey - Cy) - r * r;

      // get discriminant
      var disc = b * b - 4 * a * c;
      if (disc >= 0) {
        // insert into quadratic formula
        var t1 = (-b + Math.sqrt(b * b - 4 * a * c)) / (2 * a);
        var t2 = (-b - Math.sqrt(b * b - 4 * a * c)) / (2 * a);
        var intersections = null;
        if (t1 >= 0 && t1 <= 1) {
          // t1 is the intersection, and it's closer than t2
          // (since t1 uses -b - discriminant)
          // Impale, Poke
          return [t1];
        }

        // here t1 didn't intersect so we are either started
        // inside the sphere or completely past it
        if (t2 >= 0 && t2 <= 1) {
          // ExitWound
          return [t2];
        }

        return intersections;
      } else return null;
    };

    // -----------------------------------------------------------------------------
    // Section: Class Constants
    // -----------------------------------------------------------------------------
    /**
     * Some useful pre-calculated constants
     */
    IGeometry.HALF_PI = 0.5 * Math.PI;
    IGeometry.ONE_AND_HALF_PI = 1.5 * Math.PI;
    IGeometry.TWO_PI = 2.0 * Math.PI;
    IGeometry.THREE_PI = 3.0 * Math.PI;

    module.exports = IGeometry;

    /***/ }),
    /* 9 */
    /***/ (function(module, exports, __webpack_require__) {


    function IMath() {}

    /**
     * This method returns the sign of the input value.
     */
    IMath.sign = function (value) {
      if (value > 0) {
        return 1;
      } else if (value < 0) {
        return -1;
      } else {
        return 0;
      }
    };

    IMath.floor = function (value) {
      return value < 0 ? Math.ceil(value) : Math.floor(value);
    };

    IMath.ceil = function (value) {
      return value < 0 ? Math.floor(value) : Math.ceil(value);
    };

    module.exports = IMath;

    /***/ }),
    /* 10 */
    /***/ (function(module, exports, __webpack_require__) {


    function Integer() {}

    Integer.MAX_VALUE = 2147483647;
    Integer.MIN_VALUE = -2147483648;

    module.exports = Integer;

    /***/ }),
    /* 11 */
    /***/ (function(module, exports, __webpack_require__) {


    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var nodeFrom = function nodeFrom(value) {
      return { value: value, next: null, prev: null };
    };

    var add = function add(prev, node, next, list) {
      if (prev !== null) {
        prev.next = node;
      } else {
        list.head = node;
      }

      if (next !== null) {
        next.prev = node;
      } else {
        list.tail = node;
      }

      node.prev = prev;
      node.next = next;

      list.length++;

      return node;
    };

    var _remove = function _remove(node, list) {
      var prev = node.prev,
          next = node.next;


      if (prev !== null) {
        prev.next = next;
      } else {
        list.head = next;
      }

      if (next !== null) {
        next.prev = prev;
      } else {
        list.tail = prev;
      }

      node.prev = node.next = null;

      list.length--;

      return node;
    };

    var LinkedList = function () {
      function LinkedList(vals) {
        var _this = this;

        _classCallCheck(this, LinkedList);

        this.length = 0;
        this.head = null;
        this.tail = null;

        if (vals != null) {
          vals.forEach(function (v) {
            return _this.push(v);
          });
        }
      }

      _createClass(LinkedList, [{
        key: "size",
        value: function size() {
          return this.length;
        }
      }, {
        key: "insertBefore",
        value: function insertBefore(val, otherNode) {
          return add(otherNode.prev, nodeFrom(val), otherNode, this);
        }
      }, {
        key: "insertAfter",
        value: function insertAfter(val, otherNode) {
          return add(otherNode, nodeFrom(val), otherNode.next, this);
        }
      }, {
        key: "insertNodeBefore",
        value: function insertNodeBefore(newNode, otherNode) {
          return add(otherNode.prev, newNode, otherNode, this);
        }
      }, {
        key: "insertNodeAfter",
        value: function insertNodeAfter(newNode, otherNode) {
          return add(otherNode, newNode, otherNode.next, this);
        }
      }, {
        key: "push",
        value: function push(val) {
          return add(this.tail, nodeFrom(val), null, this);
        }
      }, {
        key: "unshift",
        value: function unshift(val) {
          return add(null, nodeFrom(val), this.head, this);
        }
      }, {
        key: "remove",
        value: function remove(node) {
          return _remove(node, this);
        }
      }, {
        key: "pop",
        value: function pop() {
          return _remove(this.tail, this).value;
        }
      }, {
        key: "popNode",
        value: function popNode() {
          return _remove(this.tail, this);
        }
      }, {
        key: "shift",
        value: function shift() {
          return _remove(this.head, this).value;
        }
      }, {
        key: "shiftNode",
        value: function shiftNode() {
          return _remove(this.head, this);
        }
      }, {
        key: "get_object_at",
        value: function get_object_at(index) {
          if (index <= this.length()) {
            var i = 1;
            var current = this.head;
            while (i < index) {
              current = current.next;
              i++;
            }
            return current.value;
          }
        }
      }, {
        key: "set_object_at",
        value: function set_object_at(index, value) {
          if (index <= this.length()) {
            var i = 1;
            var current = this.head;
            while (i < index) {
              current = current.next;
              i++;
            }
            current.value = value;
          }
        }
      }]);

      return LinkedList;
    }();

    module.exports = LinkedList;

    /***/ }),
    /* 12 */
    /***/ (function(module, exports, __webpack_require__) {


    /*
     *This class is the javascript implementation of the Point.java class in jdk
     */
    function Point(x, y, p) {
      this.x = null;
      this.y = null;
      if (x == null && y == null && p == null) {
        this.x = 0;
        this.y = 0;
      } else if (typeof x == 'number' && typeof y == 'number' && p == null) {
        this.x = x;
        this.y = y;
      } else if (x.constructor.name == 'Point' && y == null && p == null) {
        p = x;
        this.x = p.x;
        this.y = p.y;
      }
    }

    Point.prototype.getX = function () {
      return this.x;
    };

    Point.prototype.getY = function () {
      return this.y;
    };

    Point.prototype.getLocation = function () {
      return new Point(this.x, this.y);
    };

    Point.prototype.setLocation = function (x, y, p) {
      if (x.constructor.name == 'Point' && y == null && p == null) {
        p = x;
        this.setLocation(p.x, p.y);
      } else if (typeof x == 'number' && typeof y == 'number' && p == null) {
        //if both parameters are integer just move (x,y) location
        if (parseInt(x) == x && parseInt(y) == y) {
          this.move(x, y);
        } else {
          this.x = Math.floor(x + 0.5);
          this.y = Math.floor(y + 0.5);
        }
      }
    };

    Point.prototype.move = function (x, y) {
      this.x = x;
      this.y = y;
    };

    Point.prototype.translate = function (dx, dy) {
      this.x += dx;
      this.y += dy;
    };

    Point.prototype.equals = function (obj) {
      if (obj.constructor.name == "Point") {
        var pt = obj;
        return this.x == pt.x && this.y == pt.y;
      }
      return this == obj;
    };

    Point.prototype.toString = function () {
      return new Point().constructor.name + "[x=" + this.x + ",y=" + this.y + "]";
    };

    module.exports = Point;

    /***/ }),
    /* 13 */
    /***/ (function(module, exports, __webpack_require__) {


    function RectangleD(x, y, width, height) {
      this.x = 0;
      this.y = 0;
      this.width = 0;
      this.height = 0;

      if (x != null && y != null && width != null && height != null) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
      }
    }

    RectangleD.prototype.getX = function () {
      return this.x;
    };

    RectangleD.prototype.setX = function (x) {
      this.x = x;
    };

    RectangleD.prototype.getY = function () {
      return this.y;
    };

    RectangleD.prototype.setY = function (y) {
      this.y = y;
    };

    RectangleD.prototype.getWidth = function () {
      return this.width;
    };

    RectangleD.prototype.setWidth = function (width) {
      this.width = width;
    };

    RectangleD.prototype.getHeight = function () {
      return this.height;
    };

    RectangleD.prototype.setHeight = function (height) {
      this.height = height;
    };

    RectangleD.prototype.getRight = function () {
      return this.x + this.width;
    };

    RectangleD.prototype.getBottom = function () {
      return this.y + this.height;
    };

    RectangleD.prototype.intersects = function (a) {
      if (this.getRight() < a.x) {
        return false;
      }

      if (this.getBottom() < a.y) {
        return false;
      }

      if (a.getRight() < this.x) {
        return false;
      }

      if (a.getBottom() < this.y) {
        return false;
      }

      return true;
    };

    RectangleD.prototype.getCenterX = function () {
      return this.x + this.width / 2;
    };

    RectangleD.prototype.getMinX = function () {
      return this.getX();
    };

    RectangleD.prototype.getMaxX = function () {
      return this.getX() + this.width;
    };

    RectangleD.prototype.getCenterY = function () {
      return this.y + this.height / 2;
    };

    RectangleD.prototype.getMinY = function () {
      return this.getY();
    };

    RectangleD.prototype.getMaxY = function () {
      return this.getY() + this.height;
    };

    RectangleD.prototype.getWidthHalf = function () {
      return this.width / 2;
    };

    RectangleD.prototype.getHeightHalf = function () {
      return this.height / 2;
    };

    module.exports = RectangleD;

    /***/ }),
    /* 14 */
    /***/ (function(module, exports, __webpack_require__) {


    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

    function UniqueIDGeneretor() {}

    UniqueIDGeneretor.lastID = 0;

    UniqueIDGeneretor.createID = function (obj) {
      if (UniqueIDGeneretor.isPrimitive(obj)) {
        return obj;
      }
      if (obj.uniqueID != null) {
        return obj.uniqueID;
      }
      obj.uniqueID = UniqueIDGeneretor.getString();
      UniqueIDGeneretor.lastID++;
      return obj.uniqueID;
    };

    UniqueIDGeneretor.getString = function (id) {
      if (id == null) id = UniqueIDGeneretor.lastID;
      return "Object#" + id + "";
    };

    UniqueIDGeneretor.isPrimitive = function (arg) {
      var type = typeof arg === "undefined" ? "undefined" : _typeof(arg);
      return arg == null || type != "object" && type != "function";
    };

    module.exports = UniqueIDGeneretor;

    /***/ }),
    /* 15 */
    /***/ (function(module, exports, __webpack_require__) {


    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

    var LayoutConstants = __webpack_require__(0);
    var LGraphManager = __webpack_require__(7);
    var LNode = __webpack_require__(3);
    var LEdge = __webpack_require__(1);
    var LGraph = __webpack_require__(6);
    var PointD = __webpack_require__(5);
    var Transform = __webpack_require__(17);
    var Emitter = __webpack_require__(29);

    function Layout(isRemoteUse) {
      Emitter.call(this);

      //Layout Quality: 0:draft, 1:default, 2:proof
      this.layoutQuality = LayoutConstants.QUALITY;
      //Whether layout should create bendpoints as needed or not
      this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;
      //Whether layout should be incremental or not
      this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;
      //Whether we animate from before to after layout node positions
      this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;
      //Whether we animate the layout process or not
      this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;
      //Number iterations that should be done between two successive animations
      this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;
      /**
       * Whether or not leaf nodes (non-compound nodes) are of uniform sizes. When
       * they are, both spring and repulsion forces between two leaf nodes can be
       * calculated without the expensive clipping point calculations, resulting
       * in major speed-up.
       */
      this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;
      /**
       * This is used for creation of bendpoints by using dummy nodes and edges.
       * Maps an LEdge to its dummy bendpoint path.
       */
      this.edgeToDummyNodes = new Map();
      this.graphManager = new LGraphManager(this);
      this.isLayoutFinished = false;
      this.isSubLayout = false;
      this.isRemoteUse = false;

      if (isRemoteUse != null) {
        this.isRemoteUse = isRemoteUse;
      }
    }

    Layout.RANDOM_SEED = 1;

    Layout.prototype = Object.create(Emitter.prototype);

    Layout.prototype.getGraphManager = function () {
      return this.graphManager;
    };

    Layout.prototype.getAllNodes = function () {
      return this.graphManager.getAllNodes();
    };

    Layout.prototype.getAllEdges = function () {
      return this.graphManager.getAllEdges();
    };

    Layout.prototype.getAllNodesToApplyGravitation = function () {
      return this.graphManager.getAllNodesToApplyGravitation();
    };

    Layout.prototype.newGraphManager = function () {
      var gm = new LGraphManager(this);
      this.graphManager = gm;
      return gm;
    };

    Layout.prototype.newGraph = function (vGraph) {
      return new LGraph(null, this.graphManager, vGraph);
    };

    Layout.prototype.newNode = function (vNode) {
      return new LNode(this.graphManager, vNode);
    };

    Layout.prototype.newEdge = function (vEdge) {
      return new LEdge(null, null, vEdge);
    };

    Layout.prototype.checkLayoutSuccess = function () {
      return this.graphManager.getRoot() == null || this.graphManager.getRoot().getNodes().length == 0 || this.graphManager.includesInvalidEdge();
    };

    Layout.prototype.runLayout = function () {
      this.isLayoutFinished = false;

      if (this.tilingPreLayout) {
        this.tilingPreLayout();
      }

      this.initParameters();
      var isLayoutSuccessfull;

      if (this.checkLayoutSuccess()) {
        isLayoutSuccessfull = false;
      } else {
        isLayoutSuccessfull = this.layout();
      }

      if (LayoutConstants.ANIMATE === 'during') {
        // If this is a 'during' layout animation. Layout is not finished yet. 
        // We need to perform these in index.js when layout is really finished.
        return false;
      }

      if (isLayoutSuccessfull) {
        if (!this.isSubLayout) {
          this.doPostLayout();
        }
      }

      if (this.tilingPostLayout) {
        this.tilingPostLayout();
      }

      this.isLayoutFinished = true;

      return isLayoutSuccessfull;
    };

    /**
     * This method performs the operations required after layout.
     */
    Layout.prototype.doPostLayout = function () {
      //assert !isSubLayout : "Should not be called on sub-layout!";
      // Propagate geometric changes to v-level objects
      if (!this.incremental) {
        this.transform();
      }
      this.update();
    };

    /**
     * This method updates the geometry of the target graph according to
     * calculated layout.
     */
    Layout.prototype.update2 = function () {
      // update bend points
      if (this.createBendsAsNeeded) {
        this.createBendpointsFromDummyNodes();

        // reset all edges, since the topology has changed
        this.graphManager.resetAllEdges();
      }

      // perform edge, node and root updates if layout is not called
      // remotely
      if (!this.isRemoteUse) {
        var allEdges = this.graphManager.getAllEdges();
        for (var i = 0; i < allEdges.length; i++) {
          allEdges[i];
          //      this.update(edge);
        }
        var nodes = this.graphManager.getRoot().getNodes();
        for (var i = 0; i < nodes.length; i++) {
          nodes[i];
          //      this.update(node);
        }

        // update root graph
        this.update(this.graphManager.getRoot());
      }
    };

    Layout.prototype.update = function (obj) {
      if (obj == null) {
        this.update2();
      } else if (obj instanceof LNode) {
        var node = obj;
        if (node.getChild() != null) {
          // since node is compound, recursively update child nodes
          var nodes = node.getChild().getNodes();
          for (var i = 0; i < nodes.length; i++) {
            update(nodes[i]);
          }
        }

        // if the l-level node is associated with a v-level graph object,
        // then it is assumed that the v-level node implements the
        // interface Updatable.
        if (node.vGraphObject != null) {
          // cast to Updatable without any type check
          var vNode = node.vGraphObject;

          // call the update method of the interface
          vNode.update(node);
        }
      } else if (obj instanceof LEdge) {
        var edge = obj;
        // if the l-level edge is associated with a v-level graph object,
        // then it is assumed that the v-level edge implements the
        // interface Updatable.

        if (edge.vGraphObject != null) {
          // cast to Updatable without any type check
          var vEdge = edge.vGraphObject;

          // call the update method of the interface
          vEdge.update(edge);
        }
      } else if (obj instanceof LGraph) {
        var graph = obj;
        // if the l-level graph is associated with a v-level graph object,
        // then it is assumed that the v-level object implements the
        // interface Updatable.

        if (graph.vGraphObject != null) {
          // cast to Updatable without any type check
          var vGraph = graph.vGraphObject;

          // call the update method of the interface
          vGraph.update(graph);
        }
      }
    };

    /**
     * This method is used to set all layout parameters to default values
     * determined at compile time.
     */
    Layout.prototype.initParameters = function () {
      if (!this.isSubLayout) {
        this.layoutQuality = LayoutConstants.QUALITY;
        this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;
        this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;
        this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;
        this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;
        this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;
        this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;
      }

      if (this.animationDuringLayout) {
        this.animationOnLayout = false;
      }
    };

    Layout.prototype.transform = function (newLeftTop) {
      if (newLeftTop == undefined) {
        this.transform(new PointD(0, 0));
      } else {
        // create a transformation object (from Eclipse to layout). When an
        // inverse transform is applied, we get upper-left coordinate of the
        // drawing or the root graph at given input coordinate (some margins
        // already included in calculation of left-top).

        var trans = new Transform();
        var leftTop = this.graphManager.getRoot().updateLeftTop();

        if (leftTop != null) {
          trans.setWorldOrgX(newLeftTop.x);
          trans.setWorldOrgY(newLeftTop.y);

          trans.setDeviceOrgX(leftTop.x);
          trans.setDeviceOrgY(leftTop.y);

          var nodes = this.getAllNodes();
          var node;

          for (var i = 0; i < nodes.length; i++) {
            node = nodes[i];
            node.transform(trans);
          }
        }
      }
    };

    Layout.prototype.positionNodesRandomly = function (graph) {

      if (graph == undefined) {
        //assert !this.incremental;
        this.positionNodesRandomly(this.getGraphManager().getRoot());
        this.getGraphManager().getRoot().updateBounds(true);
      } else {
        var lNode;
        var childGraph;

        var nodes = graph.getNodes();
        for (var i = 0; i < nodes.length; i++) {
          lNode = nodes[i];
          childGraph = lNode.getChild();

          if (childGraph == null) {
            lNode.scatter();
          } else if (childGraph.getNodes().length == 0) {
            lNode.scatter();
          } else {
            this.positionNodesRandomly(childGraph);
            lNode.updateBounds();
          }
        }
      }
    };

    /**
     * This method returns a list of trees where each tree is represented as a
     * list of l-nodes. The method returns a list of size 0 when:
     * - The graph is not flat or
     * - One of the component(s) of the graph is not a tree.
     */
    Layout.prototype.getFlatForest = function () {
      var flatForest = [];
      var isForest = true;

      // Quick reference for all nodes in the graph manager associated with
      // this layout. The list should not be changed.
      var allNodes = this.graphManager.getRoot().getNodes();

      // First be sure that the graph is flat
      var isFlat = true;

      for (var i = 0; i < allNodes.length; i++) {
        if (allNodes[i].getChild() != null) {
          isFlat = false;
        }
      }

      // Return empty forest if the graph is not flat.
      if (!isFlat) {
        return flatForest;
      }

      // Run BFS for each component of the graph.

      var visited = new Set();
      var toBeVisited = [];
      var parents = new Map();
      var unProcessedNodes = [];

      unProcessedNodes = unProcessedNodes.concat(allNodes);

      // Each iteration of this loop finds a component of the graph and
      // decides whether it is a tree or not. If it is a tree, adds it to the
      // forest and continued with the next component.

      while (unProcessedNodes.length > 0 && isForest) {
        toBeVisited.push(unProcessedNodes[0]);

        // Start the BFS. Each iteration of this loop visits a node in a
        // BFS manner.
        while (toBeVisited.length > 0 && isForest) {
          //pool operation
          var currentNode = toBeVisited[0];
          toBeVisited.splice(0, 1);
          visited.add(currentNode);

          // Traverse all neighbors of this node
          var neighborEdges = currentNode.getEdges();

          for (var i = 0; i < neighborEdges.length; i++) {
            var currentNeighbor = neighborEdges[i].getOtherEnd(currentNode);

            // If BFS is not growing from this neighbor.
            if (parents.get(currentNode) != currentNeighbor) {
              // We haven't previously visited this neighbor.
              if (!visited.has(currentNeighbor)) {
                toBeVisited.push(currentNeighbor);
                parents.set(currentNeighbor, currentNode);
              }
              // Since we have previously visited this neighbor and
              // this neighbor is not parent of currentNode, given
              // graph contains a component that is not tree, hence
              // it is not a forest.
              else {
                  isForest = false;
                  break;
                }
            }
          }
        }

        // The graph contains a component that is not a tree. Empty
        // previously found trees. The method will end.
        if (!isForest) {
          flatForest = [];
        }
        // Save currently visited nodes as a tree in our forest. Reset
        // visited and parents lists. Continue with the next component of
        // the graph, if any.
        else {
            var temp = [].concat(_toConsumableArray(visited));
            flatForest.push(temp);
            //flatForest = flatForest.concat(temp);
            //unProcessedNodes.removeAll(visited);
            for (var i = 0; i < temp.length; i++) {
              var value = temp[i];
              var index = unProcessedNodes.indexOf(value);
              if (index > -1) {
                unProcessedNodes.splice(index, 1);
              }
            }
            visited = new Set();
            parents = new Map();
          }
      }

      return flatForest;
    };

    /**
     * This method creates dummy nodes (an l-level node with minimal dimensions)
     * for the given edge (one per bendpoint). The existing l-level structure
     * is updated accordingly.
     */
    Layout.prototype.createDummyNodesForBendpoints = function (edge) {
      var dummyNodes = [];
      var prev = edge.source;

      var graph = this.graphManager.calcLowestCommonAncestor(edge.source, edge.target);

      for (var i = 0; i < edge.bendpoints.length; i++) {
        // create new dummy node
        var dummyNode = this.newNode(null);
        dummyNode.setRect(new Point(0, 0), new Dimension(1, 1));

        graph.add(dummyNode);

        // create new dummy edge between prev and dummy node
        var dummyEdge = this.newEdge(null);
        this.graphManager.add(dummyEdge, prev, dummyNode);

        dummyNodes.add(dummyNode);
        prev = dummyNode;
      }

      var dummyEdge = this.newEdge(null);
      this.graphManager.add(dummyEdge, prev, edge.target);

      this.edgeToDummyNodes.set(edge, dummyNodes);

      // remove real edge from graph manager if it is inter-graph
      if (edge.isInterGraph()) {
        this.graphManager.remove(edge);
      }
      // else, remove the edge from the current graph
      else {
          graph.remove(edge);
        }

      return dummyNodes;
    };

    /**
     * This method creates bendpoints for edges from the dummy nodes
     * at l-level.
     */
    Layout.prototype.createBendpointsFromDummyNodes = function () {
      var edges = [];
      edges = edges.concat(this.graphManager.getAllEdges());
      edges = [].concat(_toConsumableArray(this.edgeToDummyNodes.keys())).concat(edges);

      for (var k = 0; k < edges.length; k++) {
        var lEdge = edges[k];

        if (lEdge.bendpoints.length > 0) {
          var path = this.edgeToDummyNodes.get(lEdge);

          for (var i = 0; i < path.length; i++) {
            var dummyNode = path[i];
            var p = new PointD(dummyNode.getCenterX(), dummyNode.getCenterY());

            // update bendpoint's location according to dummy node
            var ebp = lEdge.bendpoints.get(i);
            ebp.x = p.x;
            ebp.y = p.y;

            // remove the dummy node, dummy edges incident with this
            // dummy node is also removed (within the remove method)
            dummyNode.getOwner().remove(dummyNode);
          }

          // add the real edge to graph
          this.graphManager.add(lEdge, lEdge.source, lEdge.target);
        }
      }
    };

    Layout.transform = function (sliderValue, defaultValue, minDiv, maxMul) {
      if (minDiv != undefined && maxMul != undefined) {
        var value = defaultValue;

        if (sliderValue <= 50) {
          var minValue = defaultValue / minDiv;
          value -= (defaultValue - minValue) / 50 * (50 - sliderValue);
        } else {
          var maxValue = defaultValue * maxMul;
          value += (maxValue - defaultValue) / 50 * (sliderValue - 50);
        }

        return value;
      } else {
        var a, b;

        if (sliderValue <= 50) {
          a = 9.0 * defaultValue / 500.0;
          b = defaultValue / 10.0;
        } else {
          a = 9.0 * defaultValue / 50.0;
          b = -8 * defaultValue;
        }

        return a * sliderValue + b;
      }
    };

    /**
     * This method finds and returns the center of the given nodes, assuming
     * that the given nodes form a tree in themselves.
     */
    Layout.findCenterOfTree = function (nodes) {
      var list = [];
      list = list.concat(nodes);

      var removedNodes = [];
      var remainingDegrees = new Map();
      var foundCenter = false;
      var centerNode = null;

      if (list.length == 1 || list.length == 2) {
        foundCenter = true;
        centerNode = list[0];
      }

      for (var i = 0; i < list.length; i++) {
        var node = list[i];
        var degree = node.getNeighborsList().size;
        remainingDegrees.set(node, node.getNeighborsList().size);

        if (degree == 1) {
          removedNodes.push(node);
        }
      }

      var tempList = [];
      tempList = tempList.concat(removedNodes);

      while (!foundCenter) {
        var tempList2 = [];
        tempList2 = tempList2.concat(tempList);
        tempList = [];

        for (var i = 0; i < list.length; i++) {
          var node = list[i];

          var index = list.indexOf(node);
          if (index >= 0) {
            list.splice(index, 1);
          }

          var neighbours = node.getNeighborsList();

          neighbours.forEach(function (neighbour) {
            if (removedNodes.indexOf(neighbour) < 0) {
              var otherDegree = remainingDegrees.get(neighbour);
              var newDegree = otherDegree - 1;

              if (newDegree == 1) {
                tempList.push(neighbour);
              }

              remainingDegrees.set(neighbour, newDegree);
            }
          });
        }

        removedNodes = removedNodes.concat(tempList);

        if (list.length == 1 || list.length == 2) {
          foundCenter = true;
          centerNode = list[0];
        }
      }

      return centerNode;
    };

    /**
     * During the coarsening process, this layout may be referenced by two graph managers
     * this setter function grants access to change the currently being used graph manager
     */
    Layout.prototype.setGraphManager = function (gm) {
      this.graphManager = gm;
    };

    module.exports = Layout;

    /***/ }),
    /* 16 */
    /***/ (function(module, exports, __webpack_require__) {


    function RandomSeed() {}
    // adapted from: https://stackoverflow.com/a/19303725
    RandomSeed.seed = 1;
    RandomSeed.x = 0;

    RandomSeed.nextDouble = function () {
      RandomSeed.x = Math.sin(RandomSeed.seed++) * 10000;
      return RandomSeed.x - Math.floor(RandomSeed.x);
    };

    module.exports = RandomSeed;

    /***/ }),
    /* 17 */
    /***/ (function(module, exports, __webpack_require__) {


    var PointD = __webpack_require__(5);

    function Transform(x, y) {
      this.lworldOrgX = 0.0;
      this.lworldOrgY = 0.0;
      this.ldeviceOrgX = 0.0;
      this.ldeviceOrgY = 0.0;
      this.lworldExtX = 1.0;
      this.lworldExtY = 1.0;
      this.ldeviceExtX = 1.0;
      this.ldeviceExtY = 1.0;
    }

    Transform.prototype.getWorldOrgX = function () {
      return this.lworldOrgX;
    };

    Transform.prototype.setWorldOrgX = function (wox) {
      this.lworldOrgX = wox;
    };

    Transform.prototype.getWorldOrgY = function () {
      return this.lworldOrgY;
    };

    Transform.prototype.setWorldOrgY = function (woy) {
      this.lworldOrgY = woy;
    };

    Transform.prototype.getWorldExtX = function () {
      return this.lworldExtX;
    };

    Transform.prototype.setWorldExtX = function (wex) {
      this.lworldExtX = wex;
    };

    Transform.prototype.getWorldExtY = function () {
      return this.lworldExtY;
    };

    Transform.prototype.setWorldExtY = function (wey) {
      this.lworldExtY = wey;
    };

    /* Device related */

    Transform.prototype.getDeviceOrgX = function () {
      return this.ldeviceOrgX;
    };

    Transform.prototype.setDeviceOrgX = function (dox) {
      this.ldeviceOrgX = dox;
    };

    Transform.prototype.getDeviceOrgY = function () {
      return this.ldeviceOrgY;
    };

    Transform.prototype.setDeviceOrgY = function (doy) {
      this.ldeviceOrgY = doy;
    };

    Transform.prototype.getDeviceExtX = function () {
      return this.ldeviceExtX;
    };

    Transform.prototype.setDeviceExtX = function (dex) {
      this.ldeviceExtX = dex;
    };

    Transform.prototype.getDeviceExtY = function () {
      return this.ldeviceExtY;
    };

    Transform.prototype.setDeviceExtY = function (dey) {
      this.ldeviceExtY = dey;
    };

    Transform.prototype.transformX = function (x) {
      var xDevice = 0.0;
      var worldExtX = this.lworldExtX;
      if (worldExtX != 0.0) {
        xDevice = this.ldeviceOrgX + (x - this.lworldOrgX) * this.ldeviceExtX / worldExtX;
      }

      return xDevice;
    };

    Transform.prototype.transformY = function (y) {
      var yDevice = 0.0;
      var worldExtY = this.lworldExtY;
      if (worldExtY != 0.0) {
        yDevice = this.ldeviceOrgY + (y - this.lworldOrgY) * this.ldeviceExtY / worldExtY;
      }

      return yDevice;
    };

    Transform.prototype.inverseTransformX = function (x) {
      var xWorld = 0.0;
      var deviceExtX = this.ldeviceExtX;
      if (deviceExtX != 0.0) {
        xWorld = this.lworldOrgX + (x - this.ldeviceOrgX) * this.lworldExtX / deviceExtX;
      }

      return xWorld;
    };

    Transform.prototype.inverseTransformY = function (y) {
      var yWorld = 0.0;
      var deviceExtY = this.ldeviceExtY;
      if (deviceExtY != 0.0) {
        yWorld = this.lworldOrgY + (y - this.ldeviceOrgY) * this.lworldExtY / deviceExtY;
      }
      return yWorld;
    };

    Transform.prototype.inverseTransformPoint = function (inPoint) {
      var outPoint = new PointD(this.inverseTransformX(inPoint.x), this.inverseTransformY(inPoint.y));
      return outPoint;
    };

    module.exports = Transform;

    /***/ }),
    /* 18 */
    /***/ (function(module, exports, __webpack_require__) {


    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

    var Layout = __webpack_require__(15);
    var FDLayoutConstants = __webpack_require__(4);
    var LayoutConstants = __webpack_require__(0);
    var IGeometry = __webpack_require__(8);
    var IMath = __webpack_require__(9);

    function FDLayout() {
      Layout.call(this);

      this.useSmartIdealEdgeLengthCalculation = FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;
      this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;
      this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;
      this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;
      this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;
      this.displacementThresholdPerNode = 3.0 * FDLayoutConstants.DEFAULT_EDGE_LENGTH / 100;
      this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;
      this.initialCoolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;
      this.totalDisplacement = 0.0;
      this.oldTotalDisplacement = 0.0;
      this.maxIterations = FDLayoutConstants.MAX_ITERATIONS;
    }

    FDLayout.prototype = Object.create(Layout.prototype);

    for (var prop in Layout) {
      FDLayout[prop] = Layout[prop];
    }

    FDLayout.prototype.initParameters = function () {
      Layout.prototype.initParameters.call(this, arguments);

      this.totalIterations = 0;
      this.notAnimatedIterations = 0;

      this.useFRGridVariant = FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION;

      this.grid = [];
    };

    FDLayout.prototype.calcIdealEdgeLengths = function () {
      var edge;
      var originalIdealLength;
      var lcaDepth;
      var source;
      var target;
      var sizeOfSourceInLca;
      var sizeOfTargetInLca;

      var allEdges = this.getGraphManager().getAllEdges();
      for (var i = 0; i < allEdges.length; i++) {
        edge = allEdges[i];

        originalIdealLength = edge.idealLength;

        if (edge.isInterGraph) {
          source = edge.getSource();
          target = edge.getTarget();

          sizeOfSourceInLca = edge.getSourceInLca().getEstimatedSize();
          sizeOfTargetInLca = edge.getTargetInLca().getEstimatedSize();

          if (this.useSmartIdealEdgeLengthCalculation) {
            edge.idealLength += sizeOfSourceInLca + sizeOfTargetInLca - 2 * LayoutConstants.SIMPLE_NODE_SIZE;
          }

          lcaDepth = edge.getLca().getInclusionTreeDepth();

          edge.idealLength += originalIdealLength * FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR * (source.getInclusionTreeDepth() + target.getInclusionTreeDepth() - 2 * lcaDepth);
        }
      }
    };

    FDLayout.prototype.initSpringEmbedder = function () {

      var s = this.getAllNodes().length;
      if (this.incremental) {
        if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {
          this.coolingFactor = Math.max(this.coolingFactor * FDLayoutConstants.COOLING_ADAPTATION_FACTOR, this.coolingFactor - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * this.coolingFactor * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));
        }
        this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL;
      } else {
        if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {
          this.coolingFactor = Math.max(FDLayoutConstants.COOLING_ADAPTATION_FACTOR, 1.0 - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));
        } else {
          this.coolingFactor = 1.0;
        }
        this.initialCoolingFactor = this.coolingFactor;
        this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT;
      }

      this.maxIterations = Math.max(this.getAllNodes().length * 5, this.maxIterations);

      // Reassign this attribute by using new constant value
      this.displacementThresholdPerNode = 3.0 * FDLayoutConstants.DEFAULT_EDGE_LENGTH / 100;
      this.totalDisplacementThreshold = this.displacementThresholdPerNode * this.getAllNodes().length;

      this.repulsionRange = this.calcRepulsionRange();
    };

    FDLayout.prototype.calcSpringForces = function () {
      var lEdges = this.getAllEdges();
      var edge;

      for (var i = 0; i < lEdges.length; i++) {
        edge = lEdges[i];

        this.calcSpringForce(edge, edge.idealLength);
      }
    };

    FDLayout.prototype.calcRepulsionForces = function () {
      var gridUpdateAllowed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var forceToNodeSurroundingUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var i, j;
      var nodeA, nodeB;
      var lNodes = this.getAllNodes();
      var processedNodeSet;

      if (this.useFRGridVariant) {
        if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed) {
          this.updateGrid();
        }

        processedNodeSet = new Set();

        // calculate repulsion forces between each nodes and its surrounding
        for (i = 0; i < lNodes.length; i++) {
          nodeA = lNodes[i];
          this.calculateRepulsionForceOfANode(nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate);
          processedNodeSet.add(nodeA);
        }
      } else {
        for (i = 0; i < lNodes.length; i++) {
          nodeA = lNodes[i];

          for (j = i + 1; j < lNodes.length; j++) {
            nodeB = lNodes[j];

            // If both nodes are not members of the same graph, skip.
            if (nodeA.getOwner() != nodeB.getOwner()) {
              continue;
            }

            this.calcRepulsionForce(nodeA, nodeB);
          }
        }
      }
    };

    FDLayout.prototype.calcGravitationalForces = function () {
      var node;
      var lNodes = this.getAllNodesToApplyGravitation();

      for (var i = 0; i < lNodes.length; i++) {
        node = lNodes[i];
        this.calcGravitationalForce(node);
      }
    };

    FDLayout.prototype.moveNodes = function () {
      var lNodes = this.getAllNodes();
      var node;

      for (var i = 0; i < lNodes.length; i++) {
        node = lNodes[i];
        node.move();
      }
    };

    FDLayout.prototype.calcSpringForce = function (edge, idealLength) {
      var sourceNode = edge.getSource();
      var targetNode = edge.getTarget();

      var length;
      var springForce;
      var springForceX;
      var springForceY;

      // Update edge length
      if (this.uniformLeafNodeSizes && sourceNode.getChild() == null && targetNode.getChild() == null) {
        edge.updateLengthSimple();
      } else {
        edge.updateLength();

        if (edge.isOverlapingSourceAndTarget) {
          return;
        }
      }

      length = edge.getLength();

      if (length == 0) return;

      // Calculate spring forces
      springForce = edge.edgeElasticity * (length - idealLength);

      // Project force onto x and y axes
      springForceX = springForce * (edge.lengthX / length);
      springForceY = springForce * (edge.lengthY / length);

      // Apply forces on the end nodes
      sourceNode.springForceX += springForceX;
      sourceNode.springForceY += springForceY;
      targetNode.springForceX -= springForceX;
      targetNode.springForceY -= springForceY;
    };

    FDLayout.prototype.calcRepulsionForce = function (nodeA, nodeB) {
      var rectA = nodeA.getRect();
      var rectB = nodeB.getRect();
      var overlapAmount = new Array(2);
      var clipPoints = new Array(4);
      var distanceX;
      var distanceY;
      var distanceSquared;
      var distance;
      var repulsionForce;
      var repulsionForceX;
      var repulsionForceY;

      if (rectA.intersects(rectB)) // two nodes overlap
        {
          // calculate separation amount in x and y directions
          IGeometry.calcSeparationAmount(rectA, rectB, overlapAmount, FDLayoutConstants.DEFAULT_EDGE_LENGTH / 2.0);

          repulsionForceX = 2 * overlapAmount[0];
          repulsionForceY = 2 * overlapAmount[1];

          var childrenConstant = nodeA.noOfChildren * nodeB.noOfChildren / (nodeA.noOfChildren + nodeB.noOfChildren);

          // Apply forces on the two nodes
          nodeA.repulsionForceX -= childrenConstant * repulsionForceX;
          nodeA.repulsionForceY -= childrenConstant * repulsionForceY;
          nodeB.repulsionForceX += childrenConstant * repulsionForceX;
          nodeB.repulsionForceY += childrenConstant * repulsionForceY;
        } else // no overlap
        {
          // calculate distance

          if (this.uniformLeafNodeSizes && nodeA.getChild() == null && nodeB.getChild() == null) // simply base repulsion on distance of node centers
            {
              distanceX = rectB.getCenterX() - rectA.getCenterX();
              distanceY = rectB.getCenterY() - rectA.getCenterY();
            } else // use clipping points
            {
              IGeometry.getIntersection(rectA, rectB, clipPoints);

              distanceX = clipPoints[2] - clipPoints[0];
              distanceY = clipPoints[3] - clipPoints[1];
            }

          // No repulsion range. FR grid variant should take care of this.
          if (Math.abs(distanceX) < FDLayoutConstants.MIN_REPULSION_DIST) {
            distanceX = IMath.sign(distanceX) * FDLayoutConstants.MIN_REPULSION_DIST;
          }

          if (Math.abs(distanceY) < FDLayoutConstants.MIN_REPULSION_DIST) {
            distanceY = IMath.sign(distanceY) * FDLayoutConstants.MIN_REPULSION_DIST;
          }

          distanceSquared = distanceX * distanceX + distanceY * distanceY;
          distance = Math.sqrt(distanceSquared);

          // Here we use half of the nodes' repulsion values for backward compatibility
          repulsionForce = (nodeA.nodeRepulsion / 2 + nodeB.nodeRepulsion / 2) * nodeA.noOfChildren * nodeB.noOfChildren / distanceSquared;

          // Project force onto x and y axes
          repulsionForceX = repulsionForce * distanceX / distance;
          repulsionForceY = repulsionForce * distanceY / distance;

          // Apply forces on the two nodes    
          nodeA.repulsionForceX -= repulsionForceX;
          nodeA.repulsionForceY -= repulsionForceY;
          nodeB.repulsionForceX += repulsionForceX;
          nodeB.repulsionForceY += repulsionForceY;
        }
    };

    FDLayout.prototype.calcGravitationalForce = function (node) {
      var ownerGraph;
      var ownerCenterX;
      var ownerCenterY;
      var distanceX;
      var distanceY;
      var absDistanceX;
      var absDistanceY;
      var estimatedSize;
      ownerGraph = node.getOwner();

      ownerCenterX = (ownerGraph.getRight() + ownerGraph.getLeft()) / 2;
      ownerCenterY = (ownerGraph.getTop() + ownerGraph.getBottom()) / 2;
      distanceX = node.getCenterX() - ownerCenterX;
      distanceY = node.getCenterY() - ownerCenterY;
      absDistanceX = Math.abs(distanceX) + node.getWidth() / 2;
      absDistanceY = Math.abs(distanceY) + node.getHeight() / 2;

      if (node.getOwner() == this.graphManager.getRoot()) // in the root graph
        {
          estimatedSize = ownerGraph.getEstimatedSize() * this.gravityRangeFactor;

          if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {
            node.gravitationForceX = -this.gravityConstant * distanceX;
            node.gravitationForceY = -this.gravityConstant * distanceY;
          }
        } else // inside a compound
        {
          estimatedSize = ownerGraph.getEstimatedSize() * this.compoundGravityRangeFactor;

          if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {
            node.gravitationForceX = -this.gravityConstant * distanceX * this.compoundGravityConstant;
            node.gravitationForceY = -this.gravityConstant * distanceY * this.compoundGravityConstant;
          }
        }
    };

    FDLayout.prototype.isConverged = function () {
      var converged;
      var oscilating = false;

      if (this.totalIterations > this.maxIterations / 3) {
        oscilating = Math.abs(this.totalDisplacement - this.oldTotalDisplacement) < 2;
      }

      converged = this.totalDisplacement < this.totalDisplacementThreshold;

      this.oldTotalDisplacement = this.totalDisplacement;

      return converged || oscilating;
    };

    FDLayout.prototype.animate = function () {
      if (this.animationDuringLayout && !this.isSubLayout) {
        if (this.notAnimatedIterations == this.animationPeriod) {
          this.update();
          this.notAnimatedIterations = 0;
        } else {
          this.notAnimatedIterations++;
        }
      }
    };

    //This method calculates the number of children (weight) for all nodes
    FDLayout.prototype.calcNoOfChildrenForAllNodes = function () {
      var node;
      var allNodes = this.graphManager.getAllNodes();

      for (var i = 0; i < allNodes.length; i++) {
        node = allNodes[i];
        node.noOfChildren = node.getNoOfChildren();
      }
    };

    // -----------------------------------------------------------------------------
    // Section: FR-Grid Variant Repulsion Force Calculation
    // -----------------------------------------------------------------------------

    FDLayout.prototype.calcGrid = function (graph) {

      var sizeX = 0;
      var sizeY = 0;

      sizeX = parseInt(Math.ceil((graph.getRight() - graph.getLeft()) / this.repulsionRange));
      sizeY = parseInt(Math.ceil((graph.getBottom() - graph.getTop()) / this.repulsionRange));

      var grid = new Array(sizeX);

      for (var i = 0; i < sizeX; i++) {
        grid[i] = new Array(sizeY);
      }

      for (var i = 0; i < sizeX; i++) {
        for (var j = 0; j < sizeY; j++) {
          grid[i][j] = new Array();
        }
      }

      return grid;
    };

    FDLayout.prototype.addNodeToGrid = function (v, left, top) {

      var startX = 0;
      var finishX = 0;
      var startY = 0;
      var finishY = 0;

      startX = parseInt(Math.floor((v.getRect().x - left) / this.repulsionRange));
      finishX = parseInt(Math.floor((v.getRect().width + v.getRect().x - left) / this.repulsionRange));
      startY = parseInt(Math.floor((v.getRect().y - top) / this.repulsionRange));
      finishY = parseInt(Math.floor((v.getRect().height + v.getRect().y - top) / this.repulsionRange));

      for (var i = startX; i <= finishX; i++) {
        for (var j = startY; j <= finishY; j++) {
          this.grid[i][j].push(v);
          v.setGridCoordinates(startX, finishX, startY, finishY);
        }
      }
    };

    FDLayout.prototype.updateGrid = function () {
      var i;
      var nodeA;
      var lNodes = this.getAllNodes();

      this.grid = this.calcGrid(this.graphManager.getRoot());

      // put all nodes to proper grid cells
      for (i = 0; i < lNodes.length; i++) {
        nodeA = lNodes[i];
        this.addNodeToGrid(nodeA, this.graphManager.getRoot().getLeft(), this.graphManager.getRoot().getTop());
      }
    };

    FDLayout.prototype.calculateRepulsionForceOfANode = function (nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate) {

      if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed || forceToNodeSurroundingUpdate) {
        var surrounding = new Set();
        nodeA.surrounding = new Array();
        var nodeB;
        var grid = this.grid;

        for (var i = nodeA.startX - 1; i < nodeA.finishX + 2; i++) {
          for (var j = nodeA.startY - 1; j < nodeA.finishY + 2; j++) {
            if (!(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length)) {
              for (var k = 0; k < grid[i][j].length; k++) {
                nodeB = grid[i][j][k];

                // If both nodes are not members of the same graph, 
                // or both nodes are the same, skip.
                if (nodeA.getOwner() != nodeB.getOwner() || nodeA == nodeB) {
                  continue;
                }

                // check if the repulsion force between
                // nodeA and nodeB has already been calculated
                if (!processedNodeSet.has(nodeB) && !surrounding.has(nodeB)) {
                  var distanceX = Math.abs(nodeA.getCenterX() - nodeB.getCenterX()) - (nodeA.getWidth() / 2 + nodeB.getWidth() / 2);
                  var distanceY = Math.abs(nodeA.getCenterY() - nodeB.getCenterY()) - (nodeA.getHeight() / 2 + nodeB.getHeight() / 2);

                  // if the distance between nodeA and nodeB 
                  // is less then calculation range
                  if (distanceX <= this.repulsionRange && distanceY <= this.repulsionRange) {
                    //then add nodeB to surrounding of nodeA
                    surrounding.add(nodeB);
                  }
                }
              }
            }
          }
        }

        nodeA.surrounding = [].concat(_toConsumableArray(surrounding));
      }
      for (i = 0; i < nodeA.surrounding.length; i++) {
        this.calcRepulsionForce(nodeA, nodeA.surrounding[i]);
      }
    };

    FDLayout.prototype.calcRepulsionRange = function () {
      return 0.0;
    };

    module.exports = FDLayout;

    /***/ }),
    /* 19 */
    /***/ (function(module, exports, __webpack_require__) {


    var LEdge = __webpack_require__(1);
    var FDLayoutConstants = __webpack_require__(4);

    function FDLayoutEdge(source, target, vEdge) {
      LEdge.call(this, source, target, vEdge);

      // Ideal length and elasticity value for this edge
      this.idealLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;
      this.edgeElasticity = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;
    }

    FDLayoutEdge.prototype = Object.create(LEdge.prototype);

    for (var prop in LEdge) {
      FDLayoutEdge[prop] = LEdge[prop];
    }

    module.exports = FDLayoutEdge;

    /***/ }),
    /* 20 */
    /***/ (function(module, exports, __webpack_require__) {


    var LNode = __webpack_require__(3);
    var FDLayoutConstants = __webpack_require__(4);

    function FDLayoutNode(gm, loc, size, vNode) {
      // alternative constructor is handled inside LNode
      LNode.call(this, gm, loc, size, vNode);

      // Repulsion value of this node
      this.nodeRepulsion = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;

      //Spring, repulsion and gravitational forces acting on this node
      this.springForceX = 0;
      this.springForceY = 0;
      this.repulsionForceX = 0;
      this.repulsionForceY = 0;
      this.gravitationForceX = 0;
      this.gravitationForceY = 0;
      //Amount by which this node is to be moved in this iteration
      this.displacementX = 0;
      this.displacementY = 0;

      //Start and finish grid coordinates that this node is fallen into
      this.startX = 0;
      this.finishX = 0;
      this.startY = 0;
      this.finishY = 0;

      //Geometric neighbors of this node
      this.surrounding = [];
    }

    FDLayoutNode.prototype = Object.create(LNode.prototype);

    for (var prop in LNode) {
      FDLayoutNode[prop] = LNode[prop];
    }

    FDLayoutNode.prototype.setGridCoordinates = function (_startX, _finishX, _startY, _finishY) {
      this.startX = _startX;
      this.finishX = _finishX;
      this.startY = _startY;
      this.finishY = _finishY;
    };

    module.exports = FDLayoutNode;

    /***/ }),
    /* 21 */
    /***/ (function(module, exports, __webpack_require__) {


    function DimensionD(width, height) {
      this.width = 0;
      this.height = 0;
      if (width !== null && height !== null) {
        this.height = height;
        this.width = width;
      }
    }

    DimensionD.prototype.getWidth = function () {
      return this.width;
    };

    DimensionD.prototype.setWidth = function (width) {
      this.width = width;
    };

    DimensionD.prototype.getHeight = function () {
      return this.height;
    };

    DimensionD.prototype.setHeight = function (height) {
      this.height = height;
    };

    module.exports = DimensionD;

    /***/ }),
    /* 22 */
    /***/ (function(module, exports, __webpack_require__) {


    var UniqueIDGeneretor = __webpack_require__(14);

    function HashMap() {
      this.map = {};
      this.keys = [];
    }

    HashMap.prototype.put = function (key, value) {
      var theId = UniqueIDGeneretor.createID(key);
      if (!this.contains(theId)) {
        this.map[theId] = value;
        this.keys.push(key);
      }
    };

    HashMap.prototype.contains = function (key) {
      UniqueIDGeneretor.createID(key);
      return this.map[key] != null;
    };

    HashMap.prototype.get = function (key) {
      var theId = UniqueIDGeneretor.createID(key);
      return this.map[theId];
    };

    HashMap.prototype.keySet = function () {
      return this.keys;
    };

    module.exports = HashMap;

    /***/ }),
    /* 23 */
    /***/ (function(module, exports, __webpack_require__) {


    var UniqueIDGeneretor = __webpack_require__(14);

    function HashSet() {
      this.set = {};
    }

    HashSet.prototype.add = function (obj) {
      var theId = UniqueIDGeneretor.createID(obj);
      if (!this.contains(theId)) this.set[theId] = obj;
    };

    HashSet.prototype.remove = function (obj) {
      delete this.set[UniqueIDGeneretor.createID(obj)];
    };

    HashSet.prototype.clear = function () {
      this.set = {};
    };

    HashSet.prototype.contains = function (obj) {
      return this.set[UniqueIDGeneretor.createID(obj)] == obj;
    };

    HashSet.prototype.isEmpty = function () {
      return this.size() === 0;
    };

    HashSet.prototype.size = function () {
      return Object.keys(this.set).length;
    };

    //concats this.set to the given list
    HashSet.prototype.addAllTo = function (list) {
      var keys = Object.keys(this.set);
      var length = keys.length;
      for (var i = 0; i < length; i++) {
        list.push(this.set[keys[i]]);
      }
    };

    HashSet.prototype.size = function () {
      return Object.keys(this.set).length;
    };

    HashSet.prototype.addAll = function (list) {
      var s = list.length;
      for (var i = 0; i < s; i++) {
        var v = list[i];
        this.add(v);
      }
    };

    module.exports = HashSet;

    /***/ }),
    /* 24 */
    /***/ (function(module, exports, __webpack_require__) {


    // Some matrix (1d and 2d array) operations
    function Matrix() {}

    /**
     * matrix multiplication
     * array1, array2 and result are 2d arrays
     */
    Matrix.multMat = function (array1, array2) {
      var result = [];

      for (var i = 0; i < array1.length; i++) {
        result[i] = [];
        for (var j = 0; j < array2[0].length; j++) {
          result[i][j] = 0;
          for (var k = 0; k < array1[0].length; k++) {
            result[i][j] += array1[i][k] * array2[k][j];
          }
        }
      }
      return result;
    };

    /**
     * matrix transpose
     * array and result are 2d arrays
     */
    Matrix.transpose = function (array) {
      var result = [];

      for (var i = 0; i < array[0].length; i++) {
        result[i] = [];
        for (var j = 0; j < array.length; j++) {
          result[i][j] = array[j][i];
        }
      }

      return result;
    };

    /**
     * multiply array with constant
     * array and result are 1d arrays
     */
    Matrix.multCons = function (array, constant) {
      var result = [];

      for (var i = 0; i < array.length; i++) {
        result[i] = array[i] * constant;
      }

      return result;
    };

    /**
     * substract two arrays
     * array1, array2 and result are 1d arrays
     */
    Matrix.minusOp = function (array1, array2) {
      var result = [];

      for (var i = 0; i < array1.length; i++) {
        result[i] = array1[i] - array2[i];
      }

      return result;
    };

    /**
     * dot product of two arrays with same size
     * array1 and array2 are 1d arrays
     */
    Matrix.dotProduct = function (array1, array2) {
      var product = 0;

      for (var i = 0; i < array1.length; i++) {
        product += array1[i] * array2[i];
      }

      return product;
    };

    /**
     * magnitude of an array
     * array is 1d array
     */
    Matrix.mag = function (array) {
      return Math.sqrt(this.dotProduct(array, array));
    };

    /**
     * normalization of an array
     * array and result are 1d array
     */
    Matrix.normalize = function (array) {
      var result = [];
      var magnitude = this.mag(array);

      for (var i = 0; i < array.length; i++) {
        result[i] = array[i] / magnitude;
      }

      return result;
    };

    /**
     * multiply an array with centering matrix
     * array and result are 1d array
     */
    Matrix.multGamma = function (array) {
      var result = [];
      var sum = 0;

      for (var i = 0; i < array.length; i++) {
        sum += array[i];
      }

      sum *= -1 / array.length;

      for (var _i = 0; _i < array.length; _i++) {
        result[_i] = sum + array[_i];
      }
      return result;
    };

    /**
     * a special matrix multiplication
     * result = 0.5 * C * INV * C^T * array
     * array and result are 1d, C and INV are 2d arrays
     */
    Matrix.multL = function (array, C, INV) {
      var result = [];
      var temp1 = [];
      var temp2 = [];

      // multiply by C^T
      for (var i = 0; i < C[0].length; i++) {
        var sum = 0;
        for (var j = 0; j < C.length; j++) {
          sum += -0.5 * C[j][i] * array[j];
        }
        temp1[i] = sum;
      }
      // multiply the result by INV
      for (var _i2 = 0; _i2 < INV.length; _i2++) {
        var _sum = 0;
        for (var _j = 0; _j < INV.length; _j++) {
          _sum += INV[_i2][_j] * temp1[_j];
        }
        temp2[_i2] = _sum;
      }
      // multiply the result by C
      for (var _i3 = 0; _i3 < C.length; _i3++) {
        var _sum2 = 0;
        for (var _j2 = 0; _j2 < C[0].length; _j2++) {
          _sum2 += C[_i3][_j2] * temp2[_j2];
        }
        result[_i3] = _sum2;
      }

      return result;
    };

    module.exports = Matrix;

    /***/ }),
    /* 25 */
    /***/ (function(module, exports, __webpack_require__) {


    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    /**
     * A classic Quicksort algorithm with Hoare's partition
     * - Works also on LinkedList objects
     *
     * Copyright: i-Vis Research Group, Bilkent University, 2007 - present
     */

    var LinkedList = __webpack_require__(11);

    var Quicksort = function () {
        function Quicksort(A, compareFunction) {
            _classCallCheck(this, Quicksort);

            if (compareFunction !== null || compareFunction !== undefined) this.compareFunction = this._defaultCompareFunction;

            var length = void 0;
            if (A instanceof LinkedList) length = A.size();else length = A.length;

            this._quicksort(A, 0, length - 1);
        }

        _createClass(Quicksort, [{
            key: '_quicksort',
            value: function _quicksort(A, p, r) {
                if (p < r) {
                    var q = this._partition(A, p, r);
                    this._quicksort(A, p, q);
                    this._quicksort(A, q + 1, r);
                }
            }
        }, {
            key: '_partition',
            value: function _partition(A, p, r) {
                var x = this._get(A, p);
                var i = p;
                var j = r;
                while (true) {
                    while (this.compareFunction(x, this._get(A, j))) {
                        j--;
                    }while (this.compareFunction(this._get(A, i), x)) {
                        i++;
                    }if (i < j) {
                        this._swap(A, i, j);
                        i++;
                        j--;
                    } else return j;
                }
            }
        }, {
            key: '_get',
            value: function _get(object, index) {
                if (object instanceof LinkedList) return object.get_object_at(index);else return object[index];
            }
        }, {
            key: '_set',
            value: function _set(object, index, value) {
                if (object instanceof LinkedList) object.set_object_at(index, value);else object[index] = value;
            }
        }, {
            key: '_swap',
            value: function _swap(A, i, j) {
                var temp = this._get(A, i);
                this._set(A, i, this._get(A, j));
                this._set(A, j, temp);
            }
        }, {
            key: '_defaultCompareFunction',
            value: function _defaultCompareFunction(a, b) {
                return b > a;
            }
        }]);

        return Quicksort;
    }();

    module.exports = Quicksort;

    /***/ }),
    /* 26 */
    /***/ (function(module, exports, __webpack_require__) {


    // Singular Value Decomposition implementation
    function SVD() {}
    /* Below singular value decomposition (svd) code including hypot function is adopted from https://github.com/dragonfly-ai/JamaJS
       Some changes are applied to make the code compatible with the fcose code and to make it independent from Jama.
       Input matrix is changed to a 2D array instead of Jama matrix. Matrix dimensions are taken according to 2D array instead of using Jama functions.
       An object that includes singular value components is created for return. 
       The types of input parameters of the hypot function are removed. 
       let is used instead of var for the variable initialization.
    */
    /*
                                   Apache License
                               Version 2.0, January 2004
                            http://www.apache.org/licenses/

       TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

       1. Definitions.

          "License" shall mean the terms and conditions for use, reproduction,
          and distribution as defined by Sections 1 through 9 of this document.

          "Licensor" shall mean the copyright owner or entity authorized by
          the copyright owner that is granting the License.

          "Legal Entity" shall mean the union of the acting entity and all
          other entities that control, are controlled by, or are under common
          control with that entity. For the purposes of this definition,
          "control" means (i) the power, direct or indirect, to cause the
          direction or management of such entity, whether by contract or
          otherwise, or (ii) ownership of fifty percent (50%) or more of the
          outstanding shares, or (iii) beneficial ownership of such entity.

          "You" (or "Your") shall mean an individual or Legal Entity
          exercising permissions granted by this License.

          "Source" form shall mean the preferred form for making modifications,
          including but not limited to software source code, documentation
          source, and configuration files.

          "Object" form shall mean any form resulting from mechanical
          transformation or translation of a Source form, including but
          not limited to compiled object code, generated documentation,
          and conversions to other media types.

          "Work" shall mean the work of authorship, whether in Source or
          Object form, made available under the License, as indicated by a
          copyright notice that is included in or attached to the work
          (an example is provided in the Appendix below).

          "Derivative Works" shall mean any work, whether in Source or Object
          form, that is based on (or derived from) the Work and for which the
          editorial revisions, annotations, elaborations, or other modifications
          represent, as a whole, an original work of authorship. For the purposes
          of this License, Derivative Works shall not include works that remain
          separable from, or merely link (or bind by name) to the interfaces of,
          the Work and Derivative Works thereof.

          "Contribution" shall mean any work of authorship, including
          the original version of the Work and any modifications or additions
          to that Work or Derivative Works thereof, that is intentionally
          submitted to Licensor for inclusion in the Work by the copyright owner
          or by an individual or Legal Entity authorized to submit on behalf of
          the copyright owner. For the purposes of this definition, "submitted"
          means any form of electronic, verbal, or written communication sent
          to the Licensor or its representatives, including but not limited to
          communication on electronic mailing lists, source code control systems,
          and issue tracking systems that are managed by, or on behalf of, the
          Licensor for the purpose of discussing and improving the Work, but
          excluding communication that is conspicuously marked or otherwise
          designated in writing by the copyright owner as "Not a Contribution."

          "Contributor" shall mean Licensor and any individual or Legal Entity
          on behalf of whom a Contribution has been received by Licensor and
          subsequently incorporated within the Work.

       2. Grant of Copyright License. Subject to the terms and conditions of
          this License, each Contributor hereby grants to You a perpetual,
          worldwide, non-exclusive, no-charge, royalty-free, irrevocable
          copyright license to reproduce, prepare Derivative Works of,
          publicly display, publicly perform, sublicense, and distribute the
          Work and such Derivative Works in Source or Object form.

       3. Grant of Patent License. Subject to the terms and conditions of
          this License, each Contributor hereby grants to You a perpetual,
          worldwide, non-exclusive, no-charge, royalty-free, irrevocable
          (except as stated in this section) patent license to make, have made,
          use, offer to sell, sell, import, and otherwise transfer the Work,
          where such license applies only to those patent claims licensable
          by such Contributor that are necessarily infringed by their
          Contribution(s) alone or by combination of their Contribution(s)
          with the Work to which such Contribution(s) was submitted. If You
          institute patent litigation against any entity (including a
          cross-claim or counterclaim in a lawsuit) alleging that the Work
          or a Contribution incorporated within the Work constitutes direct
          or contributory patent infringement, then any patent licenses
          granted to You under this License for that Work shall terminate
          as of the date such litigation is filed.

       4. Redistribution. You may reproduce and distribute copies of the
          Work or Derivative Works thereof in any medium, with or without
          modifications, and in Source or Object form, provided that You
          meet the following conditions:

          (a) You must give any other recipients of the Work or
              Derivative Works a copy of this License; and

          (b) You must cause any modified files to carry prominent notices
              stating that You changed the files; and

          (c) You must retain, in the Source form of any Derivative Works
              that You distribute, all copyright, patent, trademark, and
              attribution notices from the Source form of the Work,
              excluding those notices that do not pertain to any part of
              the Derivative Works; and

          (d) If the Work includes a "NOTICE" text file as part of its
              distribution, then any Derivative Works that You distribute must
              include a readable copy of the attribution notices contained
              within such NOTICE file, excluding those notices that do not
              pertain to any part of the Derivative Works, in at least one
              of the following places: within a NOTICE text file distributed
              as part of the Derivative Works; within the Source form or
              documentation, if provided along with the Derivative Works; or,
              within a display generated by the Derivative Works, if and
              wherever such third-party notices normally appear. The contents
              of the NOTICE file are for informational purposes only and
              do not modify the License. You may add Your own attribution
              notices within Derivative Works that You distribute, alongside
              or as an addendum to the NOTICE text from the Work, provided
              that such additional attribution notices cannot be construed
              as modifying the License.

          You may add Your own copyright statement to Your modifications and
          may provide additional or different license terms and conditions
          for use, reproduction, or distribution of Your modifications, or
          for any such Derivative Works as a whole, provided Your use,
          reproduction, and distribution of the Work otherwise complies with
          the conditions stated in this License.

       5. Submission of Contributions. Unless You explicitly state otherwise,
          any Contribution intentionally submitted for inclusion in the Work
          by You to the Licensor shall be under the terms and conditions of
          this License, without any additional terms or conditions.
          Notwithstanding the above, nothing herein shall supersede or modify
          the terms of any separate license agreement you may have executed
          with Licensor regarding such Contributions.

       6. Trademarks. This License does not grant permission to use the trade
          names, trademarks, service marks, or product names of the Licensor,
          except as required for reasonable and customary use in describing the
          origin of the Work and reproducing the content of the NOTICE file.

       7. Disclaimer of Warranty. Unless required by applicable law or
          agreed to in writing, Licensor provides the Work (and each
          Contributor provides its Contributions) on an "AS IS" BASIS,
          WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
          implied, including, without limitation, any warranties or conditions
          of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
          PARTICULAR PURPOSE. You are solely responsible for determining the
          appropriateness of using or redistributing the Work and assume any
          risks associated with Your exercise of permissions under this License.

       8. Limitation of Liability. In no event and under no legal theory,
          whether in tort (including negligence), contract, or otherwise,
          unless required by applicable law (such as deliberate and grossly
          negligent acts) or agreed to in writing, shall any Contributor be
          liable to You for damages, including any direct, indirect, special,
          incidental, or consequential damages of any character arising as a
          result of this License or out of the use or inability to use the
          Work (including but not limited to damages for loss of goodwill,
          work stoppage, computer failure or malfunction, or any and all
          other commercial damages or losses), even if such Contributor
          has been advised of the possibility of such damages.

       9. Accepting Warranty or Additional Liability. While redistributing
          the Work or Derivative Works thereof, You may choose to offer,
          and charge a fee for, acceptance of support, warranty, indemnity,
          or other liability obligations and/or rights consistent with this
          License. However, in accepting such obligations, You may act only
          on Your own behalf and on Your sole responsibility, not on behalf
          of any other Contributor, and only if You agree to indemnify,
          defend, and hold each Contributor harmless for any liability
          incurred by, or claims asserted against, such Contributor by reason
          of your accepting any such warranty or additional liability.

       END OF TERMS AND CONDITIONS

       APPENDIX: How to apply the Apache License to your work.

          To apply the Apache License to your work, attach the following
          boilerplate notice, with the fields enclosed by brackets "{}"
          replaced with your own identifying information. (Don't include
          the brackets!)  The text should be enclosed in the appropriate
          comment syntax for the file format. We also recommend that a
          file or class name and description of purpose be included on the
          same "printed page" as the copyright notice for easier
          identification within third-party archives.

       Copyright {yyyy} {name of copyright owner}

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

           http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.
    */

    SVD.svd = function (A) {
      this.U = null;
      this.V = null;
      this.s = null;
      this.m = 0;
      this.n = 0;
      this.m = A.length;
      this.n = A[0].length;
      var nu = Math.min(this.m, this.n);
      this.s = function (s) {
        var a = [];
        while (s-- > 0) {
          a.push(0);
        }return a;
      }(Math.min(this.m + 1, this.n));
      this.U = function (dims) {
        var allocate = function allocate(dims) {
          if (dims.length == 0) {
            return 0;
          } else {
            var array = [];
            for (var i = 0; i < dims[0]; i++) {
              array.push(allocate(dims.slice(1)));
            }
            return array;
          }
        };
        return allocate(dims);
      }([this.m, nu]);
      this.V = function (dims) {
        var allocate = function allocate(dims) {
          if (dims.length == 0) {
            return 0;
          } else {
            var array = [];
            for (var i = 0; i < dims[0]; i++) {
              array.push(allocate(dims.slice(1)));
            }
            return array;
          }
        };
        return allocate(dims);
      }([this.n, this.n]);
      var e = function (s) {
        var a = [];
        while (s-- > 0) {
          a.push(0);
        }return a;
      }(this.n);
      var work = function (s) {
        var a = [];
        while (s-- > 0) {
          a.push(0);
        }return a;
      }(this.m);
      var wantu = true;
      var nct = Math.min(this.m - 1, this.n);
      var nrt = Math.max(0, Math.min(this.n - 2, this.m));
      for (var k = 0; k < Math.max(nct, nrt); k++) {
        if (k < nct) {
          this.s[k] = 0;
          for (var i = k; i < this.m; i++) {
            this.s[k] = SVD.hypot(this.s[k], A[i][k]);
          }
          if (this.s[k] !== 0.0) {
            if (A[k][k] < 0.0) {
              this.s[k] = -this.s[k];
            }
            for (var _i = k; _i < this.m; _i++) {
              A[_i][k] /= this.s[k];
            }
            A[k][k] += 1.0;
          }
          this.s[k] = -this.s[k];
        }
        for (var j = k + 1; j < this.n; j++) {
          if (function (lhs, rhs) {
            return lhs && rhs;
          }(k < nct, this.s[k] !== 0.0)) {
            var t = 0;
            for (var _i2 = k; _i2 < this.m; _i2++) {
              t += A[_i2][k] * A[_i2][j];
            }
            t = -t / A[k][k];
            for (var _i3 = k; _i3 < this.m; _i3++) {
              A[_i3][j] += t * A[_i3][k];
            }
          }
          e[j] = A[k][j];
        }
        if (function (lhs, rhs) {
          return lhs && rhs;
        }(wantu, k < nct)) {
          for (var _i4 = k; _i4 < this.m; _i4++) {
            this.U[_i4][k] = A[_i4][k];
          }
        }
        if (k < nrt) {
          e[k] = 0;
          for (var _i5 = k + 1; _i5 < this.n; _i5++) {
            e[k] = SVD.hypot(e[k], e[_i5]);
          }
          if (e[k] !== 0.0) {
            if (e[k + 1] < 0.0) {
              e[k] = -e[k];
            }
            for (var _i6 = k + 1; _i6 < this.n; _i6++) {
              e[_i6] /= e[k];
            }
            e[k + 1] += 1.0;
          }
          e[k] = -e[k];
          if (function (lhs, rhs) {
            return lhs && rhs;
          }(k + 1 < this.m, e[k] !== 0.0)) {
            for (var _i7 = k + 1; _i7 < this.m; _i7++) {
              work[_i7] = 0.0;
            }
            for (var _j = k + 1; _j < this.n; _j++) {
              for (var _i8 = k + 1; _i8 < this.m; _i8++) {
                work[_i8] += e[_j] * A[_i8][_j];
              }
            }
            for (var _j2 = k + 1; _j2 < this.n; _j2++) {
              var _t = -e[_j2] / e[k + 1];
              for (var _i9 = k + 1; _i9 < this.m; _i9++) {
                A[_i9][_j2] += _t * work[_i9];
              }
            }
          }
          {
            for (var _i10 = k + 1; _i10 < this.n; _i10++) {
              this.V[_i10][k] = e[_i10];
            }      }
        }
      }  var p = Math.min(this.n, this.m + 1);
      if (nct < this.n) {
        this.s[nct] = A[nct][nct];
      }
      if (this.m < p) {
        this.s[p - 1] = 0.0;
      }
      if (nrt + 1 < p) {
        e[nrt] = A[nrt][p - 1];
      }
      e[p - 1] = 0.0;
      {
        for (var _j3 = nct; _j3 < nu; _j3++) {
          for (var _i11 = 0; _i11 < this.m; _i11++) {
            this.U[_i11][_j3] = 0.0;
          }
          this.U[_j3][_j3] = 1.0;
        }    for (var _k = nct - 1; _k >= 0; _k--) {
          if (this.s[_k] !== 0.0) {
            for (var _j4 = _k + 1; _j4 < nu; _j4++) {
              var _t2 = 0;
              for (var _i12 = _k; _i12 < this.m; _i12++) {
                _t2 += this.U[_i12][_k] * this.U[_i12][_j4];
              }          _t2 = -_t2 / this.U[_k][_k];
              for (var _i13 = _k; _i13 < this.m; _i13++) {
                this.U[_i13][_j4] += _t2 * this.U[_i13][_k];
              }        }        for (var _i14 = _k; _i14 < this.m; _i14++) {
              this.U[_i14][_k] = -this.U[_i14][_k];
            }        this.U[_k][_k] = 1.0 + this.U[_k][_k];
            for (var _i15 = 0; _i15 < _k - 1; _i15++) {
              this.U[_i15][_k] = 0.0;
            }      } else {
            for (var _i16 = 0; _i16 < this.m; _i16++) {
              this.U[_i16][_k] = 0.0;
            }        this.U[_k][_k] = 1.0;
          }
        }  }
      {
        for (var _k2 = this.n - 1; _k2 >= 0; _k2--) {
          if (function (lhs, rhs) {
            return lhs && rhs;
          }(_k2 < nrt, e[_k2] !== 0.0)) {
            for (var _j5 = _k2 + 1; _j5 < nu; _j5++) {
              var _t3 = 0;
              for (var _i17 = _k2 + 1; _i17 < this.n; _i17++) {
                _t3 += this.V[_i17][_k2] * this.V[_i17][_j5];
              }          _t3 = -_t3 / this.V[_k2 + 1][_k2];
              for (var _i18 = _k2 + 1; _i18 < this.n; _i18++) {
                this.V[_i18][_j5] += _t3 * this.V[_i18][_k2];
              }        }      }
          for (var _i19 = 0; _i19 < this.n; _i19++) {
            this.V[_i19][_k2] = 0.0;
          }      this.V[_k2][_k2] = 1.0;
        }  }
      var pp = p - 1;
      var eps = Math.pow(2.0, -52.0);
      var tiny = Math.pow(2.0, -966.0);
      while (p > 0) {
        var _k3 = void 0;
        var kase = void 0;
        for (_k3 = p - 2; _k3 >= -1; _k3--) {
          if (_k3 === -1) {
            break;
          }
          if (Math.abs(e[_k3]) <= tiny + eps * (Math.abs(this.s[_k3]) + Math.abs(this.s[_k3 + 1]))) {
            e[_k3] = 0.0;
            break;
          }
        }    if (_k3 === p - 2) {
          kase = 4;
        } else {
          var ks = void 0;
          for (ks = p - 1; ks >= _k3; ks--) {
            if (ks === _k3) {
              break;
            }
            var _t4 = (ks !== p ? Math.abs(e[ks]) : 0.0) + (ks !== _k3 + 1 ? Math.abs(e[ks - 1]) : 0.0);
            if (Math.abs(this.s[ks]) <= tiny + eps * _t4) {
              this.s[ks] = 0.0;
              break;
            }
          }      if (ks === _k3) {
            kase = 3;
          } else if (ks === p - 1) {
            kase = 1;
          } else {
            kase = 2;
            _k3 = ks;
          }
        }
        _k3++;
        switch (kase) {
          case 1:
            {
              var f = e[p - 2];
              e[p - 2] = 0.0;
              for (var _j6 = p - 2; _j6 >= _k3; _j6--) {
                var _t5 = SVD.hypot(this.s[_j6], f);
                var cs = this.s[_j6] / _t5;
                var sn = f / _t5;
                this.s[_j6] = _t5;
                if (_j6 !== _k3) {
                  f = -sn * e[_j6 - 1];
                  e[_j6 - 1] = cs * e[_j6 - 1];
                }
                {
                  for (var _i20 = 0; _i20 < this.n; _i20++) {
                    _t5 = cs * this.V[_i20][_j6] + sn * this.V[_i20][p - 1];
                    this.V[_i20][p - 1] = -sn * this.V[_i20][_j6] + cs * this.V[_i20][p - 1];
                    this.V[_i20][_j6] = _t5;
                  }            }
              }        }        break;
          case 2:
            {
              var _f = e[_k3 - 1];
              e[_k3 - 1] = 0.0;
              for (var _j7 = _k3; _j7 < p; _j7++) {
                var _t6 = SVD.hypot(this.s[_j7], _f);
                var _cs = this.s[_j7] / _t6;
                var _sn = _f / _t6;
                this.s[_j7] = _t6;
                _f = -_sn * e[_j7];
                e[_j7] = _cs * e[_j7];
                {
                  for (var _i21 = 0; _i21 < this.m; _i21++) {
                    _t6 = _cs * this.U[_i21][_j7] + _sn * this.U[_i21][_k3 - 1];
                    this.U[_i21][_k3 - 1] = -_sn * this.U[_i21][_j7] + _cs * this.U[_i21][_k3 - 1];
                    this.U[_i21][_j7] = _t6;
                  }            }
              }        }        break;
          case 3:
            {
              var scale = Math.max(Math.max(Math.max(Math.max(Math.abs(this.s[p - 1]), Math.abs(this.s[p - 2])), Math.abs(e[p - 2])), Math.abs(this.s[_k3])), Math.abs(e[_k3]));
              var sp = this.s[p - 1] / scale;
              var spm1 = this.s[p - 2] / scale;
              var epm1 = e[p - 2] / scale;
              var sk = this.s[_k3] / scale;
              var ek = e[_k3] / scale;
              var b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2.0;
              var c = sp * epm1 * (sp * epm1);
              var shift = 0.0;
              if (function (lhs, rhs) {
                return lhs || rhs;
              }(b !== 0.0, c !== 0.0)) {
                shift = Math.sqrt(b * b + c);
                if (b < 0.0) {
                  shift = -shift;
                }
                shift = c / (b + shift);
              }
              var _f2 = (sk + sp) * (sk - sp) + shift;
              var g = sk * ek;
              for (var _j8 = _k3; _j8 < p - 1; _j8++) {
                var _t7 = SVD.hypot(_f2, g);
                var _cs2 = _f2 / _t7;
                var _sn2 = g / _t7;
                if (_j8 !== _k3) {
                  e[_j8 - 1] = _t7;
                }
                _f2 = _cs2 * this.s[_j8] + _sn2 * e[_j8];
                e[_j8] = _cs2 * e[_j8] - _sn2 * this.s[_j8];
                g = _sn2 * this.s[_j8 + 1];
                this.s[_j8 + 1] = _cs2 * this.s[_j8 + 1];
                {
                  for (var _i22 = 0; _i22 < this.n; _i22++) {
                    _t7 = _cs2 * this.V[_i22][_j8] + _sn2 * this.V[_i22][_j8 + 1];
                    this.V[_i22][_j8 + 1] = -_sn2 * this.V[_i22][_j8] + _cs2 * this.V[_i22][_j8 + 1];
                    this.V[_i22][_j8] = _t7;
                  }            }
                _t7 = SVD.hypot(_f2, g);
                _cs2 = _f2 / _t7;
                _sn2 = g / _t7;
                this.s[_j8] = _t7;
                _f2 = _cs2 * e[_j8] + _sn2 * this.s[_j8 + 1];
                this.s[_j8 + 1] = -_sn2 * e[_j8] + _cs2 * this.s[_j8 + 1];
                g = _sn2 * e[_j8 + 1];
                e[_j8 + 1] = _cs2 * e[_j8 + 1];
                if (_j8 < this.m - 1) {
                  for (var _i23 = 0; _i23 < this.m; _i23++) {
                    _t7 = _cs2 * this.U[_i23][_j8] + _sn2 * this.U[_i23][_j8 + 1];
                    this.U[_i23][_j8 + 1] = -_sn2 * this.U[_i23][_j8] + _cs2 * this.U[_i23][_j8 + 1];
                    this.U[_i23][_j8] = _t7;
                  }            }
              }          e[p - 2] = _f2;
            }        break;
          case 4:
            {
              if (this.s[_k3] <= 0.0) {
                this.s[_k3] = this.s[_k3] < 0.0 ? -this.s[_k3] : 0.0;
                {
                  for (var _i24 = 0; _i24 <= pp; _i24++) {
                    this.V[_i24][_k3] = -this.V[_i24][_k3];
                  }            }
              }
              while (_k3 < pp) {
                if (this.s[_k3] >= this.s[_k3 + 1]) {
                  break;
                }
                var _t8 = this.s[_k3];
                this.s[_k3] = this.s[_k3 + 1];
                this.s[_k3 + 1] = _t8;
                if (_k3 < this.n - 1) {
                  for (var _i25 = 0; _i25 < this.n; _i25++) {
                    _t8 = this.V[_i25][_k3 + 1];
                    this.V[_i25][_k3 + 1] = this.V[_i25][_k3];
                    this.V[_i25][_k3] = _t8;
                  }            }
                if (_k3 < this.m - 1) {
                  for (var _i26 = 0; _i26 < this.m; _i26++) {
                    _t8 = this.U[_i26][_k3 + 1];
                    this.U[_i26][_k3 + 1] = this.U[_i26][_k3];
                    this.U[_i26][_k3] = _t8;
                  }            }
                _k3++;
              }          p--;
            }        break;
        }
      }  var result = { U: this.U, V: this.V, S: this.s };
      return result;
    };

    // sqrt(a^2 + b^2) without under/overflow.
    SVD.hypot = function (a, b) {
      var r = void 0;
      if (Math.abs(a) > Math.abs(b)) {
        r = b / a;
        r = Math.abs(a) * Math.sqrt(1 + r * r);
      } else if (b != 0) {
        r = a / b;
        r = Math.abs(b) * Math.sqrt(1 + r * r);
      } else {
        r = 0.0;
      }
      return r;
    };

    module.exports = SVD;

    /***/ }),
    /* 27 */
    /***/ (function(module, exports, __webpack_require__) {


    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    /**
     *   Needleman-Wunsch algorithm is an procedure to compute the optimal global alignment of two string
     *   sequences by S.B.Needleman and C.D.Wunsch (1970).
     *
     *   Aside from the inputs, you can assign the scores for,
     *   - Match: The two characters at the current index are same.
     *   - Mismatch: The two characters at the current index are different.
     *   - Insertion/Deletion(gaps): The best alignment involves one letter aligning to a gap in the other string.
     */

    var NeedlemanWunsch = function () {
        function NeedlemanWunsch(sequence1, sequence2) {
            var match_score = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
            var mismatch_penalty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
            var gap_penalty = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;

            _classCallCheck(this, NeedlemanWunsch);

            this.sequence1 = sequence1;
            this.sequence2 = sequence2;
            this.match_score = match_score;
            this.mismatch_penalty = mismatch_penalty;
            this.gap_penalty = gap_penalty;

            // Just the remove redundancy
            this.iMax = sequence1.length + 1;
            this.jMax = sequence2.length + 1;

            // Grid matrix of scores
            this.grid = new Array(this.iMax);
            for (var i = 0; i < this.iMax; i++) {
                this.grid[i] = new Array(this.jMax);

                for (var j = 0; j < this.jMax; j++) {
                    this.grid[i][j] = 0;
                }
            }

            // Traceback matrix (2D array, each cell is an array of boolean values for [`Diag`, `Up`, `Left`] positions)
            this.tracebackGrid = new Array(this.iMax);
            for (var _i = 0; _i < this.iMax; _i++) {
                this.tracebackGrid[_i] = new Array(this.jMax);

                for (var _j = 0; _j < this.jMax; _j++) {
                    this.tracebackGrid[_i][_j] = [null, null, null];
                }
            }

            // The aligned sequences (return multiple possibilities)
            this.alignments = [];

            // Final alignment score
            this.score = -1;

            // Calculate scores and tracebacks
            this.computeGrids();
        }

        _createClass(NeedlemanWunsch, [{
            key: "getScore",
            value: function getScore() {
                return this.score;
            }
        }, {
            key: "getAlignments",
            value: function getAlignments() {
                return this.alignments;
            }

            // Main dynamic programming procedure

        }, {
            key: "computeGrids",
            value: function computeGrids() {
                // Fill in the first row
                for (var j = 1; j < this.jMax; j++) {
                    this.grid[0][j] = this.grid[0][j - 1] + this.gap_penalty;
                    this.tracebackGrid[0][j] = [false, false, true];
                }

                // Fill in the first column
                for (var i = 1; i < this.iMax; i++) {
                    this.grid[i][0] = this.grid[i - 1][0] + this.gap_penalty;
                    this.tracebackGrid[i][0] = [false, true, false];
                }

                // Fill the rest of the grid
                for (var _i2 = 1; _i2 < this.iMax; _i2++) {
                    for (var _j2 = 1; _j2 < this.jMax; _j2++) {
                        // Find the max score(s) among [`Diag`, `Up`, `Left`]
                        var diag = void 0;
                        if (this.sequence1[_i2 - 1] === this.sequence2[_j2 - 1]) diag = this.grid[_i2 - 1][_j2 - 1] + this.match_score;else diag = this.grid[_i2 - 1][_j2 - 1] + this.mismatch_penalty;

                        var up = this.grid[_i2 - 1][_j2] + this.gap_penalty;
                        var left = this.grid[_i2][_j2 - 1] + this.gap_penalty;

                        // If there exists multiple max values, capture them for multiple paths
                        var maxOf = [diag, up, left];
                        var indices = this.arrayAllMaxIndexes(maxOf);

                        // Update Grids
                        this.grid[_i2][_j2] = maxOf[indices[0]];
                        this.tracebackGrid[_i2][_j2] = [indices.includes(0), indices.includes(1), indices.includes(2)];
                    }
                }

                // Update alignment score
                this.score = this.grid[this.iMax - 1][this.jMax - 1];
            }

            // Gets all possible valid sequence combinations

        }, {
            key: "alignmentTraceback",
            value: function alignmentTraceback() {
                var inProcessAlignments = [];

                inProcessAlignments.push({ pos: [this.sequence1.length, this.sequence2.length],
                    seq1: "",
                    seq2: ""
                });

                while (inProcessAlignments[0]) {
                    var current = inProcessAlignments[0];
                    var directions = this.tracebackGrid[current.pos[0]][current.pos[1]];

                    if (directions[0]) {
                        inProcessAlignments.push({ pos: [current.pos[0] - 1, current.pos[1] - 1],
                            seq1: this.sequence1[current.pos[0] - 1] + current.seq1,
                            seq2: this.sequence2[current.pos[1] - 1] + current.seq2
                        });
                    }
                    if (directions[1]) {
                        inProcessAlignments.push({ pos: [current.pos[0] - 1, current.pos[1]],
                            seq1: this.sequence1[current.pos[0] - 1] + current.seq1,
                            seq2: '-' + current.seq2
                        });
                    }
                    if (directions[2]) {
                        inProcessAlignments.push({ pos: [current.pos[0], current.pos[1] - 1],
                            seq1: '-' + current.seq1,
                            seq2: this.sequence2[current.pos[1] - 1] + current.seq2
                        });
                    }

                    if (current.pos[0] === 0 && current.pos[1] === 0) this.alignments.push({ sequence1: current.seq1,
                        sequence2: current.seq2
                    });

                    inProcessAlignments.shift();
                }

                return this.alignments;
            }

            // Helper Functions

        }, {
            key: "getAllIndexes",
            value: function getAllIndexes(arr, val) {
                var indexes = [],
                    i = -1;
                while ((i = arr.indexOf(val, i + 1)) !== -1) {
                    indexes.push(i);
                }
                return indexes;
            }
        }, {
            key: "arrayAllMaxIndexes",
            value: function arrayAllMaxIndexes(array) {
                return this.getAllIndexes(array, Math.max.apply(null, array));
            }
        }]);

        return NeedlemanWunsch;
    }();

    module.exports = NeedlemanWunsch;

    /***/ }),
    /* 28 */
    /***/ (function(module, exports, __webpack_require__) {


    var layoutBase = function layoutBase() {
      return;
    };

    layoutBase.FDLayout = __webpack_require__(18);
    layoutBase.FDLayoutConstants = __webpack_require__(4);
    layoutBase.FDLayoutEdge = __webpack_require__(19);
    layoutBase.FDLayoutNode = __webpack_require__(20);
    layoutBase.DimensionD = __webpack_require__(21);
    layoutBase.HashMap = __webpack_require__(22);
    layoutBase.HashSet = __webpack_require__(23);
    layoutBase.IGeometry = __webpack_require__(8);
    layoutBase.IMath = __webpack_require__(9);
    layoutBase.Integer = __webpack_require__(10);
    layoutBase.Point = __webpack_require__(12);
    layoutBase.PointD = __webpack_require__(5);
    layoutBase.RandomSeed = __webpack_require__(16);
    layoutBase.RectangleD = __webpack_require__(13);
    layoutBase.Transform = __webpack_require__(17);
    layoutBase.UniqueIDGeneretor = __webpack_require__(14);
    layoutBase.Quicksort = __webpack_require__(25);
    layoutBase.LinkedList = __webpack_require__(11);
    layoutBase.LGraphObject = __webpack_require__(2);
    layoutBase.LGraph = __webpack_require__(6);
    layoutBase.LEdge = __webpack_require__(1);
    layoutBase.LGraphManager = __webpack_require__(7);
    layoutBase.LNode = __webpack_require__(3);
    layoutBase.Layout = __webpack_require__(15);
    layoutBase.LayoutConstants = __webpack_require__(0);
    layoutBase.NeedlemanWunsch = __webpack_require__(27);
    layoutBase.Matrix = __webpack_require__(24);
    layoutBase.SVD = __webpack_require__(26);

    module.exports = layoutBase;

    /***/ }),
    /* 29 */
    /***/ (function(module, exports, __webpack_require__) {


    function Emitter() {
      this.listeners = [];
    }

    var p = Emitter.prototype;

    p.addListener = function (event, callback) {
      this.listeners.push({
        event: event,
        callback: callback
      });
    };

    p.removeListener = function (event, callback) {
      for (var i = this.listeners.length; i >= 0; i--) {
        var l = this.listeners[i];

        if (l.event === event && l.callback === callback) {
          this.listeners.splice(i, 1);
        }
      }
    };

    p.emit = function (event, data) {
      for (var i = 0; i < this.listeners.length; i++) {
        var l = this.listeners[i];

        if (event === l.event) {
          l.callback(data);
        }
      }
    };

    module.exports = Emitter;

    /***/ })
    /******/ ]);
    });
    }(layoutBase));

    (function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
    	module.exports = factory(layoutBase.exports);
    })(commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE__551__) {
    return /******/ (() => { // webpackBootstrap
    /******/ 	var __webpack_modules__ = ({

    /***/ 45:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {



    var coseBase = {};

    coseBase.layoutBase = __webpack_require__(551);
    coseBase.CoSEConstants = __webpack_require__(806);
    coseBase.CoSEEdge = __webpack_require__(767);
    coseBase.CoSEGraph = __webpack_require__(880);
    coseBase.CoSEGraphManager = __webpack_require__(578);
    coseBase.CoSELayout = __webpack_require__(765);
    coseBase.CoSENode = __webpack_require__(991);
    coseBase.ConstraintHandler = __webpack_require__(902);

    module.exports = coseBase;

    /***/ }),

    /***/ 806:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {



    var FDLayoutConstants = __webpack_require__(551).FDLayoutConstants;

    function CoSEConstants() {}

    //CoSEConstants inherits static props in FDLayoutConstants
    for (var prop in FDLayoutConstants) {
      CoSEConstants[prop] = FDLayoutConstants[prop];
    }

    CoSEConstants.DEFAULT_USE_MULTI_LEVEL_SCALING = false;
    CoSEConstants.DEFAULT_RADIAL_SEPARATION = FDLayoutConstants.DEFAULT_EDGE_LENGTH;
    CoSEConstants.DEFAULT_COMPONENT_SEPERATION = 60;
    CoSEConstants.TILE = true;
    CoSEConstants.TILING_PADDING_VERTICAL = 10;
    CoSEConstants.TILING_PADDING_HORIZONTAL = 10;
    CoSEConstants.TRANSFORM_ON_CONSTRAINT_HANDLING = true;
    CoSEConstants.ENFORCE_CONSTRAINTS = true;
    CoSEConstants.APPLY_LAYOUT = true;
    CoSEConstants.RELAX_MOVEMENT_ON_CONSTRAINTS = true;
    CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL = true; // this should be set to false if there will be a constraint
    // This constant is for differentiating whether actual layout algorithm that uses cose-base wants to apply only incremental layout or 
    // an incremental layout on top of a randomized layout. If it is only incremental layout, then this constant should be true.
    CoSEConstants.PURE_INCREMENTAL = CoSEConstants.DEFAULT_INCREMENTAL;

    module.exports = CoSEConstants;

    /***/ }),

    /***/ 767:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {



    var FDLayoutEdge = __webpack_require__(551).FDLayoutEdge;

    function CoSEEdge(source, target, vEdge) {
      FDLayoutEdge.call(this, source, target, vEdge);
    }

    CoSEEdge.prototype = Object.create(FDLayoutEdge.prototype);
    for (var prop in FDLayoutEdge) {
      CoSEEdge[prop] = FDLayoutEdge[prop];
    }

    module.exports = CoSEEdge;

    /***/ }),

    /***/ 880:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {



    var LGraph = __webpack_require__(551).LGraph;

    function CoSEGraph(parent, graphMgr, vGraph) {
      LGraph.call(this, parent, graphMgr, vGraph);
    }

    CoSEGraph.prototype = Object.create(LGraph.prototype);
    for (var prop in LGraph) {
      CoSEGraph[prop] = LGraph[prop];
    }

    module.exports = CoSEGraph;

    /***/ }),

    /***/ 578:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {



    var LGraphManager = __webpack_require__(551).LGraphManager;

    function CoSEGraphManager(layout) {
      LGraphManager.call(this, layout);
    }

    CoSEGraphManager.prototype = Object.create(LGraphManager.prototype);
    for (var prop in LGraphManager) {
      CoSEGraphManager[prop] = LGraphManager[prop];
    }

    module.exports = CoSEGraphManager;

    /***/ }),

    /***/ 765:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {



    var FDLayout = __webpack_require__(551).FDLayout;
    var CoSEGraphManager = __webpack_require__(578);
    var CoSEGraph = __webpack_require__(880);
    var CoSENode = __webpack_require__(991);
    var CoSEEdge = __webpack_require__(767);
    var CoSEConstants = __webpack_require__(806);
    var ConstraintHandler = __webpack_require__(902);
    var FDLayoutConstants = __webpack_require__(551).FDLayoutConstants;
    var LayoutConstants = __webpack_require__(551).LayoutConstants;
    var Point = __webpack_require__(551).Point;
    var PointD = __webpack_require__(551).PointD;
    var DimensionD = __webpack_require__(551).DimensionD;
    var Layout = __webpack_require__(551).Layout;
    var Integer = __webpack_require__(551).Integer;
    var IGeometry = __webpack_require__(551).IGeometry;
    var LGraph = __webpack_require__(551).LGraph;
    var Transform = __webpack_require__(551).Transform;
    var LinkedList = __webpack_require__(551).LinkedList;

    function CoSELayout() {
      FDLayout.call(this);

      this.toBeTiled = {}; // Memorize if a node is to be tiled or is tiled
      this.constraints = {}; // keep layout constraints
    }

    CoSELayout.prototype = Object.create(FDLayout.prototype);

    for (var prop in FDLayout) {
      CoSELayout[prop] = FDLayout[prop];
    }

    CoSELayout.prototype.newGraphManager = function () {
      var gm = new CoSEGraphManager(this);
      this.graphManager = gm;
      return gm;
    };

    CoSELayout.prototype.newGraph = function (vGraph) {
      return new CoSEGraph(null, this.graphManager, vGraph);
    };

    CoSELayout.prototype.newNode = function (vNode) {
      return new CoSENode(this.graphManager, vNode);
    };

    CoSELayout.prototype.newEdge = function (vEdge) {
      return new CoSEEdge(null, null, vEdge);
    };

    CoSELayout.prototype.initParameters = function () {
      FDLayout.prototype.initParameters.call(this, arguments);
      if (!this.isSubLayout) {
        if (CoSEConstants.DEFAULT_EDGE_LENGTH < 10) {
          this.idealEdgeLength = 10;
        } else {
          this.idealEdgeLength = CoSEConstants.DEFAULT_EDGE_LENGTH;
        }

        this.useSmartIdealEdgeLengthCalculation = CoSEConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;
        this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;
        this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;
        this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;
        this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;

        // variables for tree reduction support
        this.prunedNodesAll = [];
        this.growTreeIterations = 0;
        this.afterGrowthIterations = 0;
        this.isTreeGrowing = false;
        this.isGrowthFinished = false;
      }
    };

    // This method is used to set CoSE related parameters used by spring embedder.
    CoSELayout.prototype.initSpringEmbedder = function () {
      FDLayout.prototype.initSpringEmbedder.call(this);

      // variables for cooling
      this.coolingCycle = 0;
      this.maxCoolingCycle = this.maxIterations / FDLayoutConstants.CONVERGENCE_CHECK_PERIOD;
      this.finalTemperature = 0.04;
      this.coolingAdjuster = 1;
    };

    CoSELayout.prototype.layout = function () {
      var createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;
      if (createBendsAsNeeded) {
        this.createBendpoints();
        this.graphManager.resetAllEdges();
      }

      this.level = 0;
      return this.classicLayout();
    };

    CoSELayout.prototype.classicLayout = function () {
      this.nodesWithGravity = this.calculateNodesToApplyGravitationTo();
      this.graphManager.setAllNodesToApplyGravitation(this.nodesWithGravity);
      this.calcNoOfChildrenForAllNodes();
      this.graphManager.calcLowestCommonAncestors();
      this.graphManager.calcInclusionTreeDepths();
      this.graphManager.getRoot().calcEstimatedSize();
      this.calcIdealEdgeLengths();

      if (!this.incremental) {
        var forest = this.getFlatForest();

        // The graph associated with this layout is flat and a forest
        if (forest.length > 0) {
          this.positionNodesRadially(forest);
        }
        // The graph associated with this layout is not flat or a forest
        else {
            // Reduce the trees when incremental mode is not enabled and graph is not a forest 
            this.reduceTrees();
            // Update nodes that gravity will be applied
            this.graphManager.resetAllNodesToApplyGravitation();
            var allNodes = new Set(this.getAllNodes());
            var intersection = this.nodesWithGravity.filter(function (x) {
              return allNodes.has(x);
            });
            this.graphManager.setAllNodesToApplyGravitation(intersection);

            this.positionNodesRandomly();
          }
      } else {
        if (CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL) {
          // Reduce the trees in incremental mode if only this constant is set to true 
          this.reduceTrees();
          // Update nodes that gravity will be applied
          this.graphManager.resetAllNodesToApplyGravitation();
          var allNodes = new Set(this.getAllNodes());
          var intersection = this.nodesWithGravity.filter(function (x) {
            return allNodes.has(x);
          });
          this.graphManager.setAllNodesToApplyGravitation(intersection);
        }
      }

      if (Object.keys(this.constraints).length > 0) {
        ConstraintHandler.handleConstraints(this);
        this.initConstraintVariables();
      }

      this.initSpringEmbedder();
      if (CoSEConstants.APPLY_LAYOUT) {
        this.runSpringEmbedder();
      }

      return true;
    };

    CoSELayout.prototype.tick = function () {
      this.totalIterations++;

      if (this.totalIterations === this.maxIterations && !this.isTreeGrowing && !this.isGrowthFinished) {
        if (this.prunedNodesAll.length > 0) {
          this.isTreeGrowing = true;
        } else {
          return true;
        }
      }

      if (this.totalIterations % FDLayoutConstants.CONVERGENCE_CHECK_PERIOD == 0 && !this.isTreeGrowing && !this.isGrowthFinished) {
        if (this.isConverged()) {
          if (this.prunedNodesAll.length > 0) {
            this.isTreeGrowing = true;
          } else {
            return true;
          }
        }

        this.coolingCycle++;

        if (this.layoutQuality == 0) {
          // quality - "draft"
          this.coolingAdjuster = this.coolingCycle;
        } else if (this.layoutQuality == 1) {
          // quality - "default"
          this.coolingAdjuster = this.coolingCycle / 3;
        }

        // cooling schedule is based on http://www.btluke.com/simanf1.html -> cooling schedule 3
        this.coolingFactor = Math.max(this.initialCoolingFactor - Math.pow(this.coolingCycle, Math.log(100 * (this.initialCoolingFactor - this.finalTemperature)) / Math.log(this.maxCoolingCycle)) / 100 * this.coolingAdjuster, this.finalTemperature);
        this.animationPeriod = Math.ceil(this.initialAnimationPeriod * Math.sqrt(this.coolingFactor));
      }
      // Operations while tree is growing again 
      if (this.isTreeGrowing) {
        if (this.growTreeIterations % 10 == 0) {
          if (this.prunedNodesAll.length > 0) {
            this.graphManager.updateBounds();
            this.updateGrid();
            this.growTree(this.prunedNodesAll);
            // Update nodes that gravity will be applied
            this.graphManager.resetAllNodesToApplyGravitation();
            var allNodes = new Set(this.getAllNodes());
            var intersection = this.nodesWithGravity.filter(function (x) {
              return allNodes.has(x);
            });
            this.graphManager.setAllNodesToApplyGravitation(intersection);

            this.graphManager.updateBounds();
            this.updateGrid();
            if (CoSEConstants.PURE_INCREMENTAL) this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL / 2;else this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;
          } else {
            this.isTreeGrowing = false;
            this.isGrowthFinished = true;
          }
        }
        this.growTreeIterations++;
      }
      // Operations after growth is finished
      if (this.isGrowthFinished) {
        if (this.isConverged()) {
          return true;
        }
        if (this.afterGrowthIterations % 10 == 0) {
          this.graphManager.updateBounds();
          this.updateGrid();
        }
        if (CoSEConstants.PURE_INCREMENTAL) this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL / 2 * ((100 - this.afterGrowthIterations) / 100);else this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL * ((100 - this.afterGrowthIterations) / 100);
        this.afterGrowthIterations++;
      }

      var gridUpdateAllowed = !this.isTreeGrowing && !this.isGrowthFinished;
      var forceToNodeSurroundingUpdate = this.growTreeIterations % 10 == 1 && this.isTreeGrowing || this.afterGrowthIterations % 10 == 1 && this.isGrowthFinished;

      this.totalDisplacement = 0;
      this.graphManager.updateBounds();
      this.calcSpringForces();
      this.calcRepulsionForces(gridUpdateAllowed, forceToNodeSurroundingUpdate);
      this.calcGravitationalForces();
      this.moveNodes();
      this.animate();

      return false; // Layout is not ended yet return false
    };

    CoSELayout.prototype.getPositionsData = function () {
      var allNodes = this.graphManager.getAllNodes();
      var pData = {};
      for (var i = 0; i < allNodes.length; i++) {
        var rect = allNodes[i].rect;
        var id = allNodes[i].id;
        pData[id] = {
          id: id,
          x: rect.getCenterX(),
          y: rect.getCenterY(),
          w: rect.width,
          h: rect.height
        };
      }

      return pData;
    };

    CoSELayout.prototype.runSpringEmbedder = function () {
      this.initialAnimationPeriod = 25;
      this.animationPeriod = this.initialAnimationPeriod;
      var layoutEnded = false;

      // If aminate option is 'during' signal that layout is supposed to start iterating
      if (FDLayoutConstants.ANIMATE === 'during') {
        this.emit('layoutstarted');
      } else {
        // If aminate option is 'during' tick() function will be called on index.js
        while (!layoutEnded) {
          layoutEnded = this.tick();
        }

        this.graphManager.updateBounds();
      }
    };

    // overrides moveNodes method in FDLayout
    CoSELayout.prototype.moveNodes = function () {
      var lNodes = this.getAllNodes();
      var node;

      // calculate displacement for each node 
      for (var i = 0; i < lNodes.length; i++) {
        node = lNodes[i];
        node.calculateDisplacement();
      }

      if (Object.keys(this.constraints).length > 0) {
        this.updateDisplacements();
      }

      // move each node
      for (var i = 0; i < lNodes.length; i++) {
        node = lNodes[i];
        node.move();
      }
    };

    // constraint related methods: initConstraintVariables and updateDisplacements

    // initialize constraint related variables
    CoSELayout.prototype.initConstraintVariables = function () {
      var self = this;
      this.idToNodeMap = new Map();
      this.fixedNodeSet = new Set();

      var allNodes = this.graphManager.getAllNodes();

      // fill idToNodeMap
      for (var i = 0; i < allNodes.length; i++) {
        var node = allNodes[i];
        this.idToNodeMap.set(node.id, node);
      }

      // calculate fixed node weight for given compound node
      var calculateCompoundWeight = function calculateCompoundWeight(compoundNode) {
        var nodes = compoundNode.getChild().getNodes();
        var node;
        var fixedNodeWeight = 0;
        for (var i = 0; i < nodes.length; i++) {
          node = nodes[i];
          if (node.getChild() == null) {
            if (self.fixedNodeSet.has(node.id)) {
              fixedNodeWeight += 100;
            }
          } else {
            fixedNodeWeight += calculateCompoundWeight(node);
          }
        }
        return fixedNodeWeight;
      };

      if (this.constraints.fixedNodeConstraint) {
        // fill fixedNodeSet
        this.constraints.fixedNodeConstraint.forEach(function (nodeData) {
          self.fixedNodeSet.add(nodeData.nodeId);
        });

        // assign fixed node weights to compounds if they contain fixed nodes
        var allNodes = this.graphManager.getAllNodes();
        var node;

        for (var i = 0; i < allNodes.length; i++) {
          node = allNodes[i];
          if (node.getChild() != null) {
            var fixedNodeWeight = calculateCompoundWeight(node);
            if (fixedNodeWeight > 0) {
              node.fixedNodeWeight = fixedNodeWeight;
            }
          }
        }
      }

      if (this.constraints.relativePlacementConstraint) {
        var nodeToDummyForVerticalAlignment = new Map();
        var nodeToDummyForHorizontalAlignment = new Map();
        this.dummyToNodeForVerticalAlignment = new Map();
        this.dummyToNodeForHorizontalAlignment = new Map();
        this.fixedNodesOnHorizontal = new Set();
        this.fixedNodesOnVertical = new Set();

        // fill maps and sets
        this.fixedNodeSet.forEach(function (nodeId) {
          self.fixedNodesOnHorizontal.add(nodeId);
          self.fixedNodesOnVertical.add(nodeId);
        });

        if (this.constraints.alignmentConstraint) {
          if (this.constraints.alignmentConstraint.vertical) {
            var verticalAlignment = this.constraints.alignmentConstraint.vertical;
            for (var i = 0; i < verticalAlignment.length; i++) {
              this.dummyToNodeForVerticalAlignment.set("dummy" + i, []);
              verticalAlignment[i].forEach(function (nodeId) {
                nodeToDummyForVerticalAlignment.set(nodeId, "dummy" + i);
                self.dummyToNodeForVerticalAlignment.get("dummy" + i).push(nodeId);
                if (self.fixedNodeSet.has(nodeId)) {
                  self.fixedNodesOnHorizontal.add("dummy" + i);
                }
              });
            }
          }
          if (this.constraints.alignmentConstraint.horizontal) {
            var horizontalAlignment = this.constraints.alignmentConstraint.horizontal;
            for (var i = 0; i < horizontalAlignment.length; i++) {
              this.dummyToNodeForHorizontalAlignment.set("dummy" + i, []);
              horizontalAlignment[i].forEach(function (nodeId) {
                nodeToDummyForHorizontalAlignment.set(nodeId, "dummy" + i);
                self.dummyToNodeForHorizontalAlignment.get("dummy" + i).push(nodeId);
                if (self.fixedNodeSet.has(nodeId)) {
                  self.fixedNodesOnVertical.add("dummy" + i);
                }
              });
            }
          }
        }

        if (CoSEConstants.RELAX_MOVEMENT_ON_CONSTRAINTS) {

          this.shuffle = function (array) {
            var j, x, i;
            for (i = array.length - 1; i >= 2 * array.length / 3; i--) {
              j = Math.floor(Math.random() * (i + 1));
              x = array[i];
              array[i] = array[j];
              array[j] = x;
            }
            return array;
          };

          this.nodesInRelativeHorizontal = [];
          this.nodesInRelativeVertical = [];
          this.nodeToRelativeConstraintMapHorizontal = new Map();
          this.nodeToRelativeConstraintMapVertical = new Map();
          this.nodeToTempPositionMapHorizontal = new Map();
          this.nodeToTempPositionMapVertical = new Map();

          // fill arrays and maps
          this.constraints.relativePlacementConstraint.forEach(function (constraint) {
            if (constraint.left) {
              var nodeIdLeft = nodeToDummyForVerticalAlignment.has(constraint.left) ? nodeToDummyForVerticalAlignment.get(constraint.left) : constraint.left;
              var nodeIdRight = nodeToDummyForVerticalAlignment.has(constraint.right) ? nodeToDummyForVerticalAlignment.get(constraint.right) : constraint.right;

              if (!self.nodesInRelativeHorizontal.includes(nodeIdLeft)) {
                self.nodesInRelativeHorizontal.push(nodeIdLeft);
                self.nodeToRelativeConstraintMapHorizontal.set(nodeIdLeft, []);
                if (self.dummyToNodeForVerticalAlignment.has(nodeIdLeft)) {
                  self.nodeToTempPositionMapHorizontal.set(nodeIdLeft, self.idToNodeMap.get(self.dummyToNodeForVerticalAlignment.get(nodeIdLeft)[0]).getCenterX());
                } else {
                  self.nodeToTempPositionMapHorizontal.set(nodeIdLeft, self.idToNodeMap.get(nodeIdLeft).getCenterX());
                }
              }
              if (!self.nodesInRelativeHorizontal.includes(nodeIdRight)) {
                self.nodesInRelativeHorizontal.push(nodeIdRight);
                self.nodeToRelativeConstraintMapHorizontal.set(nodeIdRight, []);
                if (self.dummyToNodeForVerticalAlignment.has(nodeIdRight)) {
                  self.nodeToTempPositionMapHorizontal.set(nodeIdRight, self.idToNodeMap.get(self.dummyToNodeForVerticalAlignment.get(nodeIdRight)[0]).getCenterX());
                } else {
                  self.nodeToTempPositionMapHorizontal.set(nodeIdRight, self.idToNodeMap.get(nodeIdRight).getCenterX());
                }
              }

              self.nodeToRelativeConstraintMapHorizontal.get(nodeIdLeft).push({ right: nodeIdRight, gap: constraint.gap });
              self.nodeToRelativeConstraintMapHorizontal.get(nodeIdRight).push({ left: nodeIdLeft, gap: constraint.gap });
            } else {
              var nodeIdTop = nodeToDummyForHorizontalAlignment.has(constraint.top) ? nodeToDummyForHorizontalAlignment.get(constraint.top) : constraint.top;
              var nodeIdBottom = nodeToDummyForHorizontalAlignment.has(constraint.bottom) ? nodeToDummyForHorizontalAlignment.get(constraint.bottom) : constraint.bottom;

              if (!self.nodesInRelativeVertical.includes(nodeIdTop)) {
                self.nodesInRelativeVertical.push(nodeIdTop);
                self.nodeToRelativeConstraintMapVertical.set(nodeIdTop, []);
                if (self.dummyToNodeForHorizontalAlignment.has(nodeIdTop)) {
                  self.nodeToTempPositionMapVertical.set(nodeIdTop, self.idToNodeMap.get(self.dummyToNodeForHorizontalAlignment.get(nodeIdTop)[0]).getCenterY());
                } else {
                  self.nodeToTempPositionMapVertical.set(nodeIdTop, self.idToNodeMap.get(nodeIdTop).getCenterY());
                }
              }
              if (!self.nodesInRelativeVertical.includes(nodeIdBottom)) {
                self.nodesInRelativeVertical.push(nodeIdBottom);
                self.nodeToRelativeConstraintMapVertical.set(nodeIdBottom, []);
                if (self.dummyToNodeForHorizontalAlignment.has(nodeIdBottom)) {
                  self.nodeToTempPositionMapVertical.set(nodeIdBottom, self.idToNodeMap.get(self.dummyToNodeForHorizontalAlignment.get(nodeIdBottom)[0]).getCenterY());
                } else {
                  self.nodeToTempPositionMapVertical.set(nodeIdBottom, self.idToNodeMap.get(nodeIdBottom).getCenterY());
                }
              }
              self.nodeToRelativeConstraintMapVertical.get(nodeIdTop).push({ bottom: nodeIdBottom, gap: constraint.gap });
              self.nodeToRelativeConstraintMapVertical.get(nodeIdBottom).push({ top: nodeIdTop, gap: constraint.gap });
            }
          });
        } else {
          var subGraphOnHorizontal = new Map(); // subgraph from vertical RP constraints
          var subGraphOnVertical = new Map(); // subgraph from vertical RP constraints

          // construct subgraphs from relative placement constraints 
          this.constraints.relativePlacementConstraint.forEach(function (constraint) {
            if (constraint.left) {
              var left = nodeToDummyForVerticalAlignment.has(constraint.left) ? nodeToDummyForVerticalAlignment.get(constraint.left) : constraint.left;
              var right = nodeToDummyForVerticalAlignment.has(constraint.right) ? nodeToDummyForVerticalAlignment.get(constraint.right) : constraint.right;
              if (subGraphOnHorizontal.has(left)) {
                subGraphOnHorizontal.get(left).push(right);
              } else {
                subGraphOnHorizontal.set(left, [right]);
              }
              if (subGraphOnHorizontal.has(right)) {
                subGraphOnHorizontal.get(right).push(left);
              } else {
                subGraphOnHorizontal.set(right, [left]);
              }
            } else {
              var top = nodeToDummyForHorizontalAlignment.has(constraint.top) ? nodeToDummyForHorizontalAlignment.get(constraint.top) : constraint.top;
              var bottom = nodeToDummyForHorizontalAlignment.has(constraint.bottom) ? nodeToDummyForHorizontalAlignment.get(constraint.bottom) : constraint.bottom;
              if (subGraphOnVertical.has(top)) {
                subGraphOnVertical.get(top).push(bottom);
              } else {
                subGraphOnVertical.set(top, [bottom]);
              }
              if (subGraphOnVertical.has(bottom)) {
                subGraphOnVertical.get(bottom).push(top);
              } else {
                subGraphOnVertical.set(bottom, [top]);
              }
            }
          });

          // function to construct components from a given graph 
          // also returns an array that keeps whether each component contains fixed node
          var constructComponents = function constructComponents(graph, fixedNodes) {
            var components = [];
            var isFixed = [];
            var queue = new LinkedList();
            var visited = new Set();
            var count = 0;

            graph.forEach(function (value, key) {
              if (!visited.has(key)) {
                components[count] = [];
                isFixed[count] = false;
                var currentNode = key;
                queue.push(currentNode);
                visited.add(currentNode);
                components[count].push(currentNode);

                while (queue.length != 0) {
                  currentNode = queue.shift();
                  if (fixedNodes.has(currentNode)) {
                    isFixed[count] = true;
                  }
                  var neighbors = graph.get(currentNode);
                  neighbors.forEach(function (neighbor) {
                    if (!visited.has(neighbor)) {
                      queue.push(neighbor);
                      visited.add(neighbor);
                      components[count].push(neighbor);
                    }
                  });
                }
                count++;
              }
            });

            return { components: components, isFixed: isFixed };
          };

          var resultOnHorizontal = constructComponents(subGraphOnHorizontal, self.fixedNodesOnHorizontal);
          this.componentsOnHorizontal = resultOnHorizontal.components;
          this.fixedComponentsOnHorizontal = resultOnHorizontal.isFixed;
          var resultOnVertical = constructComponents(subGraphOnVertical, self.fixedNodesOnVertical);
          this.componentsOnVertical = resultOnVertical.components;
          this.fixedComponentsOnVertical = resultOnVertical.isFixed;
        }
      }
    };

    // updates node displacements based on constraints
    CoSELayout.prototype.updateDisplacements = function () {
      var self = this;
      if (this.constraints.fixedNodeConstraint) {
        this.constraints.fixedNodeConstraint.forEach(function (nodeData) {
          var fixedNode = self.idToNodeMap.get(nodeData.nodeId);
          fixedNode.displacementX = 0;
          fixedNode.displacementY = 0;
        });
      }

      if (this.constraints.alignmentConstraint) {
        if (this.constraints.alignmentConstraint.vertical) {
          var allVerticalAlignments = this.constraints.alignmentConstraint.vertical;
          for (var i = 0; i < allVerticalAlignments.length; i++) {
            var totalDisplacementX = 0;
            for (var j = 0; j < allVerticalAlignments[i].length; j++) {
              if (this.fixedNodeSet.has(allVerticalAlignments[i][j])) {
                totalDisplacementX = 0;
                break;
              }
              totalDisplacementX += this.idToNodeMap.get(allVerticalAlignments[i][j]).displacementX;
            }
            var averageDisplacementX = totalDisplacementX / allVerticalAlignments[i].length;
            for (var j = 0; j < allVerticalAlignments[i].length; j++) {
              this.idToNodeMap.get(allVerticalAlignments[i][j]).displacementX = averageDisplacementX;
            }
          }
        }
        if (this.constraints.alignmentConstraint.horizontal) {
          var allHorizontalAlignments = this.constraints.alignmentConstraint.horizontal;
          for (var i = 0; i < allHorizontalAlignments.length; i++) {
            var totalDisplacementY = 0;
            for (var j = 0; j < allHorizontalAlignments[i].length; j++) {
              if (this.fixedNodeSet.has(allHorizontalAlignments[i][j])) {
                totalDisplacementY = 0;
                break;
              }
              totalDisplacementY += this.idToNodeMap.get(allHorizontalAlignments[i][j]).displacementY;
            }
            var averageDisplacementY = totalDisplacementY / allHorizontalAlignments[i].length;
            for (var j = 0; j < allHorizontalAlignments[i].length; j++) {
              this.idToNodeMap.get(allHorizontalAlignments[i][j]).displacementY = averageDisplacementY;
            }
          }
        }
      }

      if (this.constraints.relativePlacementConstraint) {

        if (CoSEConstants.RELAX_MOVEMENT_ON_CONSTRAINTS) {
          // shuffle array to randomize node processing order
          if (this.totalIterations % 10 == 0) {
            this.shuffle(this.nodesInRelativeHorizontal);
            this.shuffle(this.nodesInRelativeVertical);
          }

          this.nodesInRelativeHorizontal.forEach(function (nodeId) {
            if (!self.fixedNodesOnHorizontal.has(nodeId)) {
              var displacement = 0;
              if (self.dummyToNodeForVerticalAlignment.has(nodeId)) {
                displacement = self.idToNodeMap.get(self.dummyToNodeForVerticalAlignment.get(nodeId)[0]).displacementX;
              } else {
                displacement = self.idToNodeMap.get(nodeId).displacementX;
              }
              self.nodeToRelativeConstraintMapHorizontal.get(nodeId).forEach(function (constraint) {
                if (constraint.right) {
                  var diff = self.nodeToTempPositionMapHorizontal.get(constraint.right) - self.nodeToTempPositionMapHorizontal.get(nodeId) - displacement;
                  if (diff < constraint.gap) {
                    displacement -= constraint.gap - diff;
                  }
                } else {
                  var diff = self.nodeToTempPositionMapHorizontal.get(nodeId) - self.nodeToTempPositionMapHorizontal.get(constraint.left) + displacement;
                  if (diff < constraint.gap) {
                    displacement += constraint.gap - diff;
                  }
                }
              });
              self.nodeToTempPositionMapHorizontal.set(nodeId, self.nodeToTempPositionMapHorizontal.get(nodeId) + displacement);
              if (self.dummyToNodeForVerticalAlignment.has(nodeId)) {
                self.dummyToNodeForVerticalAlignment.get(nodeId).forEach(function (nodeId) {
                  self.idToNodeMap.get(nodeId).displacementX = displacement;
                });
              } else {
                self.idToNodeMap.get(nodeId).displacementX = displacement;
              }
            }
          });

          this.nodesInRelativeVertical.forEach(function (nodeId) {
            if (!self.fixedNodesOnHorizontal.has(nodeId)) {
              var displacement = 0;
              if (self.dummyToNodeForHorizontalAlignment.has(nodeId)) {
                displacement = self.idToNodeMap.get(self.dummyToNodeForHorizontalAlignment.get(nodeId)[0]).displacementY;
              } else {
                displacement = self.idToNodeMap.get(nodeId).displacementY;
              }
              self.nodeToRelativeConstraintMapVertical.get(nodeId).forEach(function (constraint) {
                if (constraint.bottom) {
                  var diff = self.nodeToTempPositionMapVertical.get(constraint.bottom) - self.nodeToTempPositionMapVertical.get(nodeId) - displacement;
                  if (diff < constraint.gap) {
                    displacement -= constraint.gap - diff;
                  }
                } else {
                  var diff = self.nodeToTempPositionMapVertical.get(nodeId) - self.nodeToTempPositionMapVertical.get(constraint.top) + displacement;
                  if (diff < constraint.gap) {
                    displacement += constraint.gap - diff;
                  }
                }
              });
              self.nodeToTempPositionMapVertical.set(nodeId, self.nodeToTempPositionMapVertical.get(nodeId) + displacement);
              if (self.dummyToNodeForHorizontalAlignment.has(nodeId)) {
                self.dummyToNodeForHorizontalAlignment.get(nodeId).forEach(function (nodeId) {
                  self.idToNodeMap.get(nodeId).displacementY = displacement;
                });
              } else {
                self.idToNodeMap.get(nodeId).displacementY = displacement;
              }
            }
          });
        } else {
          for (var i = 0; i < this.componentsOnHorizontal.length; i++) {
            var component = this.componentsOnHorizontal[i];
            if (this.fixedComponentsOnHorizontal[i]) {
              for (var j = 0; j < component.length; j++) {
                if (this.dummyToNodeForVerticalAlignment.has(component[j])) {
                  this.dummyToNodeForVerticalAlignment.get(component[j]).forEach(function (nodeId) {
                    self.idToNodeMap.get(nodeId).displacementX = 0;
                  });
                } else {
                  this.idToNodeMap.get(component[j]).displacementX = 0;
                }
              }
            } else {
              var sum = 0;
              var count = 0;
              for (var j = 0; j < component.length; j++) {
                if (this.dummyToNodeForVerticalAlignment.has(component[j])) {
                  var actualNodes = this.dummyToNodeForVerticalAlignment.get(component[j]);
                  sum += actualNodes.length * this.idToNodeMap.get(actualNodes[0]).displacementX;
                  count += actualNodes.length;
                } else {
                  sum += this.idToNodeMap.get(component[j]).displacementX;
                  count++;
                }
              }
              var averageDisplacement = sum / count;
              for (var j = 0; j < component.length; j++) {
                if (this.dummyToNodeForVerticalAlignment.has(component[j])) {
                  this.dummyToNodeForVerticalAlignment.get(component[j]).forEach(function (nodeId) {
                    self.idToNodeMap.get(nodeId).displacementX = averageDisplacement;
                  });
                } else {
                  this.idToNodeMap.get(component[j]).displacementX = averageDisplacement;
                }
              }
            }
          }

          for (var i = 0; i < this.componentsOnVertical.length; i++) {
            var component = this.componentsOnVertical[i];
            if (this.fixedComponentsOnVertical[i]) {
              for (var j = 0; j < component.length; j++) {
                if (this.dummyToNodeForHorizontalAlignment.has(component[j])) {
                  this.dummyToNodeForHorizontalAlignment.get(component[j]).forEach(function (nodeId) {
                    self.idToNodeMap.get(nodeId).displacementY = 0;
                  });
                } else {
                  this.idToNodeMap.get(component[j]).displacementY = 0;
                }
              }
            } else {
              var sum = 0;
              var count = 0;
              for (var j = 0; j < component.length; j++) {
                if (this.dummyToNodeForHorizontalAlignment.has(component[j])) {
                  var actualNodes = this.dummyToNodeForHorizontalAlignment.get(component[j]);
                  sum += actualNodes.length * this.idToNodeMap.get(actualNodes[0]).displacementY;
                  count += actualNodes.length;
                } else {
                  sum += this.idToNodeMap.get(component[j]).displacementY;
                  count++;
                }
              }
              var averageDisplacement = sum / count;
              for (var j = 0; j < component.length; j++) {
                if (this.dummyToNodeForHorizontalAlignment.has(component[j])) {
                  this.dummyToNodeForHorizontalAlignment.get(component[j]).forEach(function (nodeId) {
                    self.idToNodeMap.get(nodeId).displacementY = averageDisplacement;
                  });
                } else {
                  this.idToNodeMap.get(component[j]).displacementY = averageDisplacement;
                }
              }
            }
          }
        }
      }
    };

    CoSELayout.prototype.calculateNodesToApplyGravitationTo = function () {
      var nodeList = [];
      var graph;

      var graphs = this.graphManager.getGraphs();
      var size = graphs.length;
      var i;
      for (i = 0; i < size; i++) {
        graph = graphs[i];

        graph.updateConnected();

        if (!graph.isConnected) {
          nodeList = nodeList.concat(graph.getNodes());
        }
      }

      return nodeList;
    };

    CoSELayout.prototype.createBendpoints = function () {
      var edges = [];
      edges = edges.concat(this.graphManager.getAllEdges());
      var visited = new Set();
      var i;
      for (i = 0; i < edges.length; i++) {
        var edge = edges[i];

        if (!visited.has(edge)) {
          var source = edge.getSource();
          var target = edge.getTarget();

          if (source == target) {
            edge.getBendpoints().push(new PointD());
            edge.getBendpoints().push(new PointD());
            this.createDummyNodesForBendpoints(edge);
            visited.add(edge);
          } else {
            var edgeList = [];

            edgeList = edgeList.concat(source.getEdgeListToNode(target));
            edgeList = edgeList.concat(target.getEdgeListToNode(source));

            if (!visited.has(edgeList[0])) {
              if (edgeList.length > 1) {
                var k;
                for (k = 0; k < edgeList.length; k++) {
                  var multiEdge = edgeList[k];
                  multiEdge.getBendpoints().push(new PointD());
                  this.createDummyNodesForBendpoints(multiEdge);
                }
              }
              edgeList.forEach(function (edge) {
                visited.add(edge);
              });
            }
          }
        }

        if (visited.size == edges.length) {
          break;
        }
      }
    };

    CoSELayout.prototype.positionNodesRadially = function (forest) {
      // We tile the trees to a grid row by row; first tree starts at (0,0)
      var currentStartingPoint = new Point(0, 0);
      var numberOfColumns = Math.ceil(Math.sqrt(forest.length));
      var height = 0;
      var currentY = 0;
      var currentX = 0;
      var point = new PointD(0, 0);

      for (var i = 0; i < forest.length; i++) {
        if (i % numberOfColumns == 0) {
          // Start of a new row, make the x coordinate 0, increment the
          // y coordinate with the max height of the previous row
          currentX = 0;
          currentY = height;

          if (i != 0) {
            currentY += CoSEConstants.DEFAULT_COMPONENT_SEPERATION;
          }

          height = 0;
        }

        var tree = forest[i];

        // Find the center of the tree
        var centerNode = Layout.findCenterOfTree(tree);

        // Set the staring point of the next tree
        currentStartingPoint.x = currentX;
        currentStartingPoint.y = currentY;

        // Do a radial layout starting with the center
        point = CoSELayout.radialLayout(tree, centerNode, currentStartingPoint);

        if (point.y > height) {
          height = Math.floor(point.y);
        }

        currentX = Math.floor(point.x + CoSEConstants.DEFAULT_COMPONENT_SEPERATION);
      }

      this.transform(new PointD(LayoutConstants.WORLD_CENTER_X - point.x / 2, LayoutConstants.WORLD_CENTER_Y - point.y / 2));
    };

    CoSELayout.radialLayout = function (tree, centerNode, startingPoint) {
      var radialSep = Math.max(this.maxDiagonalInTree(tree), CoSEConstants.DEFAULT_RADIAL_SEPARATION);
      CoSELayout.branchRadialLayout(centerNode, null, 0, 359, 0, radialSep);
      var bounds = LGraph.calculateBounds(tree);

      var transform = new Transform();
      transform.setDeviceOrgX(bounds.getMinX());
      transform.setDeviceOrgY(bounds.getMinY());
      transform.setWorldOrgX(startingPoint.x);
      transform.setWorldOrgY(startingPoint.y);

      for (var i = 0; i < tree.length; i++) {
        var node = tree[i];
        node.transform(transform);
      }

      var bottomRight = new PointD(bounds.getMaxX(), bounds.getMaxY());

      return transform.inverseTransformPoint(bottomRight);
    };

    CoSELayout.branchRadialLayout = function (node, parentOfNode, startAngle, endAngle, distance, radialSeparation) {
      // First, position this node by finding its angle.
      var halfInterval = (endAngle - startAngle + 1) / 2;

      if (halfInterval < 0) {
        halfInterval += 180;
      }

      var nodeAngle = (halfInterval + startAngle) % 360;
      var teta = nodeAngle * IGeometry.TWO_PI / 360;
      var x_ = distance * Math.cos(teta);
      var y_ = distance * Math.sin(teta);

      node.setCenter(x_, y_);

      // Traverse all neighbors of this node and recursively call this
      // function.
      var neighborEdges = [];
      neighborEdges = neighborEdges.concat(node.getEdges());
      var childCount = neighborEdges.length;

      if (parentOfNode != null) {
        childCount--;
      }

      var branchCount = 0;

      var incEdgesCount = neighborEdges.length;
      var startIndex;

      var edges = node.getEdgesBetween(parentOfNode);

      // If there are multiple edges, prune them until there remains only one
      // edge.
      while (edges.length > 1) {
        //neighborEdges.remove(edges.remove(0));
        var temp = edges[0];
        edges.splice(0, 1);
        var index = neighborEdges.indexOf(temp);
        if (index >= 0) {
          neighborEdges.splice(index, 1);
        }
        incEdgesCount--;
        childCount--;
      }

      if (parentOfNode != null) {
        //assert edges.length == 1;
        startIndex = (neighborEdges.indexOf(edges[0]) + 1) % incEdgesCount;
      } else {
        startIndex = 0;
      }

      var stepAngle = Math.abs(endAngle - startAngle) / childCount;

      for (var i = startIndex; branchCount != childCount; i = ++i % incEdgesCount) {
        var currentNeighbor = neighborEdges[i].getOtherEnd(node);

        // Don't back traverse to root node in current tree.
        if (currentNeighbor == parentOfNode) {
          continue;
        }

        var childStartAngle = (startAngle + branchCount * stepAngle) % 360;
        var childEndAngle = (childStartAngle + stepAngle) % 360;

        CoSELayout.branchRadialLayout(currentNeighbor, node, childStartAngle, childEndAngle, distance + radialSeparation, radialSeparation);

        branchCount++;
      }
    };

    CoSELayout.maxDiagonalInTree = function (tree) {
      var maxDiagonal = Integer.MIN_VALUE;

      for (var i = 0; i < tree.length; i++) {
        var node = tree[i];
        var diagonal = node.getDiagonal();

        if (diagonal > maxDiagonal) {
          maxDiagonal = diagonal;
        }
      }

      return maxDiagonal;
    };

    CoSELayout.prototype.calcRepulsionRange = function () {
      // formula is 2 x (level + 1) x idealEdgeLength
      return 2 * (this.level + 1) * this.idealEdgeLength;
    };

    // Tiling methods

    // Group zero degree members whose parents are not to be tiled, create dummy parents where needed and fill memberGroups by their dummp parent id's
    CoSELayout.prototype.groupZeroDegreeMembers = function () {
      var self = this;
      // array of [parent_id x oneDegreeNode_id]
      var tempMemberGroups = {}; // A temporary map of parent node and its zero degree members
      this.memberGroups = {}; // A map of dummy parent node and its zero degree members whose parents are not to be tiled
      this.idToDummyNode = {}; // A map of id to dummy node 

      var zeroDegree = []; // List of zero degree nodes whose parents are not to be tiled
      var allNodes = this.graphManager.getAllNodes();

      // Fill zero degree list
      for (var i = 0; i < allNodes.length; i++) {
        var node = allNodes[i];
        var parent = node.getParent();
        // If a node has zero degree and its parent is not to be tiled if exists add that node to zeroDegres list
        if (this.getNodeDegreeWithChildren(node) === 0 && (parent.id == undefined || !this.getToBeTiled(parent))) {
          zeroDegree.push(node);
        }
      }

      // Create a map of parent node and its zero degree members
      for (var i = 0; i < zeroDegree.length; i++) {
        var node = zeroDegree[i]; // Zero degree node itself
        var p_id = node.getParent().id; // Parent id

        if (typeof tempMemberGroups[p_id] === "undefined") tempMemberGroups[p_id] = [];

        tempMemberGroups[p_id] = tempMemberGroups[p_id].concat(node); // Push node to the list belongs to its parent in tempMemberGroups
      }

      // If there are at least two nodes at a level, create a dummy compound for them
      Object.keys(tempMemberGroups).forEach(function (p_id) {
        if (tempMemberGroups[p_id].length > 1) {
          var dummyCompoundId = "DummyCompound_" + p_id; // The id of dummy compound which will be created soon
          self.memberGroups[dummyCompoundId] = tempMemberGroups[p_id]; // Add dummy compound to memberGroups

          var parent = tempMemberGroups[p_id][0].getParent(); // The parent of zero degree nodes will be the parent of new dummy compound

          // Create a dummy compound with calculated id
          var dummyCompound = new CoSENode(self.graphManager);
          dummyCompound.id = dummyCompoundId;
          dummyCompound.paddingLeft = parent.paddingLeft || 0;
          dummyCompound.paddingRight = parent.paddingRight || 0;
          dummyCompound.paddingBottom = parent.paddingBottom || 0;
          dummyCompound.paddingTop = parent.paddingTop || 0;

          self.idToDummyNode[dummyCompoundId] = dummyCompound;

          var dummyParentGraph = self.getGraphManager().add(self.newGraph(), dummyCompound);
          var parentGraph = parent.getChild();

          // Add dummy compound to parent the graph
          parentGraph.add(dummyCompound);

          // For each zero degree node in this level remove it from its parent graph and add it to the graph of dummy parent
          for (var i = 0; i < tempMemberGroups[p_id].length; i++) {
            var node = tempMemberGroups[p_id][i];

            parentGraph.remove(node);
            dummyParentGraph.add(node);
          }
        }
      });
    };

    CoSELayout.prototype.clearCompounds = function () {
      var childGraphMap = {};
      var idToNode = {};

      // Get compound ordering by finding the inner one first
      this.performDFSOnCompounds();

      for (var i = 0; i < this.compoundOrder.length; i++) {

        idToNode[this.compoundOrder[i].id] = this.compoundOrder[i];
        childGraphMap[this.compoundOrder[i].id] = [].concat(this.compoundOrder[i].getChild().getNodes());

        // Remove children of compounds
        this.graphManager.remove(this.compoundOrder[i].getChild());
        this.compoundOrder[i].child = null;
      }

      this.graphManager.resetAllNodes();

      // Tile the removed children
      this.tileCompoundMembers(childGraphMap, idToNode);
    };

    CoSELayout.prototype.clearZeroDegreeMembers = function () {
      var self = this;
      var tiledZeroDegreePack = this.tiledZeroDegreePack = [];

      Object.keys(this.memberGroups).forEach(function (id) {
        var compoundNode = self.idToDummyNode[id]; // Get the dummy compound

        tiledZeroDegreePack[id] = self.tileNodes(self.memberGroups[id], compoundNode.paddingLeft + compoundNode.paddingRight);

        // Set the width and height of the dummy compound as calculated
        compoundNode.rect.width = tiledZeroDegreePack[id].width;
        compoundNode.rect.height = tiledZeroDegreePack[id].height;
        compoundNode.setCenter(tiledZeroDegreePack[id].centerX, tiledZeroDegreePack[id].centerY);

        // compound left and top margings for labels
        // when node labels are included, these values may be set to different values below and are used in tilingPostLayout,
        // otherwise they stay as zero
        compoundNode.labelMarginLeft = 0;
        compoundNode.labelMarginTop = 0;

        // Update compound bounds considering its label properties and set label margins for left and top
        if (CoSEConstants.NODE_DIMENSIONS_INCLUDE_LABELS) {

          var width = compoundNode.rect.width;
          var height = compoundNode.rect.height;

          if (compoundNode.labelWidth) {
            if (compoundNode.labelPosHorizontal == "left") {
              compoundNode.rect.x -= compoundNode.labelWidth;
              compoundNode.setWidth(width + compoundNode.labelWidth);
              compoundNode.labelMarginLeft = compoundNode.labelWidth;
            } else if (compoundNode.labelPosHorizontal == "center" && compoundNode.labelWidth > width) {
              compoundNode.rect.x -= (compoundNode.labelWidth - width) / 2;
              compoundNode.setWidth(compoundNode.labelWidth);
              compoundNode.labelMarginLeft = (compoundNode.labelWidth - width) / 2;
            } else if (compoundNode.labelPosHorizontal == "right") {
              compoundNode.setWidth(width + compoundNode.labelWidth);
            }
          }

          if (compoundNode.labelHeight) {
            if (compoundNode.labelPosVertical == "top") {
              compoundNode.rect.y -= compoundNode.labelHeight;
              compoundNode.setHeight(height + compoundNode.labelHeight);
              compoundNode.labelMarginTop = compoundNode.labelHeight;
            } else if (compoundNode.labelPosVertical == "center" && compoundNode.labelHeight > height) {
              compoundNode.rect.y -= (compoundNode.labelHeight - height) / 2;
              compoundNode.setHeight(compoundNode.labelHeight);
              compoundNode.labelMarginTop = (compoundNode.labelHeight - height) / 2;
            } else if (compoundNode.labelPosVertical == "bottom") {
              compoundNode.setHeight(height + compoundNode.labelHeight);
            }
          }
        }
      });
    };

    CoSELayout.prototype.repopulateCompounds = function () {
      for (var i = this.compoundOrder.length - 1; i >= 0; i--) {
        var lCompoundNode = this.compoundOrder[i];
        var id = lCompoundNode.id;
        var horizontalMargin = lCompoundNode.paddingLeft;
        var verticalMargin = lCompoundNode.paddingTop;
        var labelMarginLeft = lCompoundNode.labelMarginLeft;
        var labelMarginTop = lCompoundNode.labelMarginTop;

        this.adjustLocations(this.tiledMemberPack[id], lCompoundNode.rect.x, lCompoundNode.rect.y, horizontalMargin, verticalMargin, labelMarginLeft, labelMarginTop);
      }
    };

    CoSELayout.prototype.repopulateZeroDegreeMembers = function () {
      var self = this;
      var tiledPack = this.tiledZeroDegreePack;

      Object.keys(tiledPack).forEach(function (id) {
        var compoundNode = self.idToDummyNode[id]; // Get the dummy compound by its id
        var horizontalMargin = compoundNode.paddingLeft;
        var verticalMargin = compoundNode.paddingTop;
        var labelMarginLeft = compoundNode.labelMarginLeft;
        var labelMarginTop = compoundNode.labelMarginTop;

        // Adjust the positions of nodes wrt its compound
        self.adjustLocations(tiledPack[id], compoundNode.rect.x, compoundNode.rect.y, horizontalMargin, verticalMargin, labelMarginLeft, labelMarginTop);
      });
    };

    CoSELayout.prototype.getToBeTiled = function (node) {
      var id = node.id;
      //firstly check the previous results
      if (this.toBeTiled[id] != null) {
        return this.toBeTiled[id];
      }

      //only compound nodes are to be tiled
      var childGraph = node.getChild();
      if (childGraph == null) {
        this.toBeTiled[id] = false;
        return false;
      }

      var children = childGraph.getNodes(); // Get the children nodes

      //a compound node is not to be tiled if all of its compound children are not to be tiled
      for (var i = 0; i < children.length; i++) {
        var theChild = children[i];

        if (this.getNodeDegree(theChild) > 0) {
          this.toBeTiled[id] = false;
          return false;
        }

        //pass the children not having the compound structure
        if (theChild.getChild() == null) {
          this.toBeTiled[theChild.id] = false;
          continue;
        }

        if (!this.getToBeTiled(theChild)) {
          this.toBeTiled[id] = false;
          return false;
        }
      }
      this.toBeTiled[id] = true;
      return true;
    };

    // Get degree of a node depending of its edges and independent of its children
    CoSELayout.prototype.getNodeDegree = function (node) {
      node.id;
      var edges = node.getEdges();
      var degree = 0;

      // For the edges connected
      for (var i = 0; i < edges.length; i++) {
        var edge = edges[i];
        if (edge.getSource().id !== edge.getTarget().id) {
          degree = degree + 1;
        }
      }
      return degree;
    };

    // Get degree of a node with its children
    CoSELayout.prototype.getNodeDegreeWithChildren = function (node) {
      var degree = this.getNodeDegree(node);
      if (node.getChild() == null) {
        return degree;
      }
      var children = node.getChild().getNodes();
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        degree += this.getNodeDegreeWithChildren(child);
      }
      return degree;
    };

    CoSELayout.prototype.performDFSOnCompounds = function () {
      this.compoundOrder = [];
      this.fillCompexOrderByDFS(this.graphManager.getRoot().getNodes());
    };

    CoSELayout.prototype.fillCompexOrderByDFS = function (children) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        if (child.getChild() != null) {
          this.fillCompexOrderByDFS(child.getChild().getNodes());
        }
        if (this.getToBeTiled(child)) {
          this.compoundOrder.push(child);
        }
      }
    };

    /**
    * This method places each zero degree member wrt given (x,y) coordinates (top left).
    */
    CoSELayout.prototype.adjustLocations = function (organization, x, y, compoundHorizontalMargin, compoundVerticalMargin, compoundLabelMarginLeft, compoundLabelMarginTop) {
      x += compoundHorizontalMargin + compoundLabelMarginLeft;
      y += compoundVerticalMargin + compoundLabelMarginTop;

      var left = x;

      for (var i = 0; i < organization.rows.length; i++) {
        var row = organization.rows[i];
        x = left;
        var maxHeight = 0;

        for (var j = 0; j < row.length; j++) {
          var lnode = row[j];

          lnode.rect.x = x; // + lnode.rect.width / 2;
          lnode.rect.y = y; // + lnode.rect.height / 2;

          x += lnode.rect.width + organization.horizontalPadding;

          if (lnode.rect.height > maxHeight) maxHeight = lnode.rect.height;
        }

        y += maxHeight + organization.verticalPadding;
      }
    };

    CoSELayout.prototype.tileCompoundMembers = function (childGraphMap, idToNode) {
      var self = this;
      this.tiledMemberPack = [];

      Object.keys(childGraphMap).forEach(function (id) {
        // Get the compound node
        var compoundNode = idToNode[id];

        self.tiledMemberPack[id] = self.tileNodes(childGraphMap[id], compoundNode.paddingLeft + compoundNode.paddingRight);

        compoundNode.rect.width = self.tiledMemberPack[id].width;
        compoundNode.rect.height = self.tiledMemberPack[id].height;
        compoundNode.setCenter(self.tiledMemberPack[id].centerX, self.tiledMemberPack[id].centerY);

        // compound left and top margings for labels
        // when node labels are included, these values may be set to different values below and are used in tilingPostLayout,
        // otherwise they stay as zero
        compoundNode.labelMarginLeft = 0;
        compoundNode.labelMarginTop = 0;

        // Update compound bounds considering its label properties and set label margins for left and top
        if (CoSEConstants.NODE_DIMENSIONS_INCLUDE_LABELS) {

          var width = compoundNode.rect.width;
          var height = compoundNode.rect.height;

          if (compoundNode.labelWidth) {
            if (compoundNode.labelPosHorizontal == "left") {
              compoundNode.rect.x -= compoundNode.labelWidth;
              compoundNode.setWidth(width + compoundNode.labelWidth);
              compoundNode.labelMarginLeft = compoundNode.labelWidth;
            } else if (compoundNode.labelPosHorizontal == "center" && compoundNode.labelWidth > width) {
              compoundNode.rect.x -= (compoundNode.labelWidth - width) / 2;
              compoundNode.setWidth(compoundNode.labelWidth);
              compoundNode.labelMarginLeft = (compoundNode.labelWidth - width) / 2;
            } else if (compoundNode.labelPosHorizontal == "right") {
              compoundNode.setWidth(width + compoundNode.labelWidth);
            }
          }

          if (compoundNode.labelHeight) {
            if (compoundNode.labelPosVertical == "top") {
              compoundNode.rect.y -= compoundNode.labelHeight;
              compoundNode.setHeight(height + compoundNode.labelHeight);
              compoundNode.labelMarginTop = compoundNode.labelHeight;
            } else if (compoundNode.labelPosVertical == "center" && compoundNode.labelHeight > height) {
              compoundNode.rect.y -= (compoundNode.labelHeight - height) / 2;
              compoundNode.setHeight(compoundNode.labelHeight);
              compoundNode.labelMarginTop = (compoundNode.labelHeight - height) / 2;
            } else if (compoundNode.labelPosVertical == "bottom") {
              compoundNode.setHeight(height + compoundNode.labelHeight);
            }
          }
        }
      });
    };

    CoSELayout.prototype.tileNodes = function (nodes, minWidth) {
      var horizontalOrg = this.tileNodesByFavoringDim(nodes, minWidth, true);
      var verticalOrg = this.tileNodesByFavoringDim(nodes, minWidth, false);

      var horizontalRatio = this.getOrgRatio(horizontalOrg);
      var verticalRatio = this.getOrgRatio(verticalOrg);
      var bestOrg;

      // the best ratio is the one that is closer to 1 since the ratios are already normalized
      // and the best organization is the one that has the best ratio
      if (verticalRatio < horizontalRatio) {
        bestOrg = verticalOrg;
      } else {
        bestOrg = horizontalOrg;
      }

      return bestOrg;
    };

    // get the width/height ratio of the organization that is normalized so that it will not be less than 1
    CoSELayout.prototype.getOrgRatio = function (organization) {
      // get dimensions and calculate the initial ratio
      var width = organization.width;
      var height = organization.height;
      var ratio = width / height;

      // if the initial ratio is less then 1 then inverse it
      if (ratio < 1) {
        ratio = 1 / ratio;
      }

      // return the normalized ratio
      return ratio;
    };

    /*
     * Calculates the ideal width for the rows. This method assumes that
     * each node has the same sizes and calculates the ideal row width that
     * approximates a square shaped complex accordingly. However, since nodes would
     * have different sizes some rows would have different sizes and the resulting
     * shape would not be an exact square.
     */
    CoSELayout.prototype.calcIdealRowWidth = function (members, favorHorizontalDim) {
      // To approximate a square shaped complex we need to make complex width equal to complex height.
      // To achieve this we need to solve the following equation system for hc:
      // (x + bx) * hc - bx = (y + by) * vc - by, hc * vc = n
      // where x is the avarage width of the nodes, y is the avarage height of nodes
      // bx and by are the buffer sizes in horizontal and vertical dimensions accordingly,
      // hc and vc are the number of rows in horizontal and vertical dimensions
      // n is number of members.

      var verticalPadding = CoSEConstants.TILING_PADDING_VERTICAL;
      var horizontalPadding = CoSEConstants.TILING_PADDING_HORIZONTAL;

      // number of members
      var membersSize = members.length;

      // sum of the width of all members
      var totalWidth = 0;

      // sum of the height of all members
      var totalHeight = 0;

      var maxWidth = 0;

      // traverse all members to calculate total width and total height and get the maximum members width
      members.forEach(function (node) {
        totalWidth += node.getWidth();
        totalHeight += node.getHeight();

        if (node.getWidth() > maxWidth) {
          maxWidth = node.getWidth();
        }
      });

      // average width of the members
      var averageWidth = totalWidth / membersSize;

      // average height of the members
      var averageHeight = totalHeight / membersSize;

      // solving the initial equation system for the hc yields the following second degree equation:
      // hc^2 * (x+bx) + hc * (by - bx) - n * (y + by) = 0

      // the delta value to solve the equation above for hc
      var delta = Math.pow(verticalPadding - horizontalPadding, 2) + 4 * (averageWidth + horizontalPadding) * (averageHeight + verticalPadding) * membersSize;

      // solve the equation using delta value to calculate the horizontal count
      // that represents the number of nodes in an ideal row
      var horizontalCountDouble = (horizontalPadding - verticalPadding + Math.sqrt(delta)) / (2 * (averageWidth + horizontalPadding));
      // round the calculated horizontal count up or down according to the favored dimension
      var horizontalCount;

      if (favorHorizontalDim) {
        horizontalCount = Math.ceil(horizontalCountDouble);
        // if horizontalCount count is not a float value then both of rounding to floor and ceil
        // will yield the same values. Instead of repeating the same calculation try going up
        // while favoring horizontal dimension in such cases
        if (horizontalCount == horizontalCountDouble) {
          horizontalCount++;
        }
      } else {
        horizontalCount = Math.floor(horizontalCountDouble);
      }

      // ideal width to be calculated
      var idealWidth = horizontalCount * (averageWidth + horizontalPadding) - horizontalPadding;

      // if max width is bigger than calculated ideal width reset ideal width to it
      if (maxWidth > idealWidth) {
        idealWidth = maxWidth;
      }

      // add the left-right margins to the ideal row width
      idealWidth += horizontalPadding * 2;

      // return the ideal row width1
      return idealWidth;
    };

    CoSELayout.prototype.tileNodesByFavoringDim = function (nodes, minWidth, favorHorizontalDim) {
      var verticalPadding = CoSEConstants.TILING_PADDING_VERTICAL;
      var horizontalPadding = CoSEConstants.TILING_PADDING_HORIZONTAL;
      var tilingCompareBy = CoSEConstants.TILING_COMPARE_BY;
      var organization = {
        rows: [],
        rowWidth: [],
        rowHeight: [],
        width: 0,
        height: minWidth, // assume minHeight equals to minWidth
        verticalPadding: verticalPadding,
        horizontalPadding: horizontalPadding,
        centerX: 0,
        centerY: 0
      };

      if (tilingCompareBy) {
        organization.idealRowWidth = this.calcIdealRowWidth(nodes, favorHorizontalDim);
      }

      var getNodeArea = function getNodeArea(n) {
        return n.rect.width * n.rect.height;
      };

      var areaCompareFcn = function areaCompareFcn(n1, n2) {
        return getNodeArea(n2) - getNodeArea(n1);
      };

      // Sort the nodes in descending order of their areas
      nodes.sort(function (n1, n2) {
        var cmpBy = areaCompareFcn;
        if (organization.idealRowWidth) {
          cmpBy = tilingCompareBy;
          return cmpBy(n1.id, n2.id);
        }
        return cmpBy(n1, n2);
      });

      // Create the organization -> calculate compound center
      var sumCenterX = 0;
      var sumCenterY = 0;
      for (var i = 0; i < nodes.length; i++) {
        var lNode = nodes[i];

        sumCenterX += lNode.getCenterX();
        sumCenterY += lNode.getCenterY();
      }

      organization.centerX = sumCenterX / nodes.length;
      organization.centerY = sumCenterY / nodes.length;

      // Create the organization -> tile members
      for (var i = 0; i < nodes.length; i++) {
        var lNode = nodes[i];

        if (organization.rows.length == 0) {
          this.insertNodeToRow(organization, lNode, 0, minWidth);
        } else if (this.canAddHorizontal(organization, lNode.rect.width, lNode.rect.height)) {
          var rowIndex = organization.rows.length - 1;
          if (!organization.idealRowWidth) {
            rowIndex = this.getShortestRowIndex(organization);
          }
          this.insertNodeToRow(organization, lNode, rowIndex, minWidth);
        } else {
          this.insertNodeToRow(organization, lNode, organization.rows.length, minWidth);
        }

        this.shiftToLastRow(organization);
      }

      return organization;
    };

    CoSELayout.prototype.insertNodeToRow = function (organization, node, rowIndex, minWidth) {
      var minCompoundSize = minWidth;

      // Add new row if needed
      if (rowIndex == organization.rows.length) {
        var secondDimension = [];

        organization.rows.push(secondDimension);
        organization.rowWidth.push(minCompoundSize);
        organization.rowHeight.push(0);
      }

      // Update row width
      var w = organization.rowWidth[rowIndex] + node.rect.width;

      if (organization.rows[rowIndex].length > 0) {
        w += organization.horizontalPadding;
      }

      organization.rowWidth[rowIndex] = w;
      // Update compound width
      if (organization.width < w) {
        organization.width = w;
      }

      // Update height
      var h = node.rect.height;
      if (rowIndex > 0) h += organization.verticalPadding;

      var extraHeight = 0;
      if (h > organization.rowHeight[rowIndex]) {
        extraHeight = organization.rowHeight[rowIndex];
        organization.rowHeight[rowIndex] = h;
        extraHeight = organization.rowHeight[rowIndex] - extraHeight;
      }

      organization.height += extraHeight;

      // Insert node
      organization.rows[rowIndex].push(node);
    };

    //Scans the rows of an organization and returns the one with the min width
    CoSELayout.prototype.getShortestRowIndex = function (organization) {
      var r = -1;
      var min = Number.MAX_VALUE;

      for (var i = 0; i < organization.rows.length; i++) {
        if (organization.rowWidth[i] < min) {
          r = i;
          min = organization.rowWidth[i];
        }
      }
      return r;
    };

    //Scans the rows of an organization and returns the one with the max width
    CoSELayout.prototype.getLongestRowIndex = function (organization) {
      var r = -1;
      var max = Number.MIN_VALUE;

      for (var i = 0; i < organization.rows.length; i++) {

        if (organization.rowWidth[i] > max) {
          r = i;
          max = organization.rowWidth[i];
        }
      }

      return r;
    };

    /**
    * This method checks whether adding extra width to the organization violates
    * the aspect ratio(1) or not.
    */
    CoSELayout.prototype.canAddHorizontal = function (organization, extraWidth, extraHeight) {

      // if there is an ideal row width specified use it instead of checking the aspect ratio
      if (organization.idealRowWidth) {
        var lastRowIndex = organization.rows.length - 1;
        var lastRowWidth = organization.rowWidth[lastRowIndex];

        // check and return if ideal row width will be exceed if the node is added to the row
        return lastRowWidth + extraWidth + organization.horizontalPadding <= organization.idealRowWidth;
      }

      var sri = this.getShortestRowIndex(organization);

      if (sri < 0) {
        return true;
      }

      var min = organization.rowWidth[sri];

      if (min + organization.horizontalPadding + extraWidth <= organization.width) return true;

      var hDiff = 0;

      // Adding to an existing row
      if (organization.rowHeight[sri] < extraHeight) {
        if (sri > 0) hDiff = extraHeight + organization.verticalPadding - organization.rowHeight[sri];
      }

      var add_to_row_ratio;
      if (organization.width - min >= extraWidth + organization.horizontalPadding) {
        add_to_row_ratio = (organization.height + hDiff) / (min + extraWidth + organization.horizontalPadding);
      } else {
        add_to_row_ratio = (organization.height + hDiff) / organization.width;
      }

      // Adding a new row for this node
      hDiff = extraHeight + organization.verticalPadding;
      var add_new_row_ratio;
      if (organization.width < extraWidth) {
        add_new_row_ratio = (organization.height + hDiff) / extraWidth;
      } else {
        add_new_row_ratio = (organization.height + hDiff) / organization.width;
      }

      if (add_new_row_ratio < 1) add_new_row_ratio = 1 / add_new_row_ratio;

      if (add_to_row_ratio < 1) add_to_row_ratio = 1 / add_to_row_ratio;

      return add_to_row_ratio < add_new_row_ratio;
    };

    //If moving the last node from the longest row and adding it to the last
    //row makes the bounding box smaller, do it.
    CoSELayout.prototype.shiftToLastRow = function (organization) {
      var longest = this.getLongestRowIndex(organization);
      var last = organization.rowWidth.length - 1;
      var row = organization.rows[longest];
      var node = row[row.length - 1];

      var diff = node.width + organization.horizontalPadding;

      // Check if there is enough space on the last row
      if (organization.width - organization.rowWidth[last] > diff && longest != last) {
        // Remove the last element of the longest row
        row.splice(-1, 1);

        // Push it to the last row
        organization.rows[last].push(node);

        organization.rowWidth[longest] = organization.rowWidth[longest] - diff;
        organization.rowWidth[last] = organization.rowWidth[last] + diff;
        organization.width = organization.rowWidth[instance.getLongestRowIndex(organization)];

        // Update heights of the organization
        var maxHeight = Number.MIN_VALUE;
        for (var i = 0; i < row.length; i++) {
          if (row[i].height > maxHeight) maxHeight = row[i].height;
        }
        if (longest > 0) maxHeight += organization.verticalPadding;

        var prevTotal = organization.rowHeight[longest] + organization.rowHeight[last];

        organization.rowHeight[longest] = maxHeight;
        if (organization.rowHeight[last] < node.height + organization.verticalPadding) organization.rowHeight[last] = node.height + organization.verticalPadding;

        var finalTotal = organization.rowHeight[longest] + organization.rowHeight[last];
        organization.height += finalTotal - prevTotal;

        this.shiftToLastRow(organization);
      }
    };

    CoSELayout.prototype.tilingPreLayout = function () {
      if (CoSEConstants.TILE) {
        // Find zero degree nodes and create a compound for each level
        this.groupZeroDegreeMembers();
        // Tile and clear children of each compound
        this.clearCompounds();
        // Separately tile and clear zero degree nodes for each level
        this.clearZeroDegreeMembers();
      }
    };

    CoSELayout.prototype.tilingPostLayout = function () {
      if (CoSEConstants.TILE) {
        this.repopulateZeroDegreeMembers();
        this.repopulateCompounds();
      }
    };

    // -----------------------------------------------------------------------------
    // Section: Tree Reduction methods
    // -----------------------------------------------------------------------------
    // Reduce trees 
    CoSELayout.prototype.reduceTrees = function () {
      var prunedNodesAll = [];
      var containsLeaf = true;
      var node;

      while (containsLeaf) {
        var allNodes = this.graphManager.getAllNodes();
        var prunedNodesInStepTemp = [];
        containsLeaf = false;

        for (var i = 0; i < allNodes.length; i++) {
          node = allNodes[i];
          if (node.getEdges().length == 1 && !node.getEdges()[0].isInterGraph && node.getChild() == null) {
            if (CoSEConstants.PURE_INCREMENTAL) {
              var otherEnd = node.getEdges()[0].getOtherEnd(node);
              var relativePosition = new DimensionD(node.getCenterX() - otherEnd.getCenterX(), node.getCenterY() - otherEnd.getCenterY());
              prunedNodesInStepTemp.push([node, node.getEdges()[0], node.getOwner(), relativePosition]);
            } else {
              prunedNodesInStepTemp.push([node, node.getEdges()[0], node.getOwner()]);
            }
            containsLeaf = true;
          }
        }
        if (containsLeaf == true) {
          var prunedNodesInStep = [];
          for (var j = 0; j < prunedNodesInStepTemp.length; j++) {
            if (prunedNodesInStepTemp[j][0].getEdges().length == 1) {
              prunedNodesInStep.push(prunedNodesInStepTemp[j]);
              prunedNodesInStepTemp[j][0].getOwner().remove(prunedNodesInStepTemp[j][0]);
            }
          }
          prunedNodesAll.push(prunedNodesInStep);
          this.graphManager.resetAllNodes();
          this.graphManager.resetAllEdges();
        }
      }
      this.prunedNodesAll = prunedNodesAll;
    };

    // Grow tree one step 
    CoSELayout.prototype.growTree = function (prunedNodesAll) {
      var lengthOfPrunedNodesInStep = prunedNodesAll.length;
      var prunedNodesInStep = prunedNodesAll[lengthOfPrunedNodesInStep - 1];

      var nodeData;
      for (var i = 0; i < prunedNodesInStep.length; i++) {
        nodeData = prunedNodesInStep[i];

        this.findPlaceforPrunedNode(nodeData);

        nodeData[2].add(nodeData[0]);
        nodeData[2].add(nodeData[1], nodeData[1].source, nodeData[1].target);
      }

      prunedNodesAll.splice(prunedNodesAll.length - 1, 1);
      this.graphManager.resetAllNodes();
      this.graphManager.resetAllEdges();
    };

    // Find an appropriate position to replace pruned node, this method can be improved
    CoSELayout.prototype.findPlaceforPrunedNode = function (nodeData) {

      var gridForPrunedNode;
      var nodeToConnect;
      var prunedNode = nodeData[0];
      if (prunedNode == nodeData[1].source) {
        nodeToConnect = nodeData[1].target;
      } else {
        nodeToConnect = nodeData[1].source;
      }

      if (CoSEConstants.PURE_INCREMENTAL) {
        prunedNode.setCenter(nodeToConnect.getCenterX() + nodeData[3].getWidth(), nodeToConnect.getCenterY() + nodeData[3].getHeight());
      } else {
        var startGridX = nodeToConnect.startX;
        var finishGridX = nodeToConnect.finishX;
        var startGridY = nodeToConnect.startY;
        var finishGridY = nodeToConnect.finishY;

        var upNodeCount = 0;
        var downNodeCount = 0;
        var rightNodeCount = 0;
        var leftNodeCount = 0;
        var controlRegions = [upNodeCount, rightNodeCount, downNodeCount, leftNodeCount];

        if (startGridY > 0) {
          for (var i = startGridX; i <= finishGridX; i++) {
            controlRegions[0] += this.grid[i][startGridY - 1].length + this.grid[i][startGridY].length - 1;
          }
        }
        if (finishGridX < this.grid.length - 1) {
          for (var i = startGridY; i <= finishGridY; i++) {
            controlRegions[1] += this.grid[finishGridX + 1][i].length + this.grid[finishGridX][i].length - 1;
          }
        }
        if (finishGridY < this.grid[0].length - 1) {
          for (var i = startGridX; i <= finishGridX; i++) {
            controlRegions[2] += this.grid[i][finishGridY + 1].length + this.grid[i][finishGridY].length - 1;
          }
        }
        if (startGridX > 0) {
          for (var i = startGridY; i <= finishGridY; i++) {
            controlRegions[3] += this.grid[startGridX - 1][i].length + this.grid[startGridX][i].length - 1;
          }
        }
        var min = Integer.MAX_VALUE;
        var minCount;
        var minIndex;
        for (var j = 0; j < controlRegions.length; j++) {
          if (controlRegions[j] < min) {
            min = controlRegions[j];
            minCount = 1;
            minIndex = j;
          } else if (controlRegions[j] == min) {
            minCount++;
          }
        }

        if (minCount == 3 && min == 0) {
          if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[2] == 0) {
            gridForPrunedNode = 1;
          } else if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[3] == 0) {
            gridForPrunedNode = 0;
          } else if (controlRegions[0] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {
            gridForPrunedNode = 3;
          } else if (controlRegions[1] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {
            gridForPrunedNode = 2;
          }
        } else if (minCount == 2 && min == 0) {
          var random = Math.floor(Math.random() * 2);
          if (controlRegions[0] == 0 && controlRegions[1] == 0) {
            if (random == 0) {
              gridForPrunedNode = 0;
            } else {
              gridForPrunedNode = 1;
            }
          } else if (controlRegions[0] == 0 && controlRegions[2] == 0) {
            if (random == 0) {
              gridForPrunedNode = 0;
            } else {
              gridForPrunedNode = 2;
            }
          } else if (controlRegions[0] == 0 && controlRegions[3] == 0) {
            if (random == 0) {
              gridForPrunedNode = 0;
            } else {
              gridForPrunedNode = 3;
            }
          } else if (controlRegions[1] == 0 && controlRegions[2] == 0) {
            if (random == 0) {
              gridForPrunedNode = 1;
            } else {
              gridForPrunedNode = 2;
            }
          } else if (controlRegions[1] == 0 && controlRegions[3] == 0) {
            if (random == 0) {
              gridForPrunedNode = 1;
            } else {
              gridForPrunedNode = 3;
            }
          } else {
            if (random == 0) {
              gridForPrunedNode = 2;
            } else {
              gridForPrunedNode = 3;
            }
          }
        } else if (minCount == 4 && min == 0) {
          var random = Math.floor(Math.random() * 4);
          gridForPrunedNode = random;
        } else {
          gridForPrunedNode = minIndex;
        }

        if (gridForPrunedNode == 0) {
          prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() - nodeToConnect.getHeight() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getHeight() / 2);
        } else if (gridForPrunedNode == 1) {
          prunedNode.setCenter(nodeToConnect.getCenterX() + nodeToConnect.getWidth() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getWidth() / 2, nodeToConnect.getCenterY());
        } else if (gridForPrunedNode == 2) {
          prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() + nodeToConnect.getHeight() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getHeight() / 2);
        } else {
          prunedNode.setCenter(nodeToConnect.getCenterX() - nodeToConnect.getWidth() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getWidth() / 2, nodeToConnect.getCenterY());
        }
      }
    };

    module.exports = CoSELayout;

    /***/ }),

    /***/ 991:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {



    var FDLayoutNode = __webpack_require__(551).FDLayoutNode;
    var IMath = __webpack_require__(551).IMath;

    function CoSENode(gm, loc, size, vNode) {
      FDLayoutNode.call(this, gm, loc, size, vNode);
    }

    CoSENode.prototype = Object.create(FDLayoutNode.prototype);
    for (var prop in FDLayoutNode) {
      CoSENode[prop] = FDLayoutNode[prop];
    }

    CoSENode.prototype.calculateDisplacement = function () {
      var layout = this.graphManager.getLayout();
      // this check is for compound nodes that contain fixed nodes
      if (this.getChild() != null && this.fixedNodeWeight) {
        this.displacementX += layout.coolingFactor * (this.springForceX + this.repulsionForceX + this.gravitationForceX) / this.fixedNodeWeight;
        this.displacementY += layout.coolingFactor * (this.springForceY + this.repulsionForceY + this.gravitationForceY) / this.fixedNodeWeight;
      } else {
        this.displacementX += layout.coolingFactor * (this.springForceX + this.repulsionForceX + this.gravitationForceX) / this.noOfChildren;
        this.displacementY += layout.coolingFactor * (this.springForceY + this.repulsionForceY + this.gravitationForceY) / this.noOfChildren;
      }

      if (Math.abs(this.displacementX) > layout.coolingFactor * layout.maxNodeDisplacement) {
        this.displacementX = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementX);
      }

      if (Math.abs(this.displacementY) > layout.coolingFactor * layout.maxNodeDisplacement) {
        this.displacementY = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementY);
      }

      // non-empty compound node, propogate movement to children as well
      if (this.child && this.child.getNodes().length > 0) {
        this.propogateDisplacementToChildren(this.displacementX, this.displacementY);
      }
    };

    CoSENode.prototype.propogateDisplacementToChildren = function (dX, dY) {
      var nodes = this.getChild().getNodes();
      var node;
      for (var i = 0; i < nodes.length; i++) {
        node = nodes[i];
        if (node.getChild() == null) {
          node.displacementX += dX;
          node.displacementY += dY;
        } else {
          node.propogateDisplacementToChildren(dX, dY);
        }
      }
    };

    CoSENode.prototype.move = function () {
      var layout = this.graphManager.getLayout();

      // a simple node or an empty compound node, move it
      if (this.child == null || this.child.getNodes().length == 0) {
        this.moveBy(this.displacementX, this.displacementY);

        layout.totalDisplacement += Math.abs(this.displacementX) + Math.abs(this.displacementY);
      }

      this.springForceX = 0;
      this.springForceY = 0;
      this.repulsionForceX = 0;
      this.repulsionForceY = 0;
      this.gravitationForceX = 0;
      this.gravitationForceY = 0;
      this.displacementX = 0;
      this.displacementY = 0;
    };

    CoSENode.prototype.setPred1 = function (pred1) {
      this.pred1 = pred1;
    };

    CoSENode.prototype.getPred1 = function () {
      return pred1;
    };

    CoSENode.prototype.getPred2 = function () {
      return pred2;
    };

    CoSENode.prototype.setNext = function (next) {
      this.next = next;
    };

    CoSENode.prototype.getNext = function () {
      return next;
    };

    CoSENode.prototype.setProcessed = function (processed) {
      this.processed = processed;
    };

    CoSENode.prototype.isProcessed = function () {
      return processed;
    };

    module.exports = CoSENode;

    /***/ }),

    /***/ 902:
    /***/ ((module, __unused_webpack_exports, __webpack_require__) => {



    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

    var CoSEConstants = __webpack_require__(806);
    var LinkedList = __webpack_require__(551).LinkedList;
    var Matrix = __webpack_require__(551).Matrix;
    var SVD = __webpack_require__(551).SVD;

    function ConstraintHandler() {}

    ConstraintHandler.handleConstraints = function (layout) {
      //  let layout = this.graphManager.getLayout();

      // get constraints from layout
      var constraints = {};
      constraints.fixedNodeConstraint = layout.constraints.fixedNodeConstraint;
      constraints.alignmentConstraint = layout.constraints.alignmentConstraint;
      constraints.relativePlacementConstraint = layout.constraints.relativePlacementConstraint;

      var idToNodeMap = new Map();
      var nodeIndexes = new Map();
      var xCoords = [];
      var yCoords = [];

      var allNodes = layout.getAllNodes();
      var index = 0;
      // fill index map and coordinates
      for (var i = 0; i < allNodes.length; i++) {
        var node = allNodes[i];
        if (node.getChild() == null) {
          nodeIndexes.set(node.id, index++);
          xCoords.push(node.getCenterX());
          yCoords.push(node.getCenterY());
          idToNodeMap.set(node.id, node);
        }
      }

      // if there exists relative placement constraint without gap value, set it to default 
      if (constraints.relativePlacementConstraint) {
        constraints.relativePlacementConstraint.forEach(function (constraint) {
          if (!constraint.gap && constraint.gap != 0) {
            if (constraint.left) {
              constraint.gap = CoSEConstants.DEFAULT_EDGE_LENGTH + idToNodeMap.get(constraint.left).getWidth() / 2 + idToNodeMap.get(constraint.right).getWidth() / 2;
            } else {
              constraint.gap = CoSEConstants.DEFAULT_EDGE_LENGTH + idToNodeMap.get(constraint.top).getHeight() / 2 + idToNodeMap.get(constraint.bottom).getHeight() / 2;
            }
          }
        });
      }

      /* auxiliary functions */

      // calculate difference between two position objects
      var calculatePositionDiff = function calculatePositionDiff(pos1, pos2) {
        return { x: pos1.x - pos2.x, y: pos1.y - pos2.y };
      };

      // calculate average position of the nodes
      var calculateAvgPosition = function calculateAvgPosition(nodeIdSet) {
        var xPosSum = 0;
        var yPosSum = 0;
        nodeIdSet.forEach(function (nodeId) {
          xPosSum += xCoords[nodeIndexes.get(nodeId)];
          yPosSum += yCoords[nodeIndexes.get(nodeId)];
        });

        return { x: xPosSum / nodeIdSet.size, y: yPosSum / nodeIdSet.size };
      };

      // find an appropriate positioning for the nodes in a given graph according to relative placement constraints
      // this function also takes the fixed nodes and alignment constraints into account
      // graph: dag to be evaluated, direction: "horizontal" or "vertical", 
      // fixedNodes: set of fixed nodes to consider during evaluation, dummyPositions: appropriate coordinates of the dummy nodes  
      var findAppropriatePositionForRelativePlacement = function findAppropriatePositionForRelativePlacement(graph, direction, fixedNodes, dummyPositions, componentSources) {

        // find union of two sets
        function setUnion(setA, setB) {
          var union = new Set(setA);
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = setB[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var elem = _step.value;

              union.add(elem);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          return union;
        }

        // find indegree count for each node
        var inDegrees = new Map();

        graph.forEach(function (value, key) {
          inDegrees.set(key, 0);
        });
        graph.forEach(function (value, key) {
          value.forEach(function (adjacent) {
            inDegrees.set(adjacent.id, inDegrees.get(adjacent.id) + 1);
          });
        });

        var positionMap = new Map(); // keeps the position for each node
        var pastMap = new Map(); // keeps the predecessors(past) of a node
        var queue = new LinkedList();
        inDegrees.forEach(function (value, key) {
          if (value == 0) {
            queue.push(key);
            if (!fixedNodes) {
              if (direction == "horizontal") {
                positionMap.set(key, nodeIndexes.has(key) ? xCoords[nodeIndexes.get(key)] : dummyPositions.get(key));
              } else {
                positionMap.set(key, nodeIndexes.has(key) ? yCoords[nodeIndexes.get(key)] : dummyPositions.get(key));
              }
            }
          } else {
            positionMap.set(key, Number.NEGATIVE_INFINITY);
          }
          if (fixedNodes) {
            pastMap.set(key, new Set([key]));
          }
        });

        // align sources of each component in enforcement phase
        if (fixedNodes) {
          componentSources.forEach(function (component) {
            var fixedIds = [];
            component.forEach(function (nodeId) {
              if (fixedNodes.has(nodeId)) {
                fixedIds.push(nodeId);
              }
            });
            if (fixedIds.length > 0) {
              var position = 0;
              fixedIds.forEach(function (fixedId) {
                if (direction == "horizontal") {
                  positionMap.set(fixedId, nodeIndexes.has(fixedId) ? xCoords[nodeIndexes.get(fixedId)] : dummyPositions.get(fixedId));
                  position += positionMap.get(fixedId);
                } else {
                  positionMap.set(fixedId, nodeIndexes.has(fixedId) ? yCoords[nodeIndexes.get(fixedId)] : dummyPositions.get(fixedId));
                  position += positionMap.get(fixedId);
                }
              });
              position = position / fixedIds.length;
              component.forEach(function (nodeId) {
                if (!fixedNodes.has(nodeId)) {
                  positionMap.set(nodeId, position);
                }
              });
            } else {
              var _position = 0;
              component.forEach(function (nodeId) {
                if (direction == "horizontal") {
                  _position += nodeIndexes.has(nodeId) ? xCoords[nodeIndexes.get(nodeId)] : dummyPositions.get(nodeId);
                } else {
                  _position += nodeIndexes.has(nodeId) ? yCoords[nodeIndexes.get(nodeId)] : dummyPositions.get(nodeId);
                }
              });
              _position = _position / component.length;
              component.forEach(function (nodeId) {
                positionMap.set(nodeId, _position);
              });
            }
          });
        }

        // calculate positions of the nodes

        var _loop = function _loop() {
          var currentNode = queue.shift();
          var neighbors = graph.get(currentNode);
          neighbors.forEach(function (neighbor) {
            if (positionMap.get(neighbor.id) < positionMap.get(currentNode) + neighbor.gap) {
              if (fixedNodes && fixedNodes.has(neighbor.id)) {
                var fixedPosition = void 0;
                if (direction == "horizontal") {
                  fixedPosition = nodeIndexes.has(neighbor.id) ? xCoords[nodeIndexes.get(neighbor.id)] : dummyPositions.get(neighbor.id);
                } else {
                  fixedPosition = nodeIndexes.has(neighbor.id) ? yCoords[nodeIndexes.get(neighbor.id)] : dummyPositions.get(neighbor.id);
                }
                positionMap.set(neighbor.id, fixedPosition); // TODO: may do unnecessary work
                if (fixedPosition < positionMap.get(currentNode) + neighbor.gap) {
                  var diff = positionMap.get(currentNode) + neighbor.gap - fixedPosition;
                  pastMap.get(currentNode).forEach(function (nodeId) {
                    positionMap.set(nodeId, positionMap.get(nodeId) - diff);
                  });
                }
              } else {
                positionMap.set(neighbor.id, positionMap.get(currentNode) + neighbor.gap);
              }
            }
            inDegrees.set(neighbor.id, inDegrees.get(neighbor.id) - 1);
            if (inDegrees.get(neighbor.id) == 0) {
              queue.push(neighbor.id);
            }
            if (fixedNodes) {
              pastMap.set(neighbor.id, setUnion(pastMap.get(currentNode), pastMap.get(neighbor.id)));
            }
          });
        };

        while (queue.length != 0) {
          _loop();
        }

        // readjust position of the nodes after enforcement
        if (fixedNodes) {
          // find indegree count for each node
          var sinkNodes = new Set();

          graph.forEach(function (value, key) {
            if (value.length == 0) {
              sinkNodes.add(key);
            }
          });

          var _components = [];
          pastMap.forEach(function (value, key) {
            if (sinkNodes.has(key)) {
              var isFixedComponent = false;
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = value[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var nodeId = _step2.value;

                  if (fixedNodes.has(nodeId)) {
                    isFixedComponent = true;
                  }
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }

              if (!isFixedComponent) {
                var isExist = false;
                var existAt = void 0;
                _components.forEach(function (component, index) {
                  if (component.has([].concat(_toConsumableArray(value))[0])) {
                    isExist = true;
                    existAt = index;
                  }
                });
                if (!isExist) {
                  _components.push(new Set(value));
                } else {
                  value.forEach(function (ele) {
                    _components[existAt].add(ele);
                  });
                }
              }
            }
          });

          _components.forEach(function (component, index) {
            var minBefore = Number.POSITIVE_INFINITY;
            var minAfter = Number.POSITIVE_INFINITY;
            var maxBefore = Number.NEGATIVE_INFINITY;
            var maxAfter = Number.NEGATIVE_INFINITY;

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              for (var _iterator3 = component[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var nodeId = _step3.value;

                var posBefore = void 0;
                if (direction == "horizontal") {
                  posBefore = nodeIndexes.has(nodeId) ? xCoords[nodeIndexes.get(nodeId)] : dummyPositions.get(nodeId);
                } else {
                  posBefore = nodeIndexes.has(nodeId) ? yCoords[nodeIndexes.get(nodeId)] : dummyPositions.get(nodeId);
                }
                var posAfter = positionMap.get(nodeId);
                if (posBefore < minBefore) {
                  minBefore = posBefore;
                }
                if (posBefore > maxBefore) {
                  maxBefore = posBefore;
                }
                if (posAfter < minAfter) {
                  minAfter = posAfter;
                }
                if (posAfter > maxAfter) {
                  maxAfter = posAfter;
                }
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }

            var diff = (minBefore + maxBefore) / 2 - (minAfter + maxAfter) / 2;

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = component[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var _nodeId = _step4.value;

                positionMap.set(_nodeId, positionMap.get(_nodeId) + diff);
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                  _iterator4.return();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }
          });
        }

        return positionMap;
      };

      // find transformation based on rel. placement constraints if there are both alignment and rel. placement constraints
      // or if there are only rel. placement contraints where the largest component isn't sufficiently large
      var applyReflectionForRelativePlacement = function applyReflectionForRelativePlacement(relativePlacementConstraints) {
        // variables to count votes
        var reflectOnY = 0,
            notReflectOnY = 0;
        var reflectOnX = 0,
            notReflectOnX = 0;

        relativePlacementConstraints.forEach(function (constraint) {
          if (constraint.left) {
            xCoords[nodeIndexes.get(constraint.left)] - xCoords[nodeIndexes.get(constraint.right)] >= 0 ? reflectOnY++ : notReflectOnY++;
          } else {
            yCoords[nodeIndexes.get(constraint.top)] - yCoords[nodeIndexes.get(constraint.bottom)] >= 0 ? reflectOnX++ : notReflectOnX++;
          }
        });

        if (reflectOnY > notReflectOnY && reflectOnX > notReflectOnX) {
          for (var _i = 0; _i < nodeIndexes.size; _i++) {
            xCoords[_i] = -1 * xCoords[_i];
            yCoords[_i] = -1 * yCoords[_i];
          }
        } else if (reflectOnY > notReflectOnY) {
          for (var _i2 = 0; _i2 < nodeIndexes.size; _i2++) {
            xCoords[_i2] = -1 * xCoords[_i2];
          }
        } else if (reflectOnX > notReflectOnX) {
          for (var _i3 = 0; _i3 < nodeIndexes.size; _i3++) {
            yCoords[_i3] = -1 * yCoords[_i3];
          }
        }
      };

      // find weakly connected components in undirected graph
      var findComponents = function findComponents(graph) {
        // find weakly connected components in dag
        var components = [];
        var queue = new LinkedList();
        var visited = new Set();
        var count = 0;

        graph.forEach(function (value, key) {
          if (!visited.has(key)) {
            components[count] = [];
            var _currentNode = key;
            queue.push(_currentNode);
            visited.add(_currentNode);
            components[count].push(_currentNode);

            while (queue.length != 0) {
              _currentNode = queue.shift();
              var neighbors = graph.get(_currentNode);
              neighbors.forEach(function (neighbor) {
                if (!visited.has(neighbor.id)) {
                  queue.push(neighbor.id);
                  visited.add(neighbor.id);
                  components[count].push(neighbor.id);
                }
              });
            }
            count++;
          }
        });
        return components;
      };

      // return undirected version of given dag
      var dagToUndirected = function dagToUndirected(dag) {
        var undirected = new Map();

        dag.forEach(function (value, key) {
          undirected.set(key, []);
        });

        dag.forEach(function (value, key) {
          value.forEach(function (adjacent) {
            undirected.get(key).push(adjacent);
            undirected.get(adjacent.id).push({ id: key, gap: adjacent.gap, direction: adjacent.direction });
          });
        });

        return undirected;
      };

      // return reversed (directions inverted) version of given dag
      var dagToReversed = function dagToReversed(dag) {
        var reversed = new Map();

        dag.forEach(function (value, key) {
          reversed.set(key, []);
        });

        dag.forEach(function (value, key) {
          value.forEach(function (adjacent) {
            reversed.get(adjacent.id).push({ id: key, gap: adjacent.gap, direction: adjacent.direction });
          });
        });

        return reversed;
      };

      /****  apply transformation to the initial draft layout to better align with constrained nodes ****/
      // solve the Orthogonal Procrustean Problem to rotate and/or reflect initial draft layout
      // here we follow the solution in Chapter 20.2 of Borg, I. & Groenen, P. (2005) Modern Multidimensional Scaling: Theory and Applications 

      /* construct source and target configurations */

      var targetMatrix = []; // A - target configuration
      var sourceMatrix = []; // B - source configuration 
      var standardTransformation = false; // false for no transformation, true for standart (Procrustes) transformation (rotation and/or reflection)
      var reflectionType = false; // false/true for reflection check, 'reflectOnX', 'reflectOnY' or 'reflectOnBoth' for reflection type if necessary
      var fixedNodes = new Set();
      var dag = new Map(); // adjacency list to keep directed acyclic graph (dag) that consists of relative placement constraints
      var dagUndirected = new Map(); // undirected version of the dag
      var components = []; // weakly connected components

      // fill fixedNodes collection to use later
      if (constraints.fixedNodeConstraint) {
        constraints.fixedNodeConstraint.forEach(function (nodeData) {
          fixedNodes.add(nodeData.nodeId);
        });
      }

      // construct dag from relative placement constraints 
      if (constraints.relativePlacementConstraint) {
        // construct both directed and undirected version of the dag
        constraints.relativePlacementConstraint.forEach(function (constraint) {
          if (constraint.left) {
            if (dag.has(constraint.left)) {
              dag.get(constraint.left).push({ id: constraint.right, gap: constraint.gap, direction: "horizontal" });
            } else {
              dag.set(constraint.left, [{ id: constraint.right, gap: constraint.gap, direction: "horizontal" }]);
            }
            if (!dag.has(constraint.right)) {
              dag.set(constraint.right, []);
            }
          } else {
            if (dag.has(constraint.top)) {
              dag.get(constraint.top).push({ id: constraint.bottom, gap: constraint.gap, direction: "vertical" });
            } else {
              dag.set(constraint.top, [{ id: constraint.bottom, gap: constraint.gap, direction: "vertical" }]);
            }
            if (!dag.has(constraint.bottom)) {
              dag.set(constraint.bottom, []);
            }
          }
        });

        dagUndirected = dagToUndirected(dag);
        components = findComponents(dagUndirected);
      }

      if (CoSEConstants.TRANSFORM_ON_CONSTRAINT_HANDLING) {
        // first check fixed node constraint
        if (constraints.fixedNodeConstraint && constraints.fixedNodeConstraint.length > 1) {
          constraints.fixedNodeConstraint.forEach(function (nodeData, i) {
            targetMatrix[i] = [nodeData.position.x, nodeData.position.y];
            sourceMatrix[i] = [xCoords[nodeIndexes.get(nodeData.nodeId)], yCoords[nodeIndexes.get(nodeData.nodeId)]];
          });
          standardTransformation = true;
        } else if (constraints.alignmentConstraint) {
          (function () {
            // then check alignment constraint
            var count = 0;
            if (constraints.alignmentConstraint.vertical) {
              var verticalAlign = constraints.alignmentConstraint.vertical;

              var _loop2 = function _loop2(_i4) {
                var alignmentSet = new Set();
                verticalAlign[_i4].forEach(function (nodeId) {
                  alignmentSet.add(nodeId);
                });
                var intersection = new Set([].concat(_toConsumableArray(alignmentSet)).filter(function (x) {
                  return fixedNodes.has(x);
                }));
                var xPos = void 0;
                if (intersection.size > 0) xPos = xCoords[nodeIndexes.get(intersection.values().next().value)];else xPos = calculateAvgPosition(alignmentSet).x;

                verticalAlign[_i4].forEach(function (nodeId) {
                  targetMatrix[count] = [xPos, yCoords[nodeIndexes.get(nodeId)]];
                  sourceMatrix[count] = [xCoords[nodeIndexes.get(nodeId)], yCoords[nodeIndexes.get(nodeId)]];
                  count++;
                });
              };

              for (var _i4 = 0; _i4 < verticalAlign.length; _i4++) {
                _loop2(_i4);
              }
              standardTransformation = true;
            }
            if (constraints.alignmentConstraint.horizontal) {
              var horizontalAlign = constraints.alignmentConstraint.horizontal;

              var _loop3 = function _loop3(_i5) {
                var alignmentSet = new Set();
                horizontalAlign[_i5].forEach(function (nodeId) {
                  alignmentSet.add(nodeId);
                });
                var intersection = new Set([].concat(_toConsumableArray(alignmentSet)).filter(function (x) {
                  return fixedNodes.has(x);
                }));
                var yPos = void 0;
                if (intersection.size > 0) yPos = xCoords[nodeIndexes.get(intersection.values().next().value)];else yPos = calculateAvgPosition(alignmentSet).y;

                horizontalAlign[_i5].forEach(function (nodeId) {
                  targetMatrix[count] = [xCoords[nodeIndexes.get(nodeId)], yPos];
                  sourceMatrix[count] = [xCoords[nodeIndexes.get(nodeId)], yCoords[nodeIndexes.get(nodeId)]];
                  count++;
                });
              };

              for (var _i5 = 0; _i5 < horizontalAlign.length; _i5++) {
                _loop3(_i5);
              }
              standardTransformation = true;
            }
            if (constraints.relativePlacementConstraint) {
              reflectionType = true;
            }
          })();
        } else if (constraints.relativePlacementConstraint) {
          // finally check relative placement constraint
          // find largest component in dag
          var largestComponentSize = 0;
          var largestComponentIndex = 0;
          for (var _i6 = 0; _i6 < components.length; _i6++) {
            if (components[_i6].length > largestComponentSize) {
              largestComponentSize = components[_i6].length;
              largestComponentIndex = _i6;
            }
          }
          // if largest component isn't dominant, then take the votes for reflection
          if (largestComponentSize < dagUndirected.size / 2) {
            applyReflectionForRelativePlacement(constraints.relativePlacementConstraint);
            standardTransformation = false;
            reflectionType = false;
          } else {
            // use largest component for transformation
            // construct horizontal and vertical subgraphs in the largest component
            var subGraphOnHorizontal = new Map();
            var subGraphOnVertical = new Map();
            var constraintsInlargestComponent = [];

            components[largestComponentIndex].forEach(function (nodeId) {
              dag.get(nodeId).forEach(function (adjacent) {
                if (adjacent.direction == "horizontal") {
                  if (subGraphOnHorizontal.has(nodeId)) {
                    subGraphOnHorizontal.get(nodeId).push(adjacent);
                  } else {
                    subGraphOnHorizontal.set(nodeId, [adjacent]);
                  }
                  if (!subGraphOnHorizontal.has(adjacent.id)) {
                    subGraphOnHorizontal.set(adjacent.id, []);
                  }
                  constraintsInlargestComponent.push({ left: nodeId, right: adjacent.id });
                } else {
                  if (subGraphOnVertical.has(nodeId)) {
                    subGraphOnVertical.get(nodeId).push(adjacent);
                  } else {
                    subGraphOnVertical.set(nodeId, [adjacent]);
                  }
                  if (!subGraphOnVertical.has(adjacent.id)) {
                    subGraphOnVertical.set(adjacent.id, []);
                  }
                  constraintsInlargestComponent.push({ top: nodeId, bottom: adjacent.id });
                }
              });
            });

            applyReflectionForRelativePlacement(constraintsInlargestComponent);
            reflectionType = false;

            // calculate appropriate positioning for subgraphs
            var positionMapHorizontal = findAppropriatePositionForRelativePlacement(subGraphOnHorizontal, "horizontal");
            var positionMapVertical = findAppropriatePositionForRelativePlacement(subGraphOnVertical, "vertical");

            // construct source and target configuration
            components[largestComponentIndex].forEach(function (nodeId, i) {
              sourceMatrix[i] = [xCoords[nodeIndexes.get(nodeId)], yCoords[nodeIndexes.get(nodeId)]];
              targetMatrix[i] = [];
              if (positionMapHorizontal.has(nodeId)) {
                targetMatrix[i][0] = positionMapHorizontal.get(nodeId);
              } else {
                targetMatrix[i][0] = xCoords[nodeIndexes.get(nodeId)];
              }
              if (positionMapVertical.has(nodeId)) {
                targetMatrix[i][1] = positionMapVertical.get(nodeId);
              } else {
                targetMatrix[i][1] = yCoords[nodeIndexes.get(nodeId)];
              }
            });

            standardTransformation = true;
          }
        }

        // if transformation is required, then calculate and apply transformation matrix
        if (standardTransformation) {
          /* calculate transformation matrix */
          var transformationMatrix = void 0;
          var targetMatrixTranspose = Matrix.transpose(targetMatrix); // A'
          var sourceMatrixTranspose = Matrix.transpose(sourceMatrix); // B'

          // centralize transpose matrices
          for (var _i7 = 0; _i7 < targetMatrixTranspose.length; _i7++) {
            targetMatrixTranspose[_i7] = Matrix.multGamma(targetMatrixTranspose[_i7]);
            sourceMatrixTranspose[_i7] = Matrix.multGamma(sourceMatrixTranspose[_i7]);
          }

          // do actual calculation for transformation matrix
          var tempMatrix = Matrix.multMat(targetMatrixTranspose, Matrix.transpose(sourceMatrixTranspose)); // tempMatrix = A'B
          var SVDResult = SVD.svd(tempMatrix); // SVD(A'B) = USV', svd function returns U, S and V 
          transformationMatrix = Matrix.multMat(SVDResult.V, Matrix.transpose(SVDResult.U)); // transformationMatrix = T = VU'

          /* apply found transformation matrix to obtain final draft layout */
          for (var _i8 = 0; _i8 < nodeIndexes.size; _i8++) {
            var temp1 = [xCoords[_i8], yCoords[_i8]];
            var temp2 = [transformationMatrix[0][0], transformationMatrix[1][0]];
            var temp3 = [transformationMatrix[0][1], transformationMatrix[1][1]];
            xCoords[_i8] = Matrix.dotProduct(temp1, temp2);
            yCoords[_i8] = Matrix.dotProduct(temp1, temp3);
          }

          // applied only both alignment and rel. placement constraints exist
          if (reflectionType) {
            applyReflectionForRelativePlacement(constraints.relativePlacementConstraint);
          }
        }
      }

      if (CoSEConstants.ENFORCE_CONSTRAINTS) {
        /****  enforce constraints on the transformed draft layout ****/

        /* first enforce fixed node constraint */

        if (constraints.fixedNodeConstraint && constraints.fixedNodeConstraint.length > 0) {
          var translationAmount = { x: 0, y: 0 };
          constraints.fixedNodeConstraint.forEach(function (nodeData, i) {
            var posInTheory = { x: xCoords[nodeIndexes.get(nodeData.nodeId)], y: yCoords[nodeIndexes.get(nodeData.nodeId)] };
            var posDesired = nodeData.position;
            var posDiff = calculatePositionDiff(posDesired, posInTheory);
            translationAmount.x += posDiff.x;
            translationAmount.y += posDiff.y;
          });
          translationAmount.x /= constraints.fixedNodeConstraint.length;
          translationAmount.y /= constraints.fixedNodeConstraint.length;

          xCoords.forEach(function (value, i) {
            xCoords[i] += translationAmount.x;
          });

          yCoords.forEach(function (value, i) {
            yCoords[i] += translationAmount.y;
          });

          constraints.fixedNodeConstraint.forEach(function (nodeData) {
            xCoords[nodeIndexes.get(nodeData.nodeId)] = nodeData.position.x;
            yCoords[nodeIndexes.get(nodeData.nodeId)] = nodeData.position.y;
          });
        }

        /* then enforce alignment constraint */

        if (constraints.alignmentConstraint) {
          if (constraints.alignmentConstraint.vertical) {
            var xAlign = constraints.alignmentConstraint.vertical;

            var _loop4 = function _loop4(_i9) {
              var alignmentSet = new Set();
              xAlign[_i9].forEach(function (nodeId) {
                alignmentSet.add(nodeId);
              });
              var intersection = new Set([].concat(_toConsumableArray(alignmentSet)).filter(function (x) {
                return fixedNodes.has(x);
              }));
              var xPos = void 0;
              if (intersection.size > 0) xPos = xCoords[nodeIndexes.get(intersection.values().next().value)];else xPos = calculateAvgPosition(alignmentSet).x;

              alignmentSet.forEach(function (nodeId) {
                if (!fixedNodes.has(nodeId)) xCoords[nodeIndexes.get(nodeId)] = xPos;
              });
            };

            for (var _i9 = 0; _i9 < xAlign.length; _i9++) {
              _loop4(_i9);
            }
          }
          if (constraints.alignmentConstraint.horizontal) {
            var yAlign = constraints.alignmentConstraint.horizontal;

            var _loop5 = function _loop5(_i10) {
              var alignmentSet = new Set();
              yAlign[_i10].forEach(function (nodeId) {
                alignmentSet.add(nodeId);
              });
              var intersection = new Set([].concat(_toConsumableArray(alignmentSet)).filter(function (x) {
                return fixedNodes.has(x);
              }));
              var yPos = void 0;
              if (intersection.size > 0) yPos = yCoords[nodeIndexes.get(intersection.values().next().value)];else yPos = calculateAvgPosition(alignmentSet).y;

              alignmentSet.forEach(function (nodeId) {
                if (!fixedNodes.has(nodeId)) yCoords[nodeIndexes.get(nodeId)] = yPos;
              });
            };

            for (var _i10 = 0; _i10 < yAlign.length; _i10++) {
              _loop5(_i10);
            }
          }
        }

        /* finally enforce relative placement constraint */

        if (constraints.relativePlacementConstraint) {
          (function () {
            var nodeToDummyForVerticalAlignment = new Map();
            var nodeToDummyForHorizontalAlignment = new Map();
            var dummyToNodeForVerticalAlignment = new Map();
            var dummyToNodeForHorizontalAlignment = new Map();
            var dummyPositionsForVerticalAlignment = new Map();
            var dummyPositionsForHorizontalAlignment = new Map();
            var fixedNodesOnHorizontal = new Set();
            var fixedNodesOnVertical = new Set();

            // fill maps and sets      
            fixedNodes.forEach(function (nodeId) {
              fixedNodesOnHorizontal.add(nodeId);
              fixedNodesOnVertical.add(nodeId);
            });

            if (constraints.alignmentConstraint) {
              if (constraints.alignmentConstraint.vertical) {
                var verticalAlignment = constraints.alignmentConstraint.vertical;

                var _loop6 = function _loop6(_i11) {
                  dummyToNodeForVerticalAlignment.set("dummy" + _i11, []);
                  verticalAlignment[_i11].forEach(function (nodeId) {
                    nodeToDummyForVerticalAlignment.set(nodeId, "dummy" + _i11);
                    dummyToNodeForVerticalAlignment.get("dummy" + _i11).push(nodeId);
                    if (fixedNodes.has(nodeId)) {
                      fixedNodesOnHorizontal.add("dummy" + _i11);
                    }
                  });
                  dummyPositionsForVerticalAlignment.set("dummy" + _i11, xCoords[nodeIndexes.get(verticalAlignment[_i11][0])]);
                };

                for (var _i11 = 0; _i11 < verticalAlignment.length; _i11++) {
                  _loop6(_i11);
                }
              }
              if (constraints.alignmentConstraint.horizontal) {
                var horizontalAlignment = constraints.alignmentConstraint.horizontal;

                var _loop7 = function _loop7(_i12) {
                  dummyToNodeForHorizontalAlignment.set("dummy" + _i12, []);
                  horizontalAlignment[_i12].forEach(function (nodeId) {
                    nodeToDummyForHorizontalAlignment.set(nodeId, "dummy" + _i12);
                    dummyToNodeForHorizontalAlignment.get("dummy" + _i12).push(nodeId);
                    if (fixedNodes.has(nodeId)) {
                      fixedNodesOnVertical.add("dummy" + _i12);
                    }
                  });
                  dummyPositionsForHorizontalAlignment.set("dummy" + _i12, yCoords[nodeIndexes.get(horizontalAlignment[_i12][0])]);
                };

                for (var _i12 = 0; _i12 < horizontalAlignment.length; _i12++) {
                  _loop7(_i12);
                }
              }
            }

            // construct horizontal and vertical dags (subgraphs) from overall dag
            var dagOnHorizontal = new Map();
            var dagOnVertical = new Map();

            var _loop8 = function _loop8(nodeId) {
              dag.get(nodeId).forEach(function (adjacent) {
                var sourceId = void 0;
                var targetNode = void 0;
                if (adjacent["direction"] == "horizontal") {
                  sourceId = nodeToDummyForVerticalAlignment.get(nodeId) ? nodeToDummyForVerticalAlignment.get(nodeId) : nodeId;
                  if (nodeToDummyForVerticalAlignment.get(adjacent.id)) {
                    targetNode = { id: nodeToDummyForVerticalAlignment.get(adjacent.id), gap: adjacent.gap, direction: adjacent.direction };
                  } else {
                    targetNode = adjacent;
                  }
                  if (dagOnHorizontal.has(sourceId)) {
                    dagOnHorizontal.get(sourceId).push(targetNode);
                  } else {
                    dagOnHorizontal.set(sourceId, [targetNode]);
                  }
                  if (!dagOnHorizontal.has(targetNode.id)) {
                    dagOnHorizontal.set(targetNode.id, []);
                  }
                } else {
                  sourceId = nodeToDummyForHorizontalAlignment.get(nodeId) ? nodeToDummyForHorizontalAlignment.get(nodeId) : nodeId;
                  if (nodeToDummyForHorizontalAlignment.get(adjacent.id)) {
                    targetNode = { id: nodeToDummyForHorizontalAlignment.get(adjacent.id), gap: adjacent.gap, direction: adjacent.direction };
                  } else {
                    targetNode = adjacent;
                  }
                  if (dagOnVertical.has(sourceId)) {
                    dagOnVertical.get(sourceId).push(targetNode);
                  } else {
                    dagOnVertical.set(sourceId, [targetNode]);
                  }
                  if (!dagOnVertical.has(targetNode.id)) {
                    dagOnVertical.set(targetNode.id, []);
                  }
                }
              });
            };

            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
              for (var _iterator5 = dag.keys()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                var nodeId = _step5.value;

                _loop8(nodeId);
              }

              // find source nodes of each component in horizontal and vertical dags
            } catch (err) {
              _didIteratorError5 = true;
              _iteratorError5 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion5 && _iterator5.return) {
                  _iterator5.return();
                }
              } finally {
                if (_didIteratorError5) {
                  throw _iteratorError5;
                }
              }
            }

            var undirectedOnHorizontal = dagToUndirected(dagOnHorizontal);
            var undirectedOnVertical = dagToUndirected(dagOnVertical);
            var componentsOnHorizontal = findComponents(undirectedOnHorizontal);
            var componentsOnVertical = findComponents(undirectedOnVertical);
            var reversedDagOnHorizontal = dagToReversed(dagOnHorizontal);
            var reversedDagOnVertical = dagToReversed(dagOnVertical);
            var componentSourcesOnHorizontal = [];
            var componentSourcesOnVertical = [];

            componentsOnHorizontal.forEach(function (component, index) {
              componentSourcesOnHorizontal[index] = [];
              component.forEach(function (nodeId) {
                if (reversedDagOnHorizontal.get(nodeId).length == 0) {
                  componentSourcesOnHorizontal[index].push(nodeId);
                }
              });
            });

            componentsOnVertical.forEach(function (component, index) {
              componentSourcesOnVertical[index] = [];
              component.forEach(function (nodeId) {
                if (reversedDagOnVertical.get(nodeId).length == 0) {
                  componentSourcesOnVertical[index].push(nodeId);
                }
              });
            });

            // calculate appropriate positioning for subgraphs
            var positionMapHorizontal = findAppropriatePositionForRelativePlacement(dagOnHorizontal, "horizontal", fixedNodesOnHorizontal, dummyPositionsForVerticalAlignment, componentSourcesOnHorizontal);
            var positionMapVertical = findAppropriatePositionForRelativePlacement(dagOnVertical, "vertical", fixedNodesOnVertical, dummyPositionsForHorizontalAlignment, componentSourcesOnVertical);

            // update positions of the nodes based on relative placement constraints

            var _loop9 = function _loop9(key) {
              if (dummyToNodeForVerticalAlignment.get(key)) {
                dummyToNodeForVerticalAlignment.get(key).forEach(function (nodeId) {
                  xCoords[nodeIndexes.get(nodeId)] = positionMapHorizontal.get(key);
                });
              } else {
                xCoords[nodeIndexes.get(key)] = positionMapHorizontal.get(key);
              }
            };

            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
              for (var _iterator6 = positionMapHorizontal.keys()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                var key = _step6.value;

                _loop9(key);
              }
            } catch (err) {
              _didIteratorError6 = true;
              _iteratorError6 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion6 && _iterator6.return) {
                  _iterator6.return();
                }
              } finally {
                if (_didIteratorError6) {
                  throw _iteratorError6;
                }
              }
            }

            var _loop10 = function _loop10(key) {
              if (dummyToNodeForHorizontalAlignment.get(key)) {
                dummyToNodeForHorizontalAlignment.get(key).forEach(function (nodeId) {
                  yCoords[nodeIndexes.get(nodeId)] = positionMapVertical.get(key);
                });
              } else {
                yCoords[nodeIndexes.get(key)] = positionMapVertical.get(key);
              }
            };

            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
              for (var _iterator7 = positionMapVertical.keys()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                var key = _step7.value;

                _loop10(key);
              }
            } catch (err) {
              _didIteratorError7 = true;
              _iteratorError7 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion7 && _iterator7.return) {
                  _iterator7.return();
                }
              } finally {
                if (_didIteratorError7) {
                  throw _iteratorError7;
                }
              }
            }
          })();
        }
      }

      // assign new coordinates to nodes after constraint handling
      for (var _i13 = 0; _i13 < allNodes.length; _i13++) {
        var _node = allNodes[_i13];
        if (_node.getChild() == null) {
          _node.setCenter(xCoords[nodeIndexes.get(_node.id)], yCoords[nodeIndexes.get(_node.id)]);
        }
      }
    };

    module.exports = ConstraintHandler;

    /***/ }),

    /***/ 551:
    /***/ ((module) => {

    module.exports = __WEBPACK_EXTERNAL_MODULE__551__;

    /***/ })

    /******/ 	});
    /************************************************************************/
    /******/ 	// The module cache
    /******/ 	var __webpack_module_cache__ = {};
    /******/ 	
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    /******/ 		// Check if module is in cache
    /******/ 		var cachedModule = __webpack_module_cache__[moduleId];
    /******/ 		if (cachedModule !== undefined) {
    /******/ 			return cachedModule.exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = __webpack_module_cache__[moduleId] = {
    /******/ 			// no module.id needed
    /******/ 			// no module.loaded needed
    /******/ 			exports: {}
    /******/ 		};
    /******/ 	
    /******/ 		// Execute the module function
    /******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
    /******/ 	
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/ 	
    /************************************************************************/
    /******/ 	
    /******/ 	// startup
    /******/ 	// Load entry module and return exports
    /******/ 	// This entry module is referenced by other modules so it can't be inlined
    /******/ 	var __webpack_exports__ = __webpack_require__(45);
    /******/ 	
    /******/ 	return __webpack_exports__;
    /******/ })()
    ;
    });
    }(coseBase$1));

    var coseBase = coseBase$1.exports;

    var HySENode = /** @class */ (function (_super) {
        __extends(HySENode, _super);
        function HySENode(gm, loc, size, vNode, id, rank) {
            var _this = _super.call(this, gm, loc, size, vNode) || this;
            _this.layerIdx = -1;
            _this.order = -1;
            _this.isDirected = 0;
            _this.id = id;
            _this.rank = rank;
            _this.noOfChildren = 1;
            _this.parentId = "";
            return _this;
        }
        HySENode.prototype.calculateDisplacement = function () {
            // `this` brings properties from base class 
            var layout = this.graphManager.getLayout();
            var coolingCoefficient = layout.coolingFactor;
            if (this.isDirected == 1) {
                coolingCoefficient = layout.directedCoolingFactor * 0.7;
            }
            this.displacementX += (coolingCoefficient * (this.springForceX + this.repulsionForceX) / this.noOfChildren);
            if (this.isDirected !== 1) {
                this.displacementY += (coolingCoefficient * (this.springForceY + this.repulsionForceY) / this.noOfChildren);
            }
            if (Math.abs(this.displacementX) > coolingCoefficient * layout.maxNodeDisplacement) {
                this.displacementX = coolingCoefficient * layout.maxNodeDisplacement * coseBase$1.exports.layoutBase.IMath.sign(this.displacementX);
            }
            if (this.isDirected != 1 && Math.abs(this.displacementY) > coolingCoefficient * layout.maxNodeDisplacement) {
                this.displacementY = coolingCoefficient * layout.maxNodeDisplacement * coseBase$1.exports.layoutBase.IMath.sign(this.displacementY);
            }
            if (this.child) {
                this.propogateDisplacementToChildren(this.displacementX, this.displacementY);
            }
        };
        HySENode.prototype.propogateDisplacementToChildren = function (displacementX, displacementY) {
            this.child.nodes.forEach(function (node) {
                if (node.child) {
                    node.propogateDisplacementToChildren(displacementX, displacementY);
                }
                else {
                    node.displacementX += displacementX;
                    node.displacementY += displacementY;
                }
            });
        };
        HySENode.prototype.move = function () {
            // `this` brings properties from base class 
            var layout = this.graphManager.getLayout();
            if (this.child) ;
            else if (this.isDirected != 1) {
                this.moveBy(this.displacementX, this.displacementY);
                layout.totalDisplacement += Math.abs(this.displacementX) + Math.abs(this.displacementY);
                if (this.isDirected === 0) {
                    layout.undirectedDisplacement += Math.abs(this.displacementY);
                }
                else {
                    layout.directedDisplacement += Math.abs(this.displacementY);
                }
            }
            else {
                this.moveBy(this.displacementX, 0);
                layout.totalDisplacement += Math.abs(this.displacementX);
                if (this.isDirected == 1) {
                    layout.directedDisplacement += Math.abs(this.displacementY);
                }
                else {
                    layout.undirectedDisplacement += Math.abs(this.displacementY);
                }
            }
        };
        /** Swap horizontal positions of this node and the other
         * @param  {HySENode} other
         * @param  {} isResetForceAndDisplacement=true
         */
        HySENode.prototype.swapPositionWith = function (other, isResetForceAndDisplacement) {
            if (isResetForceAndDisplacement === void 0) { isResetForceAndDisplacement = true; }
            var x1 = other.rect.x;
            var y1 = other.rect.y;
            var x2 = this.rect.x;
            var y2 = this.rect.y;
            //doing this so that nodes are swapped in the same region
            //instead of directly swapping centers find the point by taking in account the width difference of both nodes
            if (!coseBase$1.exports.layoutBase.uniformNodeDimensions) {
                if (x1 < x2) {
                    x2 = this.rect.x + (this.rect.getWidthHalf() - other.rect.getWidthHalf());
                    x1 = other.rect.x + (this.rect.getWidthHalf() - other.rect.getWidthHalf());
                }
                else {
                    x2 = this.rect.x + (other.rect.getWidthHalf() - this.rect.getWidthHalf());
                    x1 = other.rect.x + (other.rect.getWidthHalf() - this.rect.getWidthHalf());
                }
            }
            this.setLocation(x1, y1);
            other.setLocation(x2, y2);
            if (isResetForceAndDisplacement) {
                this.resetForcesAndDisplacement();
                other.resetForcesAndDisplacement();
            }
            else {
                //swap the forces and displacements
                var tempNode = new HySENode(this.graphManager, null, null, null, "", -1);
                tempNode.springForceX = this.springForceX;
                tempNode.springForceY = this.springForceY;
                tempNode.repulsionForceX = this.repulsionForceX;
                tempNode.repulsionForceY = this.repulsionForceY;
                tempNode.gravitationForceX = this.gravitationForceX;
                tempNode.gravitationForceY = this.gravitationForceY;
                tempNode.displacementX = this.displacementX;
                tempNode.displacementY = this.displacementY;
                this.springForceX = other.springForceX;
                this.springForceY = other.springForceY;
                this.repulsionForceX = other.repulsionForceX;
                this.repulsionForceY = other.repulsionForceY;
                this.gravitationForceX = other.gravitationForceX;
                this.gravitationForceY = other.gravitationForceY;
                this.displacementX = other.displacementX;
                this.displacementY = other.displacementY;
                other.springForceX = tempNode.springForceX;
                other.springForceY = tempNode.springForceY;
                other.repulsionForceX = tempNode.repulsionForceX;
                other.repulsionForceY = tempNode.repulsionForceY;
                other.gravitationForceX = tempNode.gravitationForceX;
                other.gravitationForceY = tempNode.gravitationForceY;
                other.displacementX = tempNode.displacementX;
                other.displacementY = tempNode.displacementY;
            }
        };
        HySENode.prototype.resetForcesAndDisplacement = function () {
            this.springForceX = 0;
            this.springForceY = 0;
            this.repulsionForceX = 0;
            this.repulsionForceY = 0;
            this.gravitationForceX = 0;
            this.gravitationForceY = 0;
            this.displacementX = 0;
            this.displacementY = 0;
        };
        return HySENode;
    }(coseBase$1.exports.CoSENode));

    var HySELayout = /** @class */ (function (_super) {
        __extends(HySELayout, _super);
        function HySELayout(layering, cy) {
            var _this = 
            //console.trace();
            _super.call(this) || this;
            _this.LEVEL = 0;
            _this.swapPeriod = 10;
            _this.id2LNode = {};
            _this.id2TotalForceX = {};
            _this.swapForceLimit = 100;
            _this.swappedPairs = {};
            _this.banned2SwapPairs = {};
            _this.minPairSwapPeriod = 20 * _this.swapPeriod;
            _this.orderFlipPeriod = 100;
            _this.isFastCooling = true;
            _this.isHighlightSwappedPair = true;
            _this.distinctColors = ['#00c853', '#ff3d00', '#ffd600', '#76ff03', '#18ffff', '#d500f9', '#f48fb1', '#2962ff'];
            _this.cntBan4swap = 0;
            _this.nodeRepulsionCalculationWidth = 7;
            _this.fullyCalcRep4Ticks = 0.2;
            _this.uniformNodeDimensions = false;
            _this.orderGap = 80;
            _this.expansionCoefficient = 12;
            _this.useExpansionByStreching = true;
            _this.edgesBetweenGraphs = [];
            _this.dummyCompoundNodes = [];
            _this.directedDisplacement = 0;
            _this.undirectedDisplacement = 0;
            _this.oldDirectedDisplacement = 0;
            _this.oldUndirectedDisplacement = 0;
            _this.performPostProcessing = true;
            _this.displayInitialPositions = false;
            _this.randomizeInitialPositions = true;
            _this.directedCoolingFactor = 0.9;
            _this.leftCompoundNodes = [];
            _this.rightCompoundNodes = [];
            _this.topCompoundNodes = [];
            _this.bottomCompoundNodes = [];
            _this.nodeRepulsion = 4500;
            _this.postLayout = false;
            _this.undirectedNodes = [];
            _this.directedNodes = [];
            _this.useFRGridVariantHySE = true;
            _this.idealEdgeLength = 50;
            _this.forceUpdateGrid = false;
            _this.colorSwappedPair = true;
            // this method is used to override layout-base.js
            _this.calcRepulsionRange = function () {
                // formula is 2 x (level + 1) x idealEdgeLength
                return (2 * (this.LEVEL + 1) * this.idealEdgeLength);
            };
            _super.prototype.initParameters.call(_this);
            _this.layering = layering;
            _this.orderedLayers = [];
            _this.layering.map(function (x) { return x.length; });
            //console.log("min, max layer sizes: ", Math.min(...layerSizes), Math.max(...layerSizes));
            _this.cy = cy;
            return _this;
        }
        HySELayout.prototype.newGraphManager = function () {
            return _super.prototype.newGraphManager.call(this);
        };
        /** prepare variables
         */
        HySELayout.prototype.beforeLayout = function () {
            var _a;
            var _this = this;
            var maxNodeDispParam = this.maxNodeDisplacement;
            _super.prototype.initSpringEmbedder.call(this);
            this.maxNodeDisplacement = maxNodeDispParam;
            this.uniformLeafNodeSizes = this.uniformNodeDimensions;
            this.useFRGridVariant = this.useFRGridVariantHySE;
            this.LEVEL = 0;
            this.IDEAL_EDGE_LENGTH = this.idealEdgeLength;
            var nodes = this.graphManager.getAllNodes();
            for (var i = 0; i < nodes.length; i++) {
                this.id2LNode[nodes[i].id] = nodes[i];
            }
            if (this.layering.length > 0) {
                this.prepareOrderedLayers();
            }
            this.prepareCompoundNodes();
            this.dummyCompoundNodes.forEach(function (node) {
                _this.graphManager.getRoot().add(node);
                _this.graphManager.allNodes.push(node);
            });
            this.graphManager.getRoot().calcEstimatedSize();
            var colorIndex = 0;
            for (var i = 0; i < nodes.length; i++) {
                var node = this.cy.getElementById(nodes[i].id);
                node.css('border-color', '#eee29b');
            }
            for (var i = 0; i < this.dummyCompoundNodes.length; i++) {
                var nodes_1 = this.dummyCompoundNodes[i].child.getNodes();
                for (var j = 0; j < nodes_1.length; j++) {
                    var node = this.cy.getElementById(nodes_1[j].id);
                    node.css('border-color', this.distinctColors[colorIndex]);
                    node.css('border-width', '2px');
                }
                colorIndex++;
                if (colorIndex == this.distinctColors.length) {
                    colorIndex = 0;
                }
            }
            this.undirectedNodes = this.graphManager.allNodes.filter(function (x) { return x.isDirected != 1; });
            this.directedNodes = this.graphManager.allNodes.filter(function (x) { return x.isDirected == 1; });
            this.graphManager.getRoot().nodes = this.graphManager.getRoot().nodes.filter(function (x) { return x.isDirected == 1; });
            (_a = this.graphManager.getRoot().nodes).push.apply(_a, __spreadArray([], __read(this.dummyCompoundNodes), false));
            this.graphManager.updateBounds();
        };
        HySELayout.prototype.prepareCompoundNodes = function () {
            var _this = this;
            //run the depth first search to get the group of nodes
            var groups = {};
            var seeds = {};
            var visited = new Set();
            var dfs = function (node, group) {
                if (visited.has(node)) {
                    return;
                }
                visited.add(node);
                if (groups[group] === undefined) {
                    groups[group] = [];
                }
                groups[group].push(node);
                var seed = getIsDirectedNeighborNodes(node);
                if (seed.length > 0) {
                    if (seeds[group] === undefined) {
                        seeds[group] = new Set();
                    }
                    seed.forEach(function (s) {
                        if (!seeds[group].has(s)) {
                            seeds[group].add(s);
                        }
                    });
                    // seeds[group] = seed;
                }
                if (node.child) {
                    node.child.nodes.forEach(function (child) {
                        dfs(child, group);
                    });
                }
                if (node.parentId) {
                    var parent_1 = node.owner.parent;
                    dfs(parent_1, group);
                }
                node.edges.filter(function (x) { return x.source.isDirected != 1 && x.target.isDirected != 1; }).forEach(function (edge) {
                    var otherNode = edge.source.id == node.id ? edge.target : edge.source;
                    dfs(otherNode, group);
                });
            };
            var getIsDirectedNeighborNodes = function (node) {
                var neighbors = node.edges.filter(function (x) { return x.source.isDirected == 1 || x.target.isDirected == 1; });
                if (neighbors.length > 0) {
                    return neighbors.map(function (x) { return x.source.id == node.id ? x.target : x.source; });
                }
                return [];
            };
            //get all blue nodes i-e non-heirachical nodes
            //excluding the ones with no children
            var nodesToVisit = this.graphManager.allNodes.filter(function (ele) {
                return ele.isDirected != 1;
            });
            //run dfs on each node
            for (var i = 0; i < nodesToVisit.length; i++) {
                var node = nodesToVisit[i];
                dfs(node, i);
            }
            //find the most left and most right nodes in graph manager nodes
            var mostLeftNode = this.graphManager.allNodes[0];
            var mostRightNode = this.graphManager.allNodes[0];
            var mostTopNode = this.graphManager.allNodes[0];
            var mostBottomNode = this.graphManager.allNodes[0];
            //get the bounds of heirarchical nodes
            this.graphManager.allNodes.filter(function (x) { return x.isDirected == 1; }).forEach(function (node) {
                if (mostLeftNode.isDirected != 1 || node.rect.x < mostLeftNode.rect.x) {
                    mostLeftNode = node;
                }
                if (mostRightNode.isDirected != 1 || node.rect.x + node.rect.width > mostRightNode.rect.x + mostRightNode.rect.width) {
                    mostRightNode = node;
                }
                if (mostTopNode.isDirected != 1 || node.rect.y < mostTopNode.rect.y) {
                    mostTopNode = node;
                }
                if (mostBottomNode.isDirected != 1 || node.rect.y + node.rect.height > mostBottomNode.rect.y + mostBottomNode.rect.height) {
                    mostBottomNode = node;
                }
            });
            var _loop_1 = function (i) {
                var id = Object.keys(groups)[i];
                var group = groups[Object.keys(groups)[i]];
                //check the position of seed node and set the position of compound node accordingly
                var seedNodes = seeds[id];
                var xCenters = [];
                var yCenters = [];
                if (seedNodes == null || seedNodes.size == 0) {
                    //if there is disconnected graph
                    yCenters.push(mostBottomNode.rect.y + mostBottomNode.rect.height);
                    xCenters.push(mostRightNode.rect.x + mostRightNode.rect.width);
                }
                else {
                    seedNodes.forEach(function (seed) {
                        xCenters.push(seed.rect.x);
                        yCenters.push(seed.rect.y);
                    });
                }
                var newGraph = this_1.newGraph();
                var numberOfChildren = 0;
                group.forEach(function (x) {
                    x.setRect({ x: 0, y: 0 }, x.rect);
                    numberOfChildren++;
                    if (!x.parentId) {
                        newGraph.add(x);
                    }
                    //this.graphManager.getRoot().nodes = this.graphManager.getRoot().nodes.filter(y=>y.id != x.id);
                });
                newGraph.calcEstimatedSize();
                var points = new coseBase$1.exports.layoutBase.PointD(0, 0);
                var dimension = new coseBase$1.exports.layoutBase.DimensionD(newGraph.getEstimatedSize(), newGraph.getEstimatedSize());
                var newNode = new HySENode(this_1.graphManager, points, dimension, null, "compoundNode" + id, -1);
                newNode.isDirected = 0;
                newNode.nodeRepulsion = this_1.nodeRepulsion;
                newNode.noOfChildren = numberOfChildren;
                this_1.graphManager.add(newGraph, newNode);
                //get the center of seed node so that we can set the y coordinate of child nodes
                var xCenter = xCenters.reduce(function (a, b) { return a + b; }) / xCenters.length;
                var yCenter = yCenters.reduce(function (a, b) { return a + b; }) / yCenters.length;
                //find which side is the closest to the xCenter and yCenter
                var distanceUp = Math.abs(Math.abs(yCenter) - Math.abs(mostTopNode.rect.y));
                var distanceDown = Math.abs(mostBottomNode.rect.y + mostBottomNode.rect.height - yCenter);
                var distanceLeft = Math.abs(Math.abs(xCenter) - Math.abs(mostLeftNode.rect.x));
                var distanceRight = Math.abs(mostRightNode.rect.x + mostRightNode.rect.width - xCenter);
                var min = Math.min(distanceUp, distanceDown, distanceLeft, distanceRight);
                var up = distanceUp == min ? true : false;
                var left = distanceLeft == min ? true : false;
                var right = distanceRight == min ? true : false;
                var down = distanceDown == min ? true : false;
                var seedCenter = new coseBase$1.exports.layoutBase.PointD(xCenter, yCenter);
                //place the compound node by checking with other compound nodes already placed on that side
                //when going to call recursively, we remove the compound nodes that are already checked and not colliding
                //plus we need to add some distance to the compound node when calling recursively, because if not then we'll be in an infinite loop of calling recursively
                var rectIntersect = function (rect1, rect2) {
                    return !(rect2.x > rect1.x + rect1.width ||
                        rect2.x + rect2.width < rect1.x ||
                        rect2.y > rect1.y + rect1.height ||
                        rect2.y + rect2.height < rect1.y);
                };
                var placeNewNode = function (newNode, side, nodesToCheck) {
                    if (side == "right") {
                        //check if the node is colliding with any other node
                        var colliding_1 = false;
                        var collidingNode_1 = null;
                        var nodesPassed_1 = [];
                        nodesToCheck.forEach(function (x) {
                            if (rectIntersect(newNode.rect, x.rect)) {
                                //console.log(newNode.id,"colliding with",x.id);
                                if (collidingNode_1 != null && collidingNode_1 instanceof HySENode) {
                                    if (collidingNode_1.rect.x + collidingNode_1.rect.width < x.rect.x + x.rect.width) {
                                        collidingNode_1 = x;
                                    }
                                    colliding_1 = true;
                                }
                                else {
                                    collidingNode_1 = x;
                                    colliding_1 = true;
                                }
                            }
                            else {
                                nodesPassed_1.push(x);
                            }
                        });
                        //nodesToCheck = nodesToCheck.filter(x=>!nodesPassed.includes(x));
                        if (colliding_1 && collidingNode_1 != null) {
                            newNode.setRect({ x: collidingNode_1.rect.x + 50 + collidingNode_1.rect.width, y: seedCenter.y - (newNode.rect.height / 2) }, newNode.rect);
                            placeNewNode(newNode, side, nodesToCheck);
                        }
                    }
                    else if (side == "left") {
                        //check if the node is colliding with any other node
                        var colliding_2 = false;
                        var collidingNode_2 = null;
                        var nodesPassed_2 = [];
                        nodesToCheck.forEach(function (x) {
                            if (rectIntersect(newNode.rect, x.rect)) {
                                //console.log(newNode.id,"colliding with",x.id);
                                if (collidingNode_2 != null && collidingNode_2 instanceof HySENode) {
                                    if (collidingNode_2.rect.x > x.rect.x) {
                                        collidingNode_2 = x;
                                    }
                                    colliding_2 = true;
                                }
                                else {
                                    collidingNode_2 = x;
                                    colliding_2 = true;
                                }
                            }
                            else {
                                nodesPassed_2.push(x);
                            }
                        });
                        //nodesToCheck = nodesToCheck.filter(x=>!nodesPassed.includes(x));
                        if (colliding_2 && collidingNode_2 != null) {
                            newNode.setRect({ x: collidingNode_2.rect.x - 50 - newNode.rect.width, y: seedCenter.y - (newNode.rect.height / 2) }, newNode.rect);
                            placeNewNode(newNode, side, nodesToCheck);
                        }
                    }
                    else if (side == "up") {
                        //check if the node is colliding with any other node
                        var colliding_3 = false;
                        var collidingNode_3 = null;
                        var nodesPassed_3 = [];
                        nodesToCheck.forEach(function (x) {
                            if (rectIntersect(newNode.rect, x.rect)) {
                                //console.log(newNode.id,"colliding with",x.id);
                                if (collidingNode_3 != null && collidingNode_3 instanceof HySENode) {
                                    if (collidingNode_3.rect.y > x.rect.y) {
                                        collidingNode_3 = x;
                                    }
                                    colliding_3 = true;
                                }
                                else {
                                    collidingNode_3 = x;
                                    colliding_3 = true;
                                }
                            }
                            else {
                                nodesPassed_3.push(x);
                            }
                        });
                        if (colliding_3 && collidingNode_3 != null) {
                            newNode.setRect({ x: seedCenter.x - (newNode.rect.width / 2), y: collidingNode_3.rect.y - 50 - newNode.rect.height }, newNode.rect);
                            placeNewNode(newNode, side, nodesToCheck);
                        }
                    }
                    else if (side == "down") {
                        //check if the node is colliding with any other node
                        var colliding_4 = false;
                        var collidingNode_4 = null;
                        var nodesPassed_4 = [];
                        nodesToCheck.forEach(function (x) {
                            if (rectIntersect(newNode.rect, x.rect)) {
                                //console.log(newNode.id,"colliding with",x.id);
                                if (collidingNode_4 != null && collidingNode_4 instanceof HySENode) {
                                    if (collidingNode_4.rect.y + collidingNode_4.rect.height < x.rect.y + x.rect.height) {
                                        collidingNode_4 = x;
                                    }
                                    colliding_4 = true;
                                }
                                else {
                                    collidingNode_4 = x;
                                    colliding_4 = true;
                                }
                            }
                            else {
                                nodesPassed_4.push(x);
                            }
                        });
                        //nodesToCheck = nodesToCheck.filter(x=>!nodesPassed.includes(x));
                        if (colliding_4 && collidingNode_4 != null) {
                            newNode.setRect({ x: seedCenter.x - (newNode.rect.width / 2), y: collidingNode_4.rect.y + 50 + collidingNode_4.rect.height }, newNode.rect);
                            placeNewNode(newNode, side, nodesToCheck);
                        }
                    }
                };
                //place the compound node to the correct side of the heirarchy
                if (up) {
                    newNode.setRect({ x: seedCenter.x - (newNode.rect.width / 2), y: mostTopNode.rect.y - 50 - newNode.rect.height }, newNode.rect);
                    placeNewNode(newNode, "up", this_1.topCompoundNodes);
                    this_1.topCompoundNodes.push(newNode);
                }
                else if (down) {
                    newNode.setRect({ x: seedCenter.x - (newNode.rect.width / 2), y: mostBottomNode.rect.y + 50 + newNode.rect.height }, newNode.rect);
                    placeNewNode(newNode, "down", this_1.bottomCompoundNodes);
                    this_1.bottomCompoundNodes.push(newNode);
                }
                else if (left) {
                    newNode.setRect({ x: mostLeftNode.rect.x - 50 - newNode.rect.width, y: seedCenter.y - (newNode.rect.height / 2) }, newNode.rect);
                    placeNewNode(newNode, "left", this_1.leftCompoundNodes);
                    this_1.leftCompoundNodes.push(newNode);
                }
                else if (right) {
                    newNode.setRect({ x: mostRightNode.rect.x + 50 + newNode.rect.width, y: seedCenter.y - (newNode.rect.height / 2) }, newNode.rect);
                    placeNewNode(newNode, "right", this_1.rightCompoundNodes);
                    this_1.rightCompoundNodes.push(newNode);
                }
                //add the nodes in the group to the new node
                group.forEach(function (x) {
                    //get random position for the node within the compound node
                    var randomChildX = 0;
                    var randomChildY = 0;
                    if (left && up) {
                        if (distanceUp < distanceLeft) {
                            //up
                            if (!_this.randomizeInitialPositions) {
                                randomChildY = newNode.rect.y;
                                randomChildX = seedCenter.x;
                            }
                            else {
                                randomChildY = newNode.rect.y + Math.floor(Math.random() * (newNode.rect.height - x.rect.height)) / 2;
                                randomChildX = newNode.rect.x + Math.floor(Math.random() * (newNode.rect.width - x.rect.width)) / 2;
                            }
                        }
                        else {
                            //left
                            if (!_this.randomizeInitialPositions) {
                                randomChildX = newNode.rect.x;
                                randomChildY = seedCenter.y;
                            }
                            else {
                                randomChildX = newNode.rect.x + Math.floor(Math.random() * (newNode.rect.width - x.rect.width)) / 2;
                                randomChildY = newNode.rect.y + Math.floor(Math.random() * (newNode.rect.height - x.rect.height)) / 2;
                            }
                        }
                    }
                    else if (left && !up) {
                        if (distanceDown < distanceLeft) {
                            //down
                            if (!_this.randomizeInitialPositions) {
                                randomChildY = newNode.rect.y;
                                randomChildX = seedCenter.x;
                            }
                            else {
                                randomChildY = newNode.rect.y + Math.floor(Math.random() * (newNode.rect.height - x.rect.height)) / 2;
                                randomChildX = newNode.rect.x + Math.floor(Math.random() * (newNode.rect.width - x.rect.width)) / 2;
                            }
                        }
                        else {
                            //left
                            if (!_this.randomizeInitialPositions) {
                                randomChildX = newNode.rect.x;
                                randomChildY = seedCenter.y;
                            }
                            else {
                                randomChildX = newNode.rect.x + Math.floor(Math.random() * (newNode.rect.width - x.rect.width)) / 2;
                                randomChildY = newNode.rect.y + Math.floor(Math.random() * (newNode.rect.height - x.rect.height)) / 2;
                            }
                        }
                    }
                    else if (!left && up) {
                        if (distanceUp < distanceRight) {
                            //up
                            if (!_this.randomizeInitialPositions) {
                                randomChildY = newNode.rect.y;
                                randomChildX = seedCenter.x;
                            }
                            else {
                                randomChildY = newNode.rect.y + Math.floor(Math.random() * (newNode.rect.height - x.rect.height)) / 2;
                                randomChildX = newNode.rect.x + Math.floor(Math.random() * (newNode.rect.width - x.rect.width)) / 2;
                            }
                        }
                        else {
                            //right
                            if (!_this.randomizeInitialPositions) {
                                randomChildX = newNode.rect.x;
                                randomChildY = seedCenter.y;
                            }
                            else {
                                randomChildX = newNode.rect.x + Math.floor(Math.random() * (newNode.rect.width - x.rect.width)) / 2;
                                randomChildY = newNode.rect.y + Math.floor(Math.random() * (newNode.rect.height - x.rect.height)) / 2;
                            }
                        }
                    }
                    else {
                        if (distanceDown < distanceRight) {
                            //down
                            if (!_this.randomizeInitialPositions) {
                                randomChildY = newNode.rect.y;
                                randomChildX = seedCenter.x;
                            }
                            else {
                                randomChildY = newNode.rect.y + Math.floor(Math.random() * (newNode.rect.height - x.rect.height)) / 2;
                                randomChildX = newNode.rect.x + Math.floor(Math.random() * (newNode.rect.width - x.rect.width)) / 2;
                            }
                        }
                        else {
                            //right
                            if (!_this.randomizeInitialPositions) {
                                randomChildX = newNode.rect.x;
                                randomChildY = seedCenter.y;
                            }
                            else {
                                randomChildX = newNode.rect.x + Math.floor(Math.random() * (newNode.rect.width - x.rect.width)) / 2;
                                randomChildY = newNode.rect.y + Math.floor(Math.random() * (newNode.rect.height - x.rect.height)) / 2;
                            }
                        }
                    }
                    new coseBase$1.exports.layoutBase.PointD(randomChildX, randomChildY);
                    x.rect.x = randomChildX;
                    x.rect.y = randomChildY;
                    // x.rect.x = newNode.rect.x;
                    // x.rect.y = newNode.rect.y;
                    // x.setRect(childpoints,x.rect);
                    //x.parent = newNode;
                    //newNode.getChild().add(x);
                });
                this_1.dummyCompoundNodes.push(newNode);
            };
            var this_1 = this;
            //create a compound node for each group
            for (var i = 0; i < Object.keys(groups).length; i++) {
                _loop_1(i);
            }
        };
        //DEBUG CODE
        //compare the order of nodes in the same layer before and after the expansion
        //if the orders are the same, return true
        //if the orders are different, return false
        HySELayout.prototype.isSameOrders = function (prevLayer, currLayer) {
            var x = true;
            for (var i = 0; i < prevLayer.length; i++) {
                for (var j = 0; j < prevLayer[i].length; j++) {
                    if (prevLayer[i][j].id != currLayer[i][j].id) {
                        x = false;
                    }
                }
            }
            //console.log("counter: ", counter);
            return x;
        };
        // will be called by layout-base.js
        HySELayout.prototype.layout = function () {
            // const t1 = new Date().getTime();
            this.beforeLayout();
            //console.log(this.graphManager.getAllNodes());
            var layoutEnded = false;
            while (!this.displayInitialPositions && !layoutEnded) {
                layoutEnded = this.tick();
            }
            if (!this.displayInitialPositions && this.performPostProcessing) {
                //this.postLayoutOverlapRemoval();
                this.postLayoutRepulsionPhase();
            }
            // const t = (new Date().getTime() - t1);
            //FOR DEBUGGING
            //let beforeLayers = JSON.parse(JSON.stringify(this.orderedLayers,['id','rank','order']));;
            //console.log("beforeLayers: ", beforeLayers);
            // if(this.useExpansionByStreching){
            //   this.expandNodesByStreching();
            //   for(let i = 0; i < 20; i++) {
            //     //this.repelNodePostAlogo();
            //     this.moveNodes();
            //   }
            // }
            // else{
            //   this.expandNodes();
            // }
            //FOR DEBUGGING
            // let afterLayers = this.orderedLayers;
            // console.log("afterLayers: ", afterLayers);
            // if(this.isSameOrders(beforeLayers, afterLayers)) {
            //   console.log("no flip");
            // }
            // else{
            //   console.log("flip");
            // }
            //console.log("HySE executed in", t, "ms", this.totalIterations, "/", this.maxIterations, "ticks");
            // if (!window['hyseExecutionTimes']) {
            //   window['hyseExecutionTimes'] = [];
            // }
            // window['hyseExecutionTimes'].push(t);
            console.log("HyseLayout ended in ", this.totalIterations, " ticks ");
        };
        HySELayout.prototype.isDirectedConverged = function () {
            var converged;
            var oscilating = false;
            if (this.totalIterations > this.maxIterations / 3) {
                oscilating = Math.abs(this.totalDisplacement - this.oldTotalDisplacement) < 2;
            }
            converged = this.totalDisplacement < this.totalDisplacementThreshold * 2;
            this.oldTotalDisplacement = this.totalDisplacement;
            this.oldDirectedDisplacement = this.directedDisplacement;
            this.oldUndirectedDisplacement = this.undirectedDisplacement;
            return converged || oscilating;
        };
        HySELayout.prototype.tick = function () {
            this.totalIterations++; // defined inside parent class
            if (this.totalIterations % coseBase$1.exports.CoSEConstants.CONVERGENCE_CHECK_PERIOD == 0) {
                // console.log("totalDisplacement: ", this.totalDisplacement, " coolingFactor: ", this.coolingFactor);
                if ((this.isDirectedConverged()) || this.totalIterations > this.maxIterations) {
                    return true;
                }
                if (this.isFastCooling) {
                    this.coolingFactor = this.initialCoolingFactor * ((this.maxIterations - this.totalIterations * this.coolingCoefficient) / this.maxIterations);
                }
                else {
                    this.coolingFactor = this.initialCoolingFactor * ((this.maxIterations - this.totalIterations) / this.maxIterations);
                }
                if (this.coolingFactor < 0) {
                    this.coolingFactor = 0;
                }
            }
            this.totalDisplacement = 0; // defined inside parent class
            this.graphManager.updateBounds();
            _super.prototype.calcSpringForces.call(this);
            if (this.useFRGridVariant) {
                this.gridRepulsion();
            }
            else {
                this.calcRepulsionForces();
                //this.repulsionForUndirected(this.graphManager.getRoot());
                this.repulsionTopLevel();
            }
            this.swapAndFlip();
            this.moveNodes();
            return false;
        };
        //add a grid repulsion function
        HySELayout.prototype.gridRepulsion = function () {
            var nodeA = null;
            var lNodes = this.graphManager.getAllNodes();
            var processedNodeSet;
            if ((this.totalIterations % coseBase$1.exports.layoutBase.FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1) || this.forceUpdateGrid) {
                this.updateGrid();
            }
            processedNodeSet = new Set();
            // calculate repulsion forces between each nodes and its surrounding
            for (var i = 0; i < lNodes.length; i++) {
                nodeA = lNodes[i];
                this.calculateRepulsionForceOfANode(nodeA, processedNodeSet);
                processedNodeSet.add(nodeA);
            }
            this.forceUpdateGrid = false;
        };
        HySELayout.prototype.calculateRepulsionForceOfANode = function (nodeA, processedNodeSet) {
            if ((this.totalIterations % coseBase$1.exports.layoutBase.FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1) || this.forceUpdateGrid) {
                var surrounding = new Set();
                nodeA.surrounding = new Array();
                var nodeB;
                var grid = this.grid;
                for (var i = (nodeA.startX - 1); i < (nodeA.finishX + 2); i++) {
                    for (var j = (nodeA.startY - 1); j < (nodeA.finishY + 2); j++) {
                        if (!((i < 0) || (j < 0) || (i >= grid.length) || (j >= grid[0].length))) {
                            for (var k = 0; k < grid[i][j].length; k++) {
                                nodeB = grid[i][j][k];
                                // If both nodes are not members of the same graph, 
                                // or both nodes are the same, skip.
                                if ((nodeA.getOwner() != nodeB.getOwner()) || (nodeA == nodeB)) {
                                    continue;
                                }
                                // check if the repulsion force between
                                // nodeA and nodeB has already been calculated
                                if (!processedNodeSet.has(nodeB) && !surrounding.has(nodeB)) {
                                    var distanceX = Math.abs(nodeA.getCenterX() - nodeB.getCenterX()) -
                                        ((nodeA.getWidth() / 2) + (nodeB.getWidth() / 2));
                                    var distanceY = Math.abs(nodeA.getCenterY() - nodeB.getCenterY()) -
                                        ((nodeA.getHeight() / 2) + (nodeB.getHeight() / 2));
                                    // if the distance between nodeA and nodeB 
                                    // is less then calculation range
                                    if ((distanceX <= this.repulsionRange) && (distanceY <= this.repulsionRange)) {
                                        //then add nodeB to surrounding of nodeA
                                        surrounding.add(nodeB);
                                    }
                                }
                            }
                        }
                    }
                }
                nodeA.surrounding = __spreadArray([], __read(surrounding), false);
            }
            for (i = 0; i < nodeA.surrounding.length; i++) {
                this.calcRepulsionForceForGridNodes(nodeA, nodeA.surrounding[i]);
            }
        };
        HySELayout.prototype.calcRepulsionForceForGridNodes = function (nodeA, nodeB) {
            var rectA = nodeA.getRect();
            var rectB = nodeB.getRect();
            var overlapAmount = new Array(2);
            var clipPoints = new Array(4);
            var distanceX;
            var distanceY;
            var distanceSquared;
            var distance;
            var repulsionForce;
            var repulsionForceX;
            var repulsionForceY;
            if (rectA.intersects(rectB)) // two nodes overlap
             {
                // calculate separation amount in x and y directions
                coseBase$1.exports.layoutBase.IGeometry.calcSeparationAmount(rectA, rectB, overlapAmount, coseBase$1.exports.layoutBase.FDLayoutConstants.DEFAULT_EDGE_LENGTH / 2.0);
                repulsionForceX = 2 * overlapAmount[0];
                repulsionForceY = 2 * overlapAmount[1];
                var childrenConstant = nodeA.noOfChildren * nodeB.noOfChildren / (nodeA.noOfChildren + nodeB.noOfChildren);
                // Apply forces on the two nodes
                nodeA.repulsionForceX -= childrenConstant * repulsionForceX;
                nodeA.repulsionForceY -= childrenConstant * repulsionForceY;
                nodeB.repulsionForceX += childrenConstant * repulsionForceX;
                nodeB.repulsionForceY += childrenConstant * repulsionForceY;
            }
            else // no overlap
             {
                // calculate distance
                if (this.uniformLeafNodeSizes &&
                    nodeA.getChild() == null && nodeB.getChild() == null) // simply base repulsion on distance of node centers
                 {
                    distanceX = rectB.getCenterX() - rectA.getCenterX();
                    distanceY = rectB.getCenterY() - rectA.getCenterY();
                }
                else // use clipping points
                 {
                    coseBase$1.exports.layoutBase.IGeometry.getIntersection(rectA, rectB, clipPoints);
                    distanceX = clipPoints[2] - clipPoints[0];
                    distanceY = clipPoints[3] - clipPoints[1];
                }
                // No repulsion range. FR grid variant should take care of this.
                if (Math.abs(distanceX) < coseBase$1.exports.layoutBase.FDLayoutConstants.MIN_REPULSION_DIST) {
                    distanceX = coseBase$1.exports.layoutBase.IMath.sign(distanceX) *
                        coseBase$1.exports.layoutBase.FDLayoutConstants.MIN_REPULSION_DIST;
                }
                if (Math.abs(distanceY) < coseBase$1.exports.layoutBase.FDLayoutConstants.MIN_REPULSION_DIST) {
                    distanceY = coseBase$1.exports.layoutBase.IMath.sign(distanceY) *
                        coseBase$1.exports.layoutBase.FDLayoutConstants.MIN_REPULSION_DIST;
                }
                distanceSquared = distanceX * distanceX + distanceY * distanceY;
                distance = Math.sqrt(distanceSquared);
                // Here we use half of the nodes' repulsion values for backward compatibility
                repulsionForce = (nodeA.nodeRepulsion / 2 + nodeB.nodeRepulsion / 2) * nodeA.noOfChildren * nodeB.noOfChildren / distanceSquared;
                // Project force onto x and y axes
                repulsionForceX = repulsionForce * distanceX / distance;
                repulsionForceY = repulsionForce * distanceY / distance;
                // Apply forces on the two nodes    
                nodeA.repulsionForceX -= repulsionForceX;
                nodeA.repulsionForceY -= repulsionForceY;
                nodeB.repulsionForceX += repulsionForceX;
                nodeB.repulsionForceY += repulsionForceY;
            }
        };
        HySELayout.prototype.postLayoutRepulsionPhase = function () {
            this.postLayout = true;
            var tempIt = this.totalIterations;
            this.totalIterations = 0;
            Math.min(this.graphManager.getAllNodes().length, 200);
            var numberOfIterations = this.graphManager.getAllNodes().length;
            for (var i = 0; i < numberOfIterations; i++) {
                this.totalDisplacement = 0;
                this.undirectedDisplacement = 0;
                this.directedDisplacement = 0;
                this.directedCoolingFactor = 1;
                this.graphManager.updateBounds();
                this.calcRepulsionForcesInRootGraph();
                this.moveNodes();
            }
            this.totalIterations = tempIt;
        };
        HySELayout.prototype.postLayoutOverlapRemoval = function () {
            //check all the ordered layers and see if there is any overlap between nodes
            //if there is an overlap, move the nodes away from each other
            //console.log(this.orderedLayers);
            this.orderedLayers.forEach(function (layer) {
                for (var i = 0; i < layer.length - 1; i++) {
                    var node1 = layer[i];
                    var node2 = layer[i + 1];
                    //get the x distance between the two nodes
                    var xDistance = Math.abs(node1.getRect().getCenterX() - node2.getRect().getCenterX());
                    //if distance is less than the width of the two nodes, then there is an overlap
                    if (xDistance < node1.getWidth() + node2.getWidth()) {
                        //console.log("overlap between nodes: ", node1.id, " and ", node2.id);
                        //move the nodes away from each other
                        var xMove = (node1.getWidth() + node2.getWidth() - xDistance) / 2;
                        //console.log("moved ", node1.id, " by ", -xMove, " and ", node2.id, " by ", xMove);
                        node1.moveBy(-xMove, 0);
                        node2.moveBy(xMove, 0);
                    }
                }
            });
        };
        HySELayout.prototype.repulsionTopLevel = function () {
            for (var i = 0; i < this.dummyCompoundNodes.length; i++) {
                this.repulsionForUndirected(this.dummyCompoundNodes[i].child);
                for (var j = 0; j < this.dummyCompoundNodes.length; j++) {
                    if (i == j) {
                        continue;
                    }
                    this.fdCalculateRepulsionForces(this.dummyCompoundNodes[i], this.dummyCompoundNodes[j]);
                }
            }
            for (var i = 0; i < this.dummyCompoundNodes.length; i++) {
                for (var j = 0; j < this.directedNodes.length; j++) {
                    this.fdCalculateRepulsionForces(this.directedNodes[j], this.dummyCompoundNodes[i]);
                }
            }
        };
        HySELayout.prototype.repulsionForUndirected = function (graph) {
            for (var i = 0; i < graph.nodes.length; i++) {
                for (var j = 0; j < graph.nodes.length; j++) {
                    if (i == j) {
                        continue;
                    }
                    var n1 = graph.nodes[i];
                    var n2 = graph.nodes[j];
                    this.fdCalculateRepulsionForces(n1, n2);
                    if (n1.child) {
                        this.repulsionForUndirected(n1.child);
                    }
                    if (n2.child) {
                        this.repulsionForUndirected(n2.child);
                    }
                }
            }
        };
        // overrides layout-base.js method
        HySELayout.prototype.calcSpringForce = function (edge, idealLength) {
            var sourceNode = edge.getSource();
            var targetNode = edge.getTarget();
            if (this.postLayout) {
                //only allow if the edge is between undirected and directed node
                if ((sourceNode.isDirected == 1 && targetNode.isDirected == 1) || (sourceNode.isDirected == 0 && targetNode.isDirected == 0)) {
                    return;
                }
            }
            // Update edge length
            if (this.uniformLeafNodeSizes && sourceNode.getChild() == null && targetNode.getChild() == null) {
                edge.updateLengthSimple();
            }
            else {
                edge.updateLength();
                if (edge.isOverlapingSourceAndTarget) {
                    return;
                }
            }
            var length = edge.getLength();
            if (length == 0) {
                return;
            }
            // Calculate spring forces
            // if(this.totalIterations < (this.fullyCalcRep4Ticks * this.maxIterations)/2){
            //   return;
            // }
            //var letDirectedMove = true;
            // if(this.totalIterations > (this.fullyCalcRep4Ticks * this.maxIterations)/10 && this.totalIterations % 20 == 0 && !(sourceNode.isDirected != 1 && targetNode.isDirected != 1)){
            //   // if(edge.edgeElasticity > 0.3){
            //   //   edge.edgeElasticity = edge.edgeElasticity -= 0.01;
            //   // }
            //   //letDirectedMove = false;
            // }
            var springForce = edge.edgeElasticity * (length - idealLength);
            // Project force onto x and y axes
            //console.log("force: ",springForce,"length: ",edge.length, "edge.lengthX: ", edge.lengthX, " edge.lengthY: ", edge.lengthY);
            var springForceX = springForce * (edge.lengthX / length);
            var springForceY = springForce * (edge.lengthY / length);
            // Apply forces on the end nodes
            if (sourceNode.isDirected === 1 && targetNode.isDirected !== 1) {
                sourceNode.springForceX += springForceX;
            }
            else {
                sourceNode.springForceX += springForceX;
            }
            if (targetNode.isDirected === 1 && sourceNode.isDirected !== 1) {
                targetNode.springForceX -= springForceX;
            }
            else {
                targetNode.springForceX -= springForceX;
            }
            // if(sourceNode.isDirected == 1 && targetNode.isDirected == 1){
            //   sourceNode.springForceX += springForceX;
            //   targetNode.springForceX -= springForceX;
            // }
            if (sourceNode.isDirected != 1) {
                //sourceNode.springForceX += springForceX;
                sourceNode.springForceY += springForceY;
            }
            if (targetNode.isDirected != 1) {
                //targetNode.springForceX -= springForceX;
                targetNode.springForceY -= springForceY;
            }
            if (sourceNode.isDirected == 1 && targetNode.isDirected != 1) {
                targetNode.springForceY += springForceY / 2;
                targetNode.springForceX += springForceX / 2;
            }
            if (sourceNode.isDirected != 1 && targetNode.isDirected == 1) {
                sourceNode.springForceY -= springForceY / 2;
                sourceNode.springForceX -= springForceX / 2;
            }
        };
        // overrides layout-base.js method
        HySELayout.prototype.calcRepulsionForce = function (nodeA, nodeB) {
            var rectA = nodeA.getRect();
            var rectB = nodeB.getRect();
            var repulsionForceX;
            var c1 = rectA.getCenterX();
            var c2 = rectB.getCenterX();
            var distX = Math.abs(c1 - c2) - (rectA.width / 2 + rectB.width / 2);
            if (distX <= 0) { // two nodes overlap
                repulsionForceX = 2 * distX;
            }
            else { // no overlap
                var distanceX = -distX;
                if (this.uniformLeafNodeSizes) { // simply base repulsion on distance of node centers
                    if (c2 > c1) {
                        distanceX = c1 - c2;
                    }
                    else {
                        distanceX = c2 - c1;
                    }
                }
                // No repulsion range. FR grid variant should take care of this.
                if (Math.abs(distanceX) < coseBase$1.exports.layoutBase.FDLayoutConstants.MIN_REPULSION_DIST) {
                    distanceX = coseBase$1.exports.layoutBase.IMath.sign(distanceX) * coseBase$1.exports.layoutBase.FDLayoutConstants.MIN_REPULSION_DIST;
                }
                // Here we use half of the nodes' repulsion values for backward compatibility
                repulsionForceX = -(nodeA.nodeRepulsion / 2 + nodeB.nodeRepulsion / 2) / (distanceX * distanceX);
            }
            if (c1 < c2) {
                repulsionForceX = -repulsionForceX;
            }
            if (nodeA.isDirected == 1 && nodeB.isDirected == 1) {
                // Apply forces on the two nodes
                nodeA.repulsionForceX -= repulsionForceX;
                nodeB.repulsionForceX += repulsionForceX;
            }
            else if (nodeA.isDirected == 1 && nodeB.isDirected != 1) {
                nodeB.repulsionForceX += repulsionForceX;
            }
            else if (nodeA.isDirected != 1 && nodeB.isDirected == 1) {
                nodeA.repulsionForceX -= repulsionForceX;
            }
        };
        HySELayout.prototype.fdCalculateRepulsionForces = function (nodeA, nodeB, childConst) {
            if (childConst === void 0) { childConst = true; }
            var rectA = nodeA.getRect();
            var rectB = nodeB.getRect();
            var overlapAmount = new Array(2);
            var clipPoints = new Array(4);
            var distanceX;
            var distanceY;
            var distanceSquared;
            var distance;
            var repulsionForce;
            var repulsionForceX;
            var repulsionForceY;
            if (rectA.intersects(rectB)) // two nodes overlap
             {
                // calculate separation amount in x and y directions
                coseBase$1.exports.layoutBase.IGeometry.calcSeparationAmount(rectA, rectB, overlapAmount, coseBase$1.exports.layoutBase.FDLayoutConstants.DEFAULT_EDGE_LENGTH / 2.0);
                repulsionForceX = 2 * overlapAmount[0];
                repulsionForceY = 2 * overlapAmount[1];
                var childrenConstant = nodeA.noOfChildren * nodeB.noOfChildren / (nodeA.noOfChildren + nodeB.noOfChildren);
                // Apply forces on the two nodes
                nodeA.repulsionForceX -= childrenConstant * repulsionForceX;
                nodeA.repulsionForceY -= childrenConstant * repulsionForceY;
                nodeB.repulsionForceX += childrenConstant * repulsionForceX;
                nodeB.repulsionForceY += childrenConstant * repulsionForceY;
            }
            else // no overlap
             {
                // calculate distance
                if (this.uniformLeafNodeSizes &&
                    nodeA.getChild() == null && nodeB.getChild() == null) // simply base repulsion on distance of node centers
                 {
                    distanceX = rectB.getCenterX() - rectA.getCenterX();
                    distanceY = rectB.getCenterY() - rectA.getCenterY();
                }
                else // use clipping points
                 {
                    coseBase$1.exports.layoutBase.IGeometry.getIntersection(rectA, rectB, clipPoints);
                    distanceX = clipPoints[2] - clipPoints[0];
                    distanceY = clipPoints[3] - clipPoints[1];
                }
                // No repulsion range. FR grid variant should take care of this.
                if (Math.abs(distanceX) < coseBase$1.exports.layoutBase.FDLayoutConstants.MIN_REPULSION_DIST) {
                    distanceX = coseBase$1.exports.layoutBase.IMath.sign(distanceX) *
                        coseBase$1.exports.layoutBase.FDLayoutConstants.MIN_REPULSION_DIST;
                }
                if (Math.abs(distanceY) < coseBase$1.exports.layoutBase.FDLayoutConstants.MIN_REPULSION_DIST) {
                    distanceY = coseBase$1.exports.layoutBase.IMath.sign(distanceY) *
                        coseBase$1.exports.layoutBase.FDLayoutConstants.MIN_REPULSION_DIST;
                }
                distanceSquared = distanceX * distanceX + distanceY * distanceY;
                distance = Math.sqrt(distanceSquared);
                // Here we use half of the nodes' repulsion values for backward compatibility
                if (childConst) {
                    repulsionForce = (nodeA.nodeRepulsion / 2 + nodeB.nodeRepulsion / 2) * nodeA.noOfChildren * nodeB.noOfChildren / distanceSquared;
                }
                else {
                    repulsionForce = (nodeA.nodeRepulsion / 2 + nodeB.nodeRepulsion / 2) / distanceSquared;
                }
                // Project force onto x and y axes
                repulsionForceX = repulsionForce * distanceX / distance;
                repulsionForceY = repulsionForce * distanceY / distance;
                // Apply forces on the two nodes    
                if (nodeA.isDirected != 1) {
                    nodeA.repulsionForceX -= repulsionForceX;
                    nodeA.repulsionForceY -= repulsionForceY;
                }
                if (nodeB.isDirected != 1) {
                    nodeB.repulsionForceX += repulsionForceX;
                    nodeB.repulsionForceY += repulsionForceY;
                }
            }
        };
        /** swap and flip the nodes to reduce crossing numbers
         */
        HySELayout.prototype.swapAndFlip = function () {
            // prepare data for swapping
            for (var id in this.id2LNode) {
                if (this.id2LNode[id].isDirected !== 1) {
                    continue;
                }
                if (this.id2TotalForceX[id] == undefined || this.id2TotalForceX[id] == null) {
                    this.id2TotalForceX[id] = 0;
                }
                this.id2TotalForceX[id] += this.id2LNode[id].repulsionForceX + this.id2LNode[id].springForceX;
                //this.id2TotalForceX[id] += this.id2LNode[id].springForceX;
            }
            // swap the nodes
            if (this.totalIterations % this.swapPeriod == 0) {
                // this.flipOrders();
                this.swapAdjacentsIfNeed();
                for (var id in this.id2TotalForceX) {
                    this.id2TotalForceX[id] = 0;
                }
            }
        };
        // assumes all edges in a layer is always from i to i+1 level | i is integer
        HySELayout.prototype.flipOrders = function () {
            var layers = this.orderedLayers;
            if (this.totalIterations % this.orderFlipPeriod != 0) {
                return;
            }
            for (var i = 1; i < layers.length - 1; i++) {
                var crossNum1 = this.getTotalNumCrossing(layers[i - 1], layers[i]);
                this.flipLayer(layers[i], i);
                var crossNum2 = this.getTotalNumCrossing(layers[i - 1], layers[i]);
                // no need to flip, so reverse back to original
                if (crossNum1 < crossNum2) {
                    this.flipLayer(layers[i], i);
                }
                else {
                    // reset for and displacement since they are flipped
                    //console.log("successfull flip for crossing nums: ", crossNum1, crossNum2);
                    for (var j = 0; j < layers[i].length; j++) {
                        layers[i][j].resetForcesAndDisplacement();
                    }
                }
            }
        };
        HySELayout.prototype.getNumCrossings = function (edges) {
            var r = 0;
            for (var i = 0; i < edges.length; i++) {
                for (var j = i + 1; j < edges.length; j++) {
                    var src1x = edges[i].source.rect.x;
                    var tgt1x = edges[i].target.rect.x;
                    var src2x = edges[j].source.rect.x;
                    var tgt2x = edges[j].target.rect.x;
                    if ((src1x < src2x && tgt1x > tgt2x) || (src1x > src2x && tgt1x < tgt2x)) {
                        r++;
                    }
                }
            }
            return r;
        };
        HySELayout.prototype.getTotalNumCrossing = function (prevLayer, currLayer) {
            var prev2CurrEdges = prevLayer.reduce(function (a, b) { return a.concat(b.edges.filter(function (x) { return x.source.id == b.id; })); }, []);
            var cnt1 = this.getNumCrossings(prev2CurrEdges);
            var curr2NextEdges = currLayer.reduce(function (a, b) { return a.concat(b.edges.filter(function (x) { return x.source.id == b.id; })); }, []);
            var cnt2 = this.getNumCrossings(curr2NextEdges);
            return cnt1 + cnt2;
        };
        HySELayout.prototype.flipLayer = function (layer, layerIdx) {
            var lowIdx = 0;
            var highIdx = layer.length - 1;
            while (lowIdx < highIdx) {
                var n1 = layer[lowIdx];
                var n2 = layer[highIdx];
                n1.swapPositionWith(n2, false);
                this.swapOnOrderedLayers(layerIdx, lowIdx, highIdx);
                lowIdx++;
                highIdx--;
            }
        };
        /** swap adjacent nodes to reduce crossings if there is a strong force
         */
        HySELayout.prototype.swapAdjacentsIfNeed = function () {
            var layers = this.orderedLayers;
            var pairs = [];
            for (var i = 0; i < layers.length; i++) {
                var layerId = i;
                for (var j = 0; j < layers[i].length - 1; j++) {
                    var n1 = layers[i][j].id;
                    var n2 = layers[i][j + 1].id;
                    var pairId = [n1, n2].sort().join('|');
                    // check if swapped too recently
                    if (this.swappedPairs[pairId] && (this.totalIterations - this.swappedPairs[pairId]) < this.minPairSwapPeriod) {
                        continue;
                    }
                    var connectedEdgeCount = layers[i][j].edges.length + layers[i][j + 1].edges.length;
                    var swapForce = Math.abs(this.id2TotalForceX[n1] - this.id2TotalForceX[n2]);
                    if (swapForce > this.swapForceLimit) {
                        pairs.push({ pairId: pairId, swapForce: swapForce, layerId: layerId, n1: n1, n2: n2, order1: j, order2: j + 1, connectedEdgeCount: connectedEdgeCount });
                    }
                }
            }
            if (pairs.length > 0) {
                this.forceUpdateGrid = true;
            }
            pairs.sort(function (a, b) { return b.swapForce - a.swapForce; }); // start swapping from the most willingly
            var connectedSwap = {};
            for (var i = 0; i < pairs.length; i++) {
                var p = pairs[i];
                var pairId = p.pairId;
                // don't let swapping the related elements
                if (connectedSwap[p.n1] || connectedSwap[p.n2]) {
                    continue;
                }
                // const cross1 = this.countCrosses();
                this.banned2SwapPairs[pairId] = false;
                this.highlightPair(pairId, true);
                // swap if both nodes request swapping
                // console.log('swap ', pairId);
                //get the distance between the two nodes and add it to the total displacement
                var xDistance = Math.abs(this.id2LNode[p.n1].getRect().getCenterX() - this.id2LNode[p.n2].getRect().getCenterX());
                this.totalDisplacement += xDistance;
                this.id2LNode[p.n1].swapPositionWith(this.id2LNode[p.n2]);
                this.swapOnOrderedLayers(p.layerId, p.order1, p.order2);
                this.swappedPairs[pairId] = this.totalIterations;
                this.banned2SwapPairs[pairId] = true;
                this.highlightPair(pairId, this.colorSwappedPair);
                var e1 = this.id2LNode[p.n1].edges;
                var e2 = this.id2LNode[p.n2].edges;
                for (var i_1 = 0; i_1 < e1.length; i_1++) {
                    connectedSwap[e1[i_1].source.id] = true;
                    connectedSwap[e1[i_1].target.id] = true;
                }
                for (var i_2 = 0; i_2 < e2.length; i_2++) {
                    connectedSwap[e2[i_2].source.id] = true;
                    connectedSwap[e2[i_2].target.id] = true;
                }
            }
        };
        /** highlight the swapped to show on animation
         * @param  {string} pairId
         * @param  {} isRemoveHighlight=false
         */
        HySELayout.prototype.highlightPair = function (pairId, isRemoveHighlight) {
            if (isRemoveHighlight === void 0) { isRemoveHighlight = false; }
            if (!this.isHighlightSwappedPair) {
                return;
            }
            var arr = pairId.split('|');
            if (!this.cy) {
                return;
            }
            var pair = this.cy.$id(arr[0]).union(this.cy.$id(arr[1]));
            if (isRemoveHighlight) {
                pair.css('border-color', '');
                pair.css('border-width', '0');
            }
            else {
                this.cntBan4swap++;
                pair.css('border-color', this.distinctColors[this.cntBan4swap % this.distinctColors.length]);
                pair.css('border-width', '3px');
            }
        };
        /** calculate repulsions only among the nodes of the same level
         */
        HySELayout.prototype.calcRepulsionForces = function () {
            if (this.totalIterations < this.fullyCalcRep4Ticks * this.maxIterations) {
                for (var i = 0; i < this.orderedLayers.length; i++) {
                    var currLayer = this.orderedLayers[i];
                    for (var j = 0; j < currLayer.length; j++) {
                        for (var k = j + 1; k < currLayer.length; k++) {
                            currLayer[j];
                            currLayer[k];
                            this.calcRepulsionForce(currLayer[j], currLayer[k]);
                        }
                    }
                }
            }
            else {
                for (var i = 0; i < this.orderedLayers.length; i++) {
                    var currLayer = this.orderedLayers[i];
                    for (var j = 0; j < currLayer.length - 1; j++) {
                        currLayer[j];
                        currLayer[j + 1];
                        // if (n1.isChild || n2.isChild) {
                        //     continue;
                        // }
                        this.calcRepulsionForce(currLayer[j], currLayer[j + 1]);
                        for (var skip = 2; skip <= this.nodeRepulsionCalculationWidth; skip++) {
                            if (j < currLayer.length - skip) {
                                var n3 = currLayer[j + skip];
                                if (n3.isChild) {
                                    continue;
                                }
                                this.calcRepulsionForce(currLayer[j], currLayer[j + skip]);
                            }
                        }
                    }
                }
            }
        };
        HySELayout.prototype.calcRepulsionForcesInRootGraph = function () {
            var _this = this;
            this.graphManager.rootGraph.nodes.forEach(function (node) {
                node.nodeRepulsion = _this.nodeRepulsion / 300;
            });
            for (var i = 0; i < this.orderedLayers.length; i++) {
                var currLayer = this.orderedLayers[i];
                for (var j = 0; j < currLayer.length; j++) {
                    for (var k = j + 1; k < currLayer.length; k++) {
                        currLayer[j].nodeRepulsion = this.nodeRepulsion;
                        currLayer[k].nodeRepulsion = this.nodeRepulsion;
                        this.calcRepulsionForce(currLayer[j], currLayer[k]);
                    }
                    var n1 = currLayer[j];
                    n1.nodeRepulsion = this.nodeRepulsion / 300;
                    for (var a = 0; a < this.topCompoundNodes.length; a++) {
                        var n2 = this.topCompoundNodes[a];
                        this.fdCalculateRepulsionForces(n1, n2);
                    }
                    for (var a = 0; a < this.bottomCompoundNodes.length; a++) {
                        var n2 = this.bottomCompoundNodes[a];
                        this.fdCalculateRepulsionForces(n1, n2);
                    }
                    for (var a = 0; a < this.leftCompoundNodes.length; a++) {
                        var n2 = this.leftCompoundNodes[a];
                        this.fdCalculateRepulsionForces(n1, n2);
                    }
                    for (var a = 0; a < this.rightCompoundNodes.length; a++) {
                        var n2 = this.rightCompoundNodes[a];
                        this.fdCalculateRepulsionForces(n1, n2);
                    }
                }
            }
        };
        HySELayout.prototype.moveNodes = function () {
            var nodes = this.graphManager.allNodes;
            for (var i = 0; i < nodes.length; i++) {
                nodes[i].calculateDisplacement();
                nodes[i].move();
                if (nodes[i].isDirected == 1) {
                    this.maintainLayers(nodes[i]);
                }
                nodes[i].resetForcesAndDisplacement();
            }
        };
        //this function places the nodes in layers based on their order in the layer
        HySELayout.prototype.expandNodes = function () {
            var t1 = new Date().getTime();
            var nodes = this.graphManager.allNodes.filter(function (x) { return x.isDirected == 1; });
            var ranks = [];
            var rankElements = {};
            var orders = [];
            for (var i = 0; i < nodes.length; i++) {
                orders.push(nodes[i].order);
                if (!ranks.includes(nodes[i].rank)) {
                    ranks.push(nodes[i].rank);
                }
                if (rankElements[nodes[i].rank]) {
                    rankElements[nodes[i].rank]++;
                }
                else {
                    rankElements[nodes[i].rank] = 1;
                }
            }
            ranks.forEach(function (rank) {
                var rankNodes = nodes.filter(function (x) { return x.rank == rank; });
                var mid = rankNodes.length / 2;
                rankNodes.forEach(function (rankNode) {
                    if (rankNode.order < mid) {
                        var distance = (rankNode.order - mid) * 30;
                        rankNode.moveOnXaxis(distance);
                    }
                    else {
                        var distance = (rankNode.order - mid) * 30;
                        rankNode.moveOnXaxis(distance);
                    }
                });
            });
            new Date().getTime() - t1;
            //console.log("expansion took", timetaken);
        };
        HySELayout.prototype.expandNodesByStreching = function () {
            var t1 = new Date().getTime();
            var nodes = this.graphManager.allNodes.filter(function (x) { return x.isDirected == 1; });
            var mostLeft = Math.min.apply(Math, __spreadArray([], __read(nodes.map(function (node) { return node.rect.x; })), false));
            var mostRight = Math.max.apply(Math, __spreadArray([], __read(nodes.map(function (node) { return node.rect.x + node.rect.width; })), false));
            var width = mostRight - mostLeft;
            var mid = mostLeft + width / 2;
            var stretchFactor = this.expansionCoefficient;
            for (var i = 0; i < nodes.length; i++) {
                //check where the node is with respect to mid i-e left or right
                if (nodes[i].rect.x > mid) {
                    //calculate the distance from the middle
                    var distance = nodes[i].rect.x - mid;
                    //calculate the new x position
                    var newX = mid + distance * stretchFactor;
                    //move the node
                    nodes[i].moveBy(newX - nodes[i].rect.x, 0);
                }
                else {
                    //calculate the distance from the middle
                    var distance = mid - nodes[i].rect.x;
                    //calculate the new x position
                    var newX = mid - distance * stretchFactor;
                    //move the node
                    nodes[i].moveBy(newX - nodes[i].rect.x, 0);
                }
            }
            new Date().getTime() - t1;
            //console.log("expansion took", timetaken);
        };
        /** tries to fix node overlaps with a simple logic
         */
        HySELayout.prototype.setPositionsFromLayering = function () {
            var layering = this.orderedLayers;
            var rankGap = 80;
            var orderGap = this.orderGap;
            var maxLayerSize = Math.max.apply(Math, __spreadArray([], __read(layering.map(function (x) { return x.length; })), false));
            var maxWidth = maxLayerSize * orderGap;
            for (var i = 0; i < layering.length; i++) {
                for (var j = 0; j < layering[i].length; j++) {
                    var n = layering[i][j];
                    var layerSize = layering[i].length;
                    var p = { x: (maxWidth / (layerSize + 1)) * (j + 1), y: rankGap * i };
                    n.setLocation(p.x, p.y);
                }
            }
        };
        /** Implemented only for debugging purposes
         */
        HySELayout.prototype.countCrosses = function () {
            var _this = this;
            var cnt = 0;
            var _loop_2 = function (i) {
                var edgesOnLayer = [];
                var _loop_3 = function (j) {
                    edgesOnLayer = edgesOnLayer.concat(this_2.orderedLayers[i][j].edges.filter(function (x) { return x.source.id == _this.orderedLayers[i][j].id; }));
                };
                for (var j = 0; j < this_2.orderedLayers[i].length; j++) {
                    _loop_3(j);
                }
                for (var j = 0; j < edgesOnLayer.length; j++) {
                    var currE = edgesOnLayer[j];
                    for (var k = j + 1; k < edgesOnLayer.length; k++) {
                        var otherE = edgesOnLayer[k];
                        if (currE.source.id == otherE.source.id || currE.target.id == otherE.target.id) {
                            continue;
                        }
                        if ((currE.source.rect.x > otherE.source.rect.x && currE.target.rect.x < otherE.target.rect.x) ||
                            (currE.source.rect.x < otherE.source.rect.x && currE.target.rect.x > otherE.target.rect.x)) {
                            cnt++;
                        }
                    }
                }
            };
            var this_2 = this;
            for (var i = 0; i < this.orderedLayers.length; i++) {
                _loop_2(i);
            }
            return cnt;
        };
        /** Implemented only for debugging purposes
         */
        HySELayout.prototype.isAllSorted = function () {
            var isSorted = true;
            for (var i = 0; i < this.orderedLayers.length; i++) {
                for (var j = 0; j < this.orderedLayers[i].length - 1; j++) {
                    if (this.orderedLayers[i][j].rect.x >= this.orderedLayers[i][j + 1].rect.x) {
                        return false;
                    }
                }
            }
            return isSorted;
        };
        /** after a node is moved, preserve layer orders
         * @param  {HySENode} node
         */
        HySELayout.prototype.maintainLayers = function (node) {
            var nextIdx = node.displacementX > 0 ? node.order + 1 : node.order - 1;
            var next = this.orderedLayers[node.layerIdx][nextIdx];
            if (node.displacementX > 0) {
                while (next && node.rect.x > next.rect.x) {
                    this.swapOnOrderedLayers(node.layerIdx, nextIdx - 1, nextIdx);
                    nextIdx++;
                    next = this.orderedLayers[node.layerIdx][nextIdx];
                }
            }
            else {
                while (next && node.rect.x < next.rect.x) {
                    this.swapOnOrderedLayers(node.layerIdx, nextIdx + 1, nextIdx);
                    nextIdx--;
                    next = this.orderedLayers[node.layerIdx][nextIdx];
                }
            }
        };
        /** keep layers info
        */
        HySELayout.prototype.prepareOrderedLayers = function () {
            var _this = this;
            var mapperFn = typeof this.layering[0][0] === 'string' ? function (x) { return _this.id2LNode[x]; } : function (x) { return _this.id2LNode[x.id()]; };
            this.orderedLayers = [];
            for (var i = 0; i < this.layering.length; i++) {
                var currLayer = this.layering[i].map(mapperFn).sort(function (a, b) { return a.rect.x - b.rect.x; });
                for (var j = 0; j < currLayer.length; j++) {
                    currLayer[j].layerIdx = i;
                    currLayer[j].order = j;
                }
                this.orderedLayers.push(currLayer);
            }
            //console.log("ordered layers", this.orderedLayers);
        };
        /** When 2 elements are swapped, keep the layer sorted
         * @param  {number} layerIdx
         * @param  {number} i
         * @param  {number} j
         */
        HySELayout.prototype.swapOnOrderedLayers = function (layerIdx, i, j) {
            var tmp = this.orderedLayers[layerIdx][i];
            this.orderedLayers[layerIdx][i] = this.orderedLayers[layerIdx][j];
            this.orderedLayers[layerIdx][j] = tmp;
            this.orderedLayers[layerIdx][i].order = i;
            this.orderedLayers[layerIdx][j].order = j;
        };
        return HySELayout;
    }(coseBase$1.exports.CoSELayout));

    var HySEEdge = /** @class */ (function (_super) {
        __extends(HySEEdge, _super);
        function HySEEdge(source, target, vEdge) {
            return _super.call(this, source, target, vEdge) || this;
        }
        return HySEEdge;
    }(coseBase$1.exports.CoSEEdge));

    var ForceDirectedLayout = /** @class */ (function () {
        function ForceDirectedLayout(options) {
            this.id2LNode = {};
            this.options = Object.assign({}, DEFAULT_OPTIONS, options);
        }
        ForceDirectedLayout.prototype.run = function () {
            var options = this.options;
            var cy = options.cy; // cy is automatically populated for us in the constructor
            var nodes = options.eles.nodes();
            var layering = this.initPositionsLikeDagre(cy, nodes, options);
            if (options.isManuelRankAndOrder) {
                layering = this.getLayeringFromData(nodes);
            }
            this.randomizeOrderInLayers(layering);
            this.setPositionsFromLayering(layering, options);
            if (options.justHierarchy) {
                nodes.layoutPositions(this, options, function (ele) {
                    return {
                        x: ele.position('x'),
                        y: ele.position('y')
                    };
                });
                return this;
            }
            var l = new HySELayout(layering, cy);
            l.swapPeriod = options.swapPeriod;
            l.minPairSwapPeriod = options.minPairSwapPeriod;
            l.swapForceLimit = options.swapForceLimit;
            l.isHighlightSwappedPair = options.animate == "during";
            var gm = l.newGraphManager();
            console.log("processing nodes");
            this.processNodes(cy, gm.addRoot(), l, options);
            this.processEdges(cy, gm, options);
            if (options.animate != "during") {
                l.runLayout();
                // convey position data from 'Graph Manager'
                for (var i = 0; i < gm.allNodes.length; i++) {
                    var n = gm.allNodes[i];
                    cy.nodes('#' + n.id).scratch("force_directed_pos", { x: n.rect.x, y: n.rect.y });
                }
                nodes.layoutPositions(this, options, function (ele) {
                    ele = typeof ele === "object" ? ele : this;
                    var dModel = ele.scratch('force_directed_pos');
                    return {
                        x: dModel.x,
                        y: dModel.y
                    };
                });
                if (options.stop && typeof options.stop == "function") {
                    options.stop();
                }
            }
            else {
                this.runTickByTickAnimated(l, nodes, options);
            }
            return this; // chaining
        };
        ForceDirectedLayout.prototype.runTickByTickAnimated = function (layout, nodes, options) {
            var _this = this;
            layout.beforeLayout();
            layout.swapPeriod = options.swapPeriod;
            layout.minPairSwapPeriod = options.minPairSwapPeriod;
            layout.isFastCooling = options.isFastCooling;
            layout.swapForceLimit = options.swapForceLimit;
            layout.coolingCoefficient = options.coolingCoefficient;
            layout.orderFlipPeriod = options.orderFlipPeriod;
            layout.nodeRepulsionCalculationWidth = options.nodeRepulsionCalculationWidth;
            layout.fullyCalcRep4Ticks = options.fullyCalcRep4Ticks;
            layout.uniformNodeDimensions = options.uniformNodeDimensions;
            layout.maxNodeDisplacement = options.maxNodeDisplacement;
            layout.orderGap = options.orderGap;
            var executeTickFn = function () {
                setTimeout(function () {
                    var isLayoutEnded = false;
                    for (var i = 0; i < options.ticksPerFrame && !isLayoutEnded; i++) {
                        isLayoutEnded = layout.tick();
                    }
                    nodes.positions(function (ele) {
                        var lNode = _this.id2LNode[ele.id()];
                        return {
                            x: lNode.getRect().getCenterX(),
                            y: lNode.getRect().getCenterY()
                        };
                    });
                    if (!isLayoutEnded) {
                        requestAnimationFrame(executeTickFn);
                    }
                    else {
                        console.log("Ended in ", layout.totalIterations, " ticks ");
                        if (options.stop && typeof options.stop == "function") {
                            options.stop();
                        }
                    }
                }, options.tickDelay);
            };
            requestAnimationFrame(executeTickFn);
        };
        ForceDirectedLayout.prototype.processNodes = function (cy, parent, layout, options) {
            var nodes = cy.nodes();
            // node ların sol üst köşesinin koordinatları veriliyor
            for (var i = 0; i < nodes.length; i++) {
                var n = nodes[i];
                var p = n.position();
                var w = n.width();
                var h = n.height();
                var hyseNode = new HySENode(layout.graphManager, new coseBase$1.exports.PointD(p.x, p.y), new coseBase$1.exports.DimensionD(w, h), null, n.id(), n.rank);
                hyseNode.nodeRepulsion = options.nodeRepulsion;
                hyseNode.isDirected = n.data("isDirected");
                console.log(hyseNode);
                var lNode = parent.add(hyseNode);
                this.id2LNode[n.id()] = lNode;
            }
        };
        ForceDirectedLayout.prototype.processEdges = function (cy, gm, options) {
            var edges = cy.edges();
            for (var i = 0; i < edges.length; i++) {
                var edge = edges[i];
                var sourceNode = this.id2LNode[edge.source().id()];
                var targetNode = this.id2LNode[edge.target().id()];
                var e = new HySEEdge(sourceNode, targetNode, null);
                e.idealLength = options.idealEdgeLength;
                e.edgeElasticity = options.edgeElasticity;
                gm.add(e, sourceNode, targetNode);
            }
        };
        /** center aligned positioning
         * @param  {} cy
         * @param  {} nodes
         * @param  {} options
         */
        ForceDirectedLayout.prototype.initPositionsLikeDagre = function (cy, nodes, options) {
            var layering = this.getLayers(cy, nodes);
            var rankGap = options.rankGap;
            var orderGap = options.orderGap;
            var maxLayerSize = Math.max.apply(Math, __spreadArray([], __read(layering.map(function (x) { return x.length; })), false));
            var maxWidth = maxLayerSize * orderGap;
            for (var i = 0; i < layering.length; i++) {
                for (var j = 0; j < layering[i].length; j++) {
                    var n = layering[i][j];
                    var layerSize = layering[i].length;
                    var p = { x: (maxWidth / (layerSize + 1)) * (j + 1), y: rankGap * i };
                    n.position(p);
                }
            }
            return layering;
        };
        /** For DAGMAR graphs, layering info is inside `node.data('level')`
         * for others it is inside node IDs. if node id is `n2_1`, it means level 2 order 1. Numbers start from 1.
         * @param  {} nodes
         */
        ForceDirectedLayout.prototype.getLayeringFromData = function (nodes) {
            var e_1, _a, e_2, _b;
            if (nodes[0].data('level')) {
                var layerId2cnt = {};
                var layerIds = nodes.map(function (x) { return Number(x.data('level')); });
                try {
                    for (var layerIds_1 = __values(layerIds), layerIds_1_1 = layerIds_1.next(); !layerIds_1_1.done; layerIds_1_1 = layerIds_1.next()) {
                        var id = layerIds_1_1.value;
                        if (!layerId2cnt[id]) {
                            layerId2cnt[id] = 0;
                        }
                        layerId2cnt[id] += 1;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (layerIds_1_1 && !layerIds_1_1.done && (_a = layerIds_1.return)) _a.call(layerIds_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                var totalLayerCnt = Object.keys(layerId2cnt).length;
                var layering = new Array(totalLayerCnt);
                for (var id in layerId2cnt) {
                    // DAGmar dataset starts levels from 0
                    layering[Number(id)] = new Array(layerId2cnt[id]);
                }
                for (var i = 0; i < nodes.length; i++) {
                    var n = nodes[i];
                    var level = Number(n.data('level'));
                    var order = layerId2cnt[level] - 1;
                    layering[level][order] = n;
                    layerId2cnt[level] = layerId2cnt[level] - 1; // since order info doesn't exist, just count 
                }
                return layering;
            }
            else {
                var layerId2cnt = {};
                var layerIds = nodes.map(function (x) { return Number(x.id().substr(1).split('_')[0]); });
                try {
                    for (var layerIds_2 = __values(layerIds), layerIds_2_1 = layerIds_2.next(); !layerIds_2_1.done; layerIds_2_1 = layerIds_2.next()) {
                        var id = layerIds_2_1.value;
                        if (!layerId2cnt[id]) {
                            layerId2cnt[id] = 0;
                        }
                        layerId2cnt[id] += 1;
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (layerIds_2_1 && !layerIds_2_1.done && (_b = layerIds_2.return)) _b.call(layerIds_2);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                var totalLayerCnt = Object.keys(layerId2cnt).length;
                var layering = new Array(totalLayerCnt);
                for (var id in layerId2cnt) {
                    layering[Number(id) - 1] = new Array(layerId2cnt[id]);
                }
                for (var i = 0; i < nodes.length; i++) {
                    var n = nodes[i];
                    var idxes = n.id().substr(1).split('_');
                    layering[idxes[0] - 1][idxes[1] - 1] = n;
                }
                return layering;
            }
        };
        ForceDirectedLayout.prototype.randomizeOrderInLayers = function (layering) {
            for (var i = 0; i < layering.length; i++) {
                layering[i].sort(function () { return Math.random() - 0.5; });
            }
        };
        ForceDirectedLayout.prototype.setPositionsFromLayering = function (layering, options) {
            var rankGap = options.rankGap;
            var orderGap = options.orderGap;
            var maxLayerSize = Math.max.apply(Math, __spreadArray([], __read(layering.map(function (x) { return x.length; })), false));
            var maxWidth = maxLayerSize * orderGap;
            for (var i = 0; i < layering.length; i++) {
                for (var j = 0; j < layering[i].length; j++) {
                    var n = layering[i][j];
                    var layerSize = layering[i].length;
                    var p = { x: (maxWidth / (layerSize + 1)) * (j + 1), y: rankGap * i };
                    n.position(p);
                }
            }
        };
        ForceDirectedLayout.prototype.printLayers = function (cy, nodes) {
            var layers = this.getLayers(cy, nodes);
            var s = '';
            for (var i = 0; i < layers.length; i++) {
                s += '[';
                for (var j = 0; j < layers[i].length; j++) {
                    s += layers[i][j].id() + ', ';
                }
                s = s.slice(0, s.length - 2);
                s += ']\n';
            }
            console.log(s);
        };
        ForceDirectedLayout.prototype.getLayers = function (cy, nodes) {
            var r = [];
            var visited = cy.collection();
            while (visited.length < nodes.length) {
                var newLayer = [];
                var unlayered = nodes.not(visited);
                for (var i = 0; i < unlayered.length; i++) {
                    var curr = unlayered[i];
                    // get nodes who doesn't have any incomer
                    if (curr.incomers('node').not(visited).length < 1) {
                        newLayer.push(curr);
                    }
                }
                r.push(newLayer);
                visited.merge(newLayer);
            }
            return r;
        };
        return ForceDirectedLayout;
    }());

    var lodash$1 = {exports: {}};

    /**
     * @license
     * Lodash <https://lodash.com/>
     * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    (function (module, exports) {
    (function() {

      /** Used as a safe reference for `undefined` in pre-ES5 environments. */
      var undefined$1;

      /** Used as the semantic version number. */
      var VERSION = '4.17.21';

      /** Used as the size to enable large array optimizations. */
      var LARGE_ARRAY_SIZE = 200;

      /** Error message constants. */
      var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
          FUNC_ERROR_TEXT = 'Expected a function',
          INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

      /** Used to stand-in for `undefined` hash values. */
      var HASH_UNDEFINED = '__lodash_hash_undefined__';

      /** Used as the maximum memoize cache size. */
      var MAX_MEMOIZE_SIZE = 500;

      /** Used as the internal argument placeholder. */
      var PLACEHOLDER = '__lodash_placeholder__';

      /** Used to compose bitmasks for cloning. */
      var CLONE_DEEP_FLAG = 1,
          CLONE_FLAT_FLAG = 2,
          CLONE_SYMBOLS_FLAG = 4;

      /** Used to compose bitmasks for value comparisons. */
      var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;

      /** Used to compose bitmasks for function metadata. */
      var WRAP_BIND_FLAG = 1,
          WRAP_BIND_KEY_FLAG = 2,
          WRAP_CURRY_BOUND_FLAG = 4,
          WRAP_CURRY_FLAG = 8,
          WRAP_CURRY_RIGHT_FLAG = 16,
          WRAP_PARTIAL_FLAG = 32,
          WRAP_PARTIAL_RIGHT_FLAG = 64,
          WRAP_ARY_FLAG = 128,
          WRAP_REARG_FLAG = 256,
          WRAP_FLIP_FLAG = 512;

      /** Used as default options for `_.truncate`. */
      var DEFAULT_TRUNC_LENGTH = 30,
          DEFAULT_TRUNC_OMISSION = '...';

      /** Used to detect hot functions by number of calls within a span of milliseconds. */
      var HOT_COUNT = 800,
          HOT_SPAN = 16;

      /** Used to indicate the type of lazy iteratees. */
      var LAZY_FILTER_FLAG = 1,
          LAZY_MAP_FLAG = 2,
          LAZY_WHILE_FLAG = 3;

      /** Used as references for various `Number` constants. */
      var INFINITY = 1 / 0,
          MAX_SAFE_INTEGER = 9007199254740991,
          MAX_INTEGER = 1.7976931348623157e+308,
          NAN = 0 / 0;

      /** Used as references for the maximum length and index of an array. */
      var MAX_ARRAY_LENGTH = 4294967295,
          MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
          HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

      /** Used to associate wrap methods with their bit flags. */
      var wrapFlags = [
        ['ary', WRAP_ARY_FLAG],
        ['bind', WRAP_BIND_FLAG],
        ['bindKey', WRAP_BIND_KEY_FLAG],
        ['curry', WRAP_CURRY_FLAG],
        ['curryRight', WRAP_CURRY_RIGHT_FLAG],
        ['flip', WRAP_FLIP_FLAG],
        ['partial', WRAP_PARTIAL_FLAG],
        ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
        ['rearg', WRAP_REARG_FLAG]
      ];

      /** `Object#toString` result references. */
      var argsTag = '[object Arguments]',
          arrayTag = '[object Array]',
          asyncTag = '[object AsyncFunction]',
          boolTag = '[object Boolean]',
          dateTag = '[object Date]',
          domExcTag = '[object DOMException]',
          errorTag = '[object Error]',
          funcTag = '[object Function]',
          genTag = '[object GeneratorFunction]',
          mapTag = '[object Map]',
          numberTag = '[object Number]',
          nullTag = '[object Null]',
          objectTag = '[object Object]',
          promiseTag = '[object Promise]',
          proxyTag = '[object Proxy]',
          regexpTag = '[object RegExp]',
          setTag = '[object Set]',
          stringTag = '[object String]',
          symbolTag = '[object Symbol]',
          undefinedTag = '[object Undefined]',
          weakMapTag = '[object WeakMap]',
          weakSetTag = '[object WeakSet]';

      var arrayBufferTag = '[object ArrayBuffer]',
          dataViewTag = '[object DataView]',
          float32Tag = '[object Float32Array]',
          float64Tag = '[object Float64Array]',
          int8Tag = '[object Int8Array]',
          int16Tag = '[object Int16Array]',
          int32Tag = '[object Int32Array]',
          uint8Tag = '[object Uint8Array]',
          uint8ClampedTag = '[object Uint8ClampedArray]',
          uint16Tag = '[object Uint16Array]',
          uint32Tag = '[object Uint32Array]';

      /** Used to match empty string literals in compiled template source. */
      var reEmptyStringLeading = /\b__p \+= '';/g,
          reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
          reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

      /** Used to match HTML entities and HTML characters. */
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
          reUnescapedHtml = /[&<>"']/g,
          reHasEscapedHtml = RegExp(reEscapedHtml.source),
          reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

      /** Used to match template delimiters. */
      var reEscape = /<%-([\s\S]+?)%>/g,
          reEvaluate = /<%([\s\S]+?)%>/g,
          reInterpolate = /<%=([\s\S]+?)%>/g;

      /** Used to match property names within property paths. */
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
          reIsPlainProp = /^\w*$/,
          rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

      /**
       * Used to match `RegExp`
       * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
       */
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
          reHasRegExpChar = RegExp(reRegExpChar.source);

      /** Used to match leading whitespace. */
      var reTrimStart = /^\s+/;

      /** Used to match a single whitespace character. */
      var reWhitespace = /\s/;

      /** Used to match wrap detail comments. */
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
          reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
          reSplitDetails = /,? & /;

      /** Used to match words composed of alphanumeric characters. */
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

      /**
       * Used to validate the `validate` option in `_.template` variable.
       *
       * Forbids characters which could potentially change the meaning of the function argument definition:
       * - "()," (modification of function parameters)
       * - "=" (default value)
       * - "[]{}" (destructuring of function parameters)
       * - "/" (beginning of a comment)
       * - whitespace
       */
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

      /** Used to match backslashes in property paths. */
      var reEscapeChar = /\\(\\)?/g;

      /**
       * Used to match
       * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
       */
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

      /** Used to match `RegExp` flags from their coerced string values. */
      var reFlags = /\w*$/;

      /** Used to detect bad signed hexadecimal string values. */
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

      /** Used to detect binary string values. */
      var reIsBinary = /^0b[01]+$/i;

      /** Used to detect host constructors (Safari). */
      var reIsHostCtor = /^\[object .+?Constructor\]$/;

      /** Used to detect octal string values. */
      var reIsOctal = /^0o[0-7]+$/i;

      /** Used to detect unsigned integer values. */
      var reIsUint = /^(?:0|[1-9]\d*)$/;

      /** Used to match Latin Unicode letters (excluding mathematical operators). */
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

      /** Used to ensure capturing order of template delimiters. */
      var reNoMatch = /($^)/;

      /** Used to match unescaped characters in compiled string literals. */
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

      /** Used to compose unicode character classes. */
      var rsAstralRange = '\\ud800-\\udfff',
          rsComboMarksRange = '\\u0300-\\u036f',
          reComboHalfMarksRange = '\\ufe20-\\ufe2f',
          rsComboSymbolsRange = '\\u20d0-\\u20ff',
          rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
          rsDingbatRange = '\\u2700-\\u27bf',
          rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
          rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
          rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
          rsPunctuationRange = '\\u2000-\\u206f',
          rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
          rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
          rsVarRange = '\\ufe0e\\ufe0f',
          rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

      /** Used to compose unicode capture groups. */
      var rsApos = "['\u2019]",
          rsAstral = '[' + rsAstralRange + ']',
          rsBreak = '[' + rsBreakRange + ']',
          rsCombo = '[' + rsComboRange + ']',
          rsDigits = '\\d+',
          rsDingbat = '[' + rsDingbatRange + ']',
          rsLower = '[' + rsLowerRange + ']',
          rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
          rsFitz = '\\ud83c[\\udffb-\\udfff]',
          rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
          rsNonAstral = '[^' + rsAstralRange + ']',
          rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
          rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
          rsUpper = '[' + rsUpperRange + ']',
          rsZWJ = '\\u200d';

      /** Used to compose unicode regexes. */
      var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
          rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
          rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
          rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
          reOptMod = rsModifier + '?',
          rsOptVar = '[' + rsVarRange + ']?',
          rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
          rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
          rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
          rsSeq = rsOptVar + reOptMod + rsOptJoin,
          rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
          rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

      /** Used to match apostrophes. */
      var reApos = RegExp(rsApos, 'g');

      /**
       * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
       * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
       */
      var reComboMark = RegExp(rsCombo, 'g');

      /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
      var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

      /** Used to match complex or compound words. */
      var reUnicodeWord = RegExp([
        rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
        rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
        rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
        rsUpper + '+' + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join('|'), 'g');

      /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
      var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

      /** Used to detect strings that need a more robust regexp to match words. */
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

      /** Used to assign default `context` object properties. */
      var contextProps = [
        'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
        'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
        'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
        'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
        '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
      ];

      /** Used to make template sourceURLs easier to identify. */
      var templateCounter = -1;

      /** Used to identify `toStringTag` values of typed arrays. */
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
      typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
      typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
      typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
      typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
      typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
      typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
      typedArrayTags[errorTag] = typedArrayTags[funcTag] =
      typedArrayTags[mapTag] = typedArrayTags[numberTag] =
      typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
      typedArrayTags[setTag] = typedArrayTags[stringTag] =
      typedArrayTags[weakMapTag] = false;

      /** Used to identify `toStringTag` values supported by `_.clone`. */
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] =
      cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
      cloneableTags[boolTag] = cloneableTags[dateTag] =
      cloneableTags[float32Tag] = cloneableTags[float64Tag] =
      cloneableTags[int8Tag] = cloneableTags[int16Tag] =
      cloneableTags[int32Tag] = cloneableTags[mapTag] =
      cloneableTags[numberTag] = cloneableTags[objectTag] =
      cloneableTags[regexpTag] = cloneableTags[setTag] =
      cloneableTags[stringTag] = cloneableTags[symbolTag] =
      cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
      cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] =
      cloneableTags[weakMapTag] = false;

      /** Used to map Latin Unicode letters to basic Latin letters. */
      var deburredLetters = {
        // Latin-1 Supplement block.
        '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
        '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
        '\xc7': 'C',  '\xe7': 'c',
        '\xd0': 'D',  '\xf0': 'd',
        '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
        '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
        '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
        '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
        '\xd1': 'N',  '\xf1': 'n',
        '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
        '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
        '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
        '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
        '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
        '\xc6': 'Ae', '\xe6': 'ae',
        '\xde': 'Th', '\xfe': 'th',
        '\xdf': 'ss',
        // Latin Extended-A block.
        '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
        '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
        '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
        '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
        '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
        '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
        '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
        '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
        '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
        '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
        '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
        '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
        '\u0134': 'J',  '\u0135': 'j',
        '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
        '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
        '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
        '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
        '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
        '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
        '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
        '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
        '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
        '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
        '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
        '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
        '\u0163': 't',  '\u0165': 't', '\u0167': 't',
        '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
        '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
        '\u0174': 'W',  '\u0175': 'w',
        '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
        '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
        '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
        '\u0132': 'IJ', '\u0133': 'ij',
        '\u0152': 'Oe', '\u0153': 'oe',
        '\u0149': "'n", '\u017f': 's'
      };

      /** Used to map characters to HTML entities. */
      var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
      };

      /** Used to map HTML entities to characters. */
      var htmlUnescapes = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': "'"
      };

      /** Used to escape characters for inclusion in compiled string literals. */
      var stringEscapes = {
        '\\': '\\',
        "'": "'",
        '\n': 'n',
        '\r': 'r',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
      };

      /** Built-in method references without a dependency on `root`. */
      var freeParseFloat = parseFloat,
          freeParseInt = parseInt;

      /** Detect free variable `global` from Node.js. */
      var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

      /** Detect free variable `self`. */
      var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

      /** Used as a reference to the global object. */
      var root = freeGlobal || freeSelf || Function('return this')();

      /** Detect free variable `exports`. */
      var freeExports = exports && !exports.nodeType && exports;

      /** Detect free variable `module`. */
      var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

      /** Detect the popular CommonJS extension `module.exports`. */
      var moduleExports = freeModule && freeModule.exports === freeExports;

      /** Detect free variable `process` from Node.js. */
      var freeProcess = moduleExports && freeGlobal.process;

      /** Used to access faster Node.js helpers. */
      var nodeUtil = (function() {
        try {
          // Use `util.types` for Node.js 10+.
          var types = freeModule && freeModule.require && freeModule.require('util').types;

          if (types) {
            return types;
          }

          // Legacy `process.binding('util')` for Node.js < 10.
          return freeProcess && freeProcess.binding && freeProcess.binding('util');
        } catch (e) {}
      }());

      /* Node.js helper references. */
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
          nodeIsDate = nodeUtil && nodeUtil.isDate,
          nodeIsMap = nodeUtil && nodeUtil.isMap,
          nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
          nodeIsSet = nodeUtil && nodeUtil.isSet,
          nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

      /*--------------------------------------------------------------------------*/

      /**
       * A faster alternative to `Function#apply`, this function invokes `func`
       * with the `this` binding of `thisArg` and the arguments of `args`.
       *
       * @private
       * @param {Function} func The function to invoke.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} args The arguments to invoke `func` with.
       * @returns {*} Returns the result of `func`.
       */
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0: return func.call(thisArg);
          case 1: return func.call(thisArg, args[0]);
          case 2: return func.call(thisArg, args[0], args[1]);
          case 3: return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }

      /**
       * A specialized version of `baseAggregator` for arrays.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform keys.
       * @param {Object} accumulator The initial aggregated object.
       * @returns {Function} Returns `accumulator`.
       */
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }

      /**
       * A specialized version of `_.forEach` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns `array`.
       */
      function arrayEach(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }

      /**
       * A specialized version of `_.forEachRight` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns `array`.
       */
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;

        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }

      /**
       * A specialized version of `_.every` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`.
       */
      function arrayEvery(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }

      /**
       * A specialized version of `_.filter` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */
      function arrayFilter(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }

      /**
       * A specialized version of `_.includes` for arrays without support for
       * specifying an index to search from.
       *
       * @private
       * @param {Array} [array] The array to inspect.
       * @param {*} target The value to search for.
       * @returns {boolean} Returns `true` if `target` is found, else `false`.
       */
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }

      /**
       * This function is like `arrayIncludes` except that it accepts a comparator.
       *
       * @private
       * @param {Array} [array] The array to inspect.
       * @param {*} target The value to search for.
       * @param {Function} comparator The comparator invoked per element.
       * @returns {boolean} Returns `true` if `target` is found, else `false`.
       */
      function arrayIncludesWith(array, value, comparator) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }

      /**
       * A specialized version of `_.map` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function arrayMap(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length,
            result = Array(length);

        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }

      /**
       * Appends the elements of `values` to `array`.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to append.
       * @returns {Array} Returns `array`.
       */
      function arrayPush(array, values) {
        var index = -1,
            length = values.length,
            offset = array.length;

        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }

      /**
       * A specialized version of `_.reduce` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @param {boolean} [initAccum] Specify using the first element of `array` as
       *  the initial value.
       * @returns {*} Returns the accumulated value.
       */
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1,
            length = array == null ? 0 : array.length;

        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }

      /**
       * A specialized version of `_.reduceRight` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @param {boolean} [initAccum] Specify using the last element of `array` as
       *  the initial value.
       * @returns {*} Returns the accumulated value.
       */
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }

      /**
       * A specialized version of `_.some` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */
      function arraySome(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }

      /**
       * Gets the size of an ASCII `string`.
       *
       * @private
       * @param {string} string The string inspect.
       * @returns {number} Returns the string size.
       */
      var asciiSize = baseProperty('length');

      /**
       * Converts an ASCII `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function asciiToArray(string) {
        return string.split('');
      }

      /**
       * Splits an ASCII `string` into an array of its words.
       *
       * @private
       * @param {string} The string to inspect.
       * @returns {Array} Returns the words of `string`.
       */
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }

      /**
       * The base implementation of methods like `_.findKey` and `_.findLastKey`,
       * without support for iteratee shorthands, which iterates over `collection`
       * using `eachFunc`.
       *
       * @private
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} predicate The function invoked per iteration.
       * @param {Function} eachFunc The function to iterate over `collection`.
       * @returns {*} Returns the found element or its key, else `undefined`.
       */
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection) {
          if (predicate(value, key, collection)) {
            result = key;
            return false;
          }
        });
        return result;
      }

      /**
       * The base implementation of `_.findIndex` and `_.findLastIndex` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} predicate The function invoked per iteration.
       * @param {number} fromIndex The index to search from.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length,
            index = fromIndex + (fromRight ? 1 : -1);

        while ((fromRight ? index-- : ++index < length)) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseIndexOf(array, value, fromIndex) {
        return value === value
          ? strictIndexOf(array, value, fromIndex)
          : baseFindIndex(array, baseIsNaN, fromIndex);
      }

      /**
       * This function is like `baseIndexOf` except that it accepts a comparator.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @param {Function} comparator The comparator invoked per element.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1,
            length = array.length;

        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * The base implementation of `_.isNaN` without support for number objects.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       */
      function baseIsNaN(value) {
        return value !== value;
      }

      /**
       * The base implementation of `_.mean` and `_.meanBy` without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {number} Returns the mean.
       */
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? (baseSum(array, iteratee) / length) : NAN;
      }

      /**
       * The base implementation of `_.property` without support for deep paths.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @returns {Function} Returns the new accessor function.
       */
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined$1 : object[key];
        };
      }

      /**
       * The base implementation of `_.propertyOf` without support for deep paths.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new accessor function.
       */
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined$1 : object[key];
        };
      }

      /**
       * The base implementation of `_.reduce` and `_.reduceRight`, without support
       * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {*} accumulator The initial value.
       * @param {boolean} initAccum Specify using the first or last element of
       *  `collection` as the initial value.
       * @param {Function} eachFunc The function to iterate over `collection`.
       * @returns {*} Returns the accumulated value.
       */
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection) {
          accumulator = initAccum
            ? (initAccum = false, value)
            : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
      }

      /**
       * The base implementation of `_.sortBy` which uses `comparer` to define the
       * sort order of `array` and replaces criteria objects with their corresponding
       * values.
       *
       * @private
       * @param {Array} array The array to sort.
       * @param {Function} comparer The function to define sort order.
       * @returns {Array} Returns `array`.
       */
      function baseSortBy(array, comparer) {
        var length = array.length;

        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }

      /**
       * The base implementation of `_.sum` and `_.sumBy` without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {number} Returns the sum.
       */
      function baseSum(array, iteratee) {
        var result,
            index = -1,
            length = array.length;

        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined$1) {
            result = result === undefined$1 ? current : (result + current);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.times` without support for iteratee shorthands
       * or max array length checks.
       *
       * @private
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       */
      function baseTimes(n, iteratee) {
        var index = -1,
            result = Array(n);

        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }

      /**
       * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
       * of key-value pairs for `object` corresponding to the property names of `props`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} props The property names to get values for.
       * @returns {Object} Returns the key-value pairs.
       */
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }

      /**
       * The base implementation of `_.trim`.
       *
       * @private
       * @param {string} string The string to trim.
       * @returns {string} Returns the trimmed string.
       */
      function baseTrim(string) {
        return string
          ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
          : string;
      }

      /**
       * The base implementation of `_.unary` without support for storing metadata.
       *
       * @private
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       */
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }

      /**
       * The base implementation of `_.values` and `_.valuesIn` which creates an
       * array of `object` property values corresponding to the property names
       * of `props`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} props The property names to get values for.
       * @returns {Object} Returns the array of property values.
       */
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }

      /**
       * Checks if a `cache` value for `key` exists.
       *
       * @private
       * @param {Object} cache The cache to query.
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function cacheHas(cache, key) {
        return cache.has(key);
      }

      /**
       * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
       * that is not found in the character symbols.
       *
       * @private
       * @param {Array} strSymbols The string symbols to inspect.
       * @param {Array} chrSymbols The character symbols to find.
       * @returns {number} Returns the index of the first unmatched string symbol.
       */
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1,
            length = strSymbols.length;

        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
        return index;
      }

      /**
       * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
       * that is not found in the character symbols.
       *
       * @private
       * @param {Array} strSymbols The string symbols to inspect.
       * @param {Array} chrSymbols The character symbols to find.
       * @returns {number} Returns the index of the last unmatched string symbol.
       */
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;

        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
        return index;
      }

      /**
       * Gets the number of `placeholder` occurrences in `array`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} placeholder The placeholder to search for.
       * @returns {number} Returns the placeholder count.
       */
      function countHolders(array, placeholder) {
        var length = array.length,
            result = 0;

        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }

      /**
       * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
       * letters to basic Latin letters.
       *
       * @private
       * @param {string} letter The matched letter to deburr.
       * @returns {string} Returns the deburred letter.
       */
      var deburrLetter = basePropertyOf(deburredLetters);

      /**
       * Used by `_.escape` to convert characters to HTML entities.
       *
       * @private
       * @param {string} chr The matched character to escape.
       * @returns {string} Returns the escaped character.
       */
      var escapeHtmlChar = basePropertyOf(htmlEscapes);

      /**
       * Used by `_.template` to escape characters for inclusion in compiled string literals.
       *
       * @private
       * @param {string} chr The matched character to escape.
       * @returns {string} Returns the escaped character.
       */
      function escapeStringChar(chr) {
        return '\\' + stringEscapes[chr];
      }

      /**
       * Gets the value at `key` of `object`.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */
      function getValue(object, key) {
        return object == null ? undefined$1 : object[key];
      }

      /**
       * Checks if `string` contains Unicode symbols.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {boolean} Returns `true` if a symbol is found, else `false`.
       */
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }

      /**
       * Checks if `string` contains a word composed of Unicode symbols.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {boolean} Returns `true` if a word is found, else `false`.
       */
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }

      /**
       * Converts `iterator` to an array.
       *
       * @private
       * @param {Object} iterator The iterator to convert.
       * @returns {Array} Returns the converted array.
       */
      function iteratorToArray(iterator) {
        var data,
            result = [];

        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }

      /**
       * Converts `map` to its key-value pairs.
       *
       * @private
       * @param {Object} map The map to convert.
       * @returns {Array} Returns the key-value pairs.
       */
      function mapToArray(map) {
        var index = -1,
            result = Array(map.size);

        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }

      /**
       * Creates a unary function that invokes `func` with its argument transformed.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {Function} transform The argument transform.
       * @returns {Function} Returns the new function.
       */
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }

      /**
       * Replaces all `placeholder` elements in `array` with an internal placeholder
       * and returns an array of their indexes.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {*} placeholder The placeholder to replace.
       * @returns {Array} Returns the new array of placeholder indexes.
       */
      function replaceHolders(array, placeholder) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }

      /**
       * Converts `set` to an array of its values.
       *
       * @private
       * @param {Object} set The set to convert.
       * @returns {Array} Returns the values.
       */
      function setToArray(set) {
        var index = -1,
            result = Array(set.size);

        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }

      /**
       * Converts `set` to its value-value pairs.
       *
       * @private
       * @param {Object} set The set to convert.
       * @returns {Array} Returns the value-value pairs.
       */
      function setToPairs(set) {
        var index = -1,
            result = Array(set.size);

        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }

      /**
       * A specialized version of `_.indexOf` which performs strict equality
       * comparisons of values, i.e. `===`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1,
            length = array.length;

        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }

      /**
       * A specialized version of `_.lastIndexOf` which performs strict equality
       * comparisons of values, i.e. `===`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }

      /**
       * Gets the number of symbols in `string`.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {number} Returns the string size.
       */
      function stringSize(string) {
        return hasUnicode(string)
          ? unicodeSize(string)
          : asciiSize(string);
      }

      /**
       * Converts `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function stringToArray(string) {
        return hasUnicode(string)
          ? unicodeToArray(string)
          : asciiToArray(string);
      }

      /**
       * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
       * character of `string`.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {number} Returns the index of the last non-whitespace character.
       */
      function trimmedEndIndex(string) {
        var index = string.length;

        while (index-- && reWhitespace.test(string.charAt(index))) {}
        return index;
      }

      /**
       * Used by `_.unescape` to convert HTML entities to characters.
       *
       * @private
       * @param {string} chr The matched character to unescape.
       * @returns {string} Returns the unescaped character.
       */
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

      /**
       * Gets the size of a Unicode `string`.
       *
       * @private
       * @param {string} string The string inspect.
       * @returns {number} Returns the string size.
       */
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }

      /**
       * Converts a Unicode `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }

      /**
       * Splits a Unicode `string` into an array of its words.
       *
       * @private
       * @param {string} The string to inspect.
       * @returns {Array} Returns the words of `string`.
       */
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }

      /*--------------------------------------------------------------------------*/

      /**
       * Create a new pristine `lodash` function using the `context` object.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Util
       * @param {Object} [context=root] The context object.
       * @returns {Function} Returns a new `lodash` function.
       * @example
       *
       * _.mixin({ 'foo': _.constant('foo') });
       *
       * var lodash = _.runInContext();
       * lodash.mixin({ 'bar': lodash.constant('bar') });
       *
       * _.isFunction(_.foo);
       * // => true
       * _.isFunction(_.bar);
       * // => false
       *
       * lodash.isFunction(lodash.foo);
       * // => false
       * lodash.isFunction(lodash.bar);
       * // => true
       *
       * // Create a suped-up `defer` in Node.js.
       * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
       */
      var runInContext = (function runInContext(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

        /** Built-in constructor references. */
        var Array = context.Array,
            Date = context.Date,
            Error = context.Error,
            Function = context.Function,
            Math = context.Math,
            Object = context.Object,
            RegExp = context.RegExp,
            String = context.String,
            TypeError = context.TypeError;

        /** Used for built-in method references. */
        var arrayProto = Array.prototype,
            funcProto = Function.prototype,
            objectProto = Object.prototype;

        /** Used to detect overreaching core-js shims. */
        var coreJsData = context['__core-js_shared__'];

        /** Used to resolve the decompiled source of functions. */
        var funcToString = funcProto.toString;

        /** Used to check objects for own properties. */
        var hasOwnProperty = objectProto.hasOwnProperty;

        /** Used to generate unique IDs. */
        var idCounter = 0;

        /** Used to detect methods masquerading as native. */
        var maskSrcKey = (function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
          return uid ? ('Symbol(src)_1.' + uid) : '';
        }());

        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */
        var nativeObjectToString = objectProto.toString;

        /** Used to infer the `Object` constructor. */
        var objectCtorString = funcToString.call(Object);

        /** Used to restore the original `_` reference in `_.noConflict`. */
        var oldDash = root._;

        /** Used to detect if a method is native. */
        var reIsNative = RegExp('^' +
          funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
          .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
        );

        /** Built-in value references. */
        var Buffer = moduleExports ? context.Buffer : undefined$1,
            Symbol = context.Symbol,
            Uint8Array = context.Uint8Array,
            allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
            getPrototype = overArg(Object.getPrototypeOf, Object),
            objectCreate = Object.create,
            propertyIsEnumerable = objectProto.propertyIsEnumerable,
            splice = arrayProto.splice,
            spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
            symIterator = Symbol ? Symbol.iterator : undefined$1,
            symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

        var defineProperty = (function() {
          try {
            var func = getNative(Object, 'defineProperty');
            func({}, '', {});
            return func;
          } catch (e) {}
        }());

        /** Mocked built-ins. */
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
            ctxNow = Date && Date.now !== root.Date.now && Date.now,
            ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

        /* Built-in method references for those with the same name as other `lodash` methods. */
        var nativeCeil = Math.ceil,
            nativeFloor = Math.floor,
            nativeGetSymbols = Object.getOwnPropertySymbols,
            nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
            nativeIsFinite = context.isFinite,
            nativeJoin = arrayProto.join,
            nativeKeys = overArg(Object.keys, Object),
            nativeMax = Math.max,
            nativeMin = Math.min,
            nativeNow = Date.now,
            nativeParseInt = context.parseInt,
            nativeRandom = Math.random,
            nativeReverse = arrayProto.reverse;

        /* Built-in method references that are verified to be native. */
        var DataView = getNative(context, 'DataView'),
            Map = getNative(context, 'Map'),
            Promise = getNative(context, 'Promise'),
            Set = getNative(context, 'Set'),
            WeakMap = getNative(context, 'WeakMap'),
            nativeCreate = getNative(Object, 'create');

        /** Used to store function metadata. */
        var metaMap = WeakMap && new WeakMap;

        /** Used to lookup unminified function names. */
        var realNames = {};

        /** Used to detect maps, sets, and weakmaps. */
        var dataViewCtorString = toSource(DataView),
            mapCtorString = toSource(Map),
            promiseCtorString = toSource(Promise),
            setCtorString = toSource(Set),
            weakMapCtorString = toSource(WeakMap);

        /** Used to convert symbols to primitives and strings. */
        var symbolProto = Symbol ? Symbol.prototype : undefined$1,
            symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
            symbolToString = symbolProto ? symbolProto.toString : undefined$1;

        /*------------------------------------------------------------------------*/

        /**
         * Creates a `lodash` object which wraps `value` to enable implicit method
         * chain sequences. Methods that operate on and return arrays, collections,
         * and functions can be chained together. Methods that retrieve a single value
         * or may return a primitive value will automatically end the chain sequence
         * and return the unwrapped value. Otherwise, the value must be unwrapped
         * with `_#value`.
         *
         * Explicit chain sequences, which must be unwrapped with `_#value`, may be
         * enabled using `_.chain`.
         *
         * The execution of chained methods is lazy, that is, it's deferred until
         * `_#value` is implicitly or explicitly called.
         *
         * Lazy evaluation allows several methods to support shortcut fusion.
         * Shortcut fusion is an optimization to merge iteratee calls; this avoids
         * the creation of intermediate arrays and can greatly reduce the number of
         * iteratee executions. Sections of a chain sequence qualify for shortcut
         * fusion if the section is applied to an array and iteratees accept only
         * one argument. The heuristic for whether a section qualifies for shortcut
         * fusion is subject to change.
         *
         * Chaining is supported in custom builds as long as the `_#value` method is
         * directly or indirectly included in the build.
         *
         * In addition to lodash methods, wrappers have `Array` and `String` methods.
         *
         * The wrapper `Array` methods are:
         * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
         *
         * The wrapper `String` methods are:
         * `replace` and `split`
         *
         * The wrapper methods that support shortcut fusion are:
         * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
         * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
         * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
         *
         * The chainable wrapper methods are:
         * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
         * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
         * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
         * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
         * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
         * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
         * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
         * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
         * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
         * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
         * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
         * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
         * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
         * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
         * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
         * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
         * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
         * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
         * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
         * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
         * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
         * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
         * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
         * `zipObject`, `zipObjectDeep`, and `zipWith`
         *
         * The wrapper methods that are **not** chainable by default are:
         * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
         * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
         * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
         * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
         * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
         * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
         * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
         * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
         * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
         * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
         * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
         * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
         * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
         * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
         * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
         * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
         * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
         * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
         * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
         * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
         * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
         * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
         * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
         * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
         * `upperFirst`, `value`, and `words`
         *
         * @name _
         * @constructor
         * @category Seq
         * @param {*} value The value to wrap in a `lodash` instance.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var wrapped = _([1, 2, 3]);
         *
         * // Returns an unwrapped value.
         * wrapped.reduce(_.add);
         * // => 6
         *
         * // Returns a wrapped value.
         * var squares = wrapped.map(square);
         *
         * _.isArray(squares);
         * // => false
         *
         * _.isArray(squares.value());
         * // => true
         */
        function lodash(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, '__wrapped__')) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }

        /**
         * The base implementation of `_.create` without support for assigning
         * properties to the created object.
         *
         * @private
         * @param {Object} proto The object to inherit from.
         * @returns {Object} Returns the new object.
         */
        var baseCreate = (function() {
          function object() {}
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result = new object;
            object.prototype = undefined$1;
            return result;
          };
        }());

        /**
         * The function whose prototype chain sequence wrappers inherit from.
         *
         * @private
         */
        function baseLodash() {
          // No operation performed.
        }

        /**
         * The base constructor for creating `lodash` wrapper objects.
         *
         * @private
         * @param {*} value The value to wrap.
         * @param {boolean} [chainAll] Enable explicit method chain sequences.
         */
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined$1;
        }

        /**
         * By default, the template delimiters used by lodash are like those in
         * embedded Ruby (ERB) as well as ES2015 template strings. Change the
         * following template settings to use alternative delimiters.
         *
         * @static
         * @memberOf _
         * @type {Object}
         */
        lodash.templateSettings = {

          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          'escape': reEscape,

          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          'evaluate': reEvaluate,

          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          'interpolate': reInterpolate,

          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          'variable': '',

          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          'imports': {

            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            '_': lodash
          }
        };

        // Ensure wrappers are instances of `baseLodash`.
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;

        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;

        /*------------------------------------------------------------------------*/

        /**
         * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
         *
         * @private
         * @constructor
         * @param {*} value The value to wrap.
         */
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }

        /**
         * Creates a clone of the lazy wrapper object.
         *
         * @private
         * @name clone
         * @memberOf LazyWrapper
         * @returns {Object} Returns the cloned `LazyWrapper` object.
         */
        function lazyClone() {
          var result = new LazyWrapper(this.__wrapped__);
          result.__actions__ = copyArray(this.__actions__);
          result.__dir__ = this.__dir__;
          result.__filtered__ = this.__filtered__;
          result.__iteratees__ = copyArray(this.__iteratees__);
          result.__takeCount__ = this.__takeCount__;
          result.__views__ = copyArray(this.__views__);
          return result;
        }

        /**
         * Reverses the direction of lazy iteration.
         *
         * @private
         * @name reverse
         * @memberOf LazyWrapper
         * @returns {Object} Returns the new reversed `LazyWrapper` object.
         */
        function lazyReverse() {
          if (this.__filtered__) {
            var result = new LazyWrapper(this);
            result.__dir__ = -1;
            result.__filtered__ = true;
          } else {
            result = this.clone();
            result.__dir__ *= -1;
          }
          return result;
        }

        /**
         * Extracts the unwrapped value from its lazy wrapper.
         *
         * @private
         * @name value
         * @memberOf LazyWrapper
         * @returns {*} Returns the unwrapped value.
         */
        function lazyValue() {
          var array = this.__wrapped__.value(),
              dir = this.__dir__,
              isArr = isArray(array),
              isRight = dir < 0,
              arrLength = isArr ? array.length : 0,
              view = getView(0, arrLength, this.__views__),
              start = view.start,
              end = view.end,
              length = end - start,
              index = isRight ? end : (start - 1),
              iteratees = this.__iteratees__,
              iterLength = iteratees.length,
              resIndex = 0,
              takeCount = nativeMin(length, this.__takeCount__);

          if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result = [];

          outer:
          while (length-- && resIndex < takeCount) {
            index += dir;

            var iterIndex = -1,
                value = array[index];

            while (++iterIndex < iterLength) {
              var data = iteratees[iterIndex],
                  iteratee = data.iteratee,
                  type = data.type,
                  computed = iteratee(value);

              if (type == LAZY_MAP_FLAG) {
                value = computed;
              } else if (!computed) {
                if (type == LAZY_FILTER_FLAG) {
                  continue outer;
                } else {
                  break outer;
                }
              }
            }
            result[resIndex++] = value;
          }
          return result;
        }

        // Ensure `LazyWrapper` is an instance of `baseLodash`.
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;

        /*------------------------------------------------------------------------*/

        /**
         * Creates a hash object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Hash(entries) {
          var index = -1,
              length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        /**
         * Removes all key-value entries from the hash.
         *
         * @private
         * @name clear
         * @memberOf Hash
         */
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }

        /**
         * Removes `key` and its value from the hash.
         *
         * @private
         * @name delete
         * @memberOf Hash
         * @param {Object} hash The hash to modify.
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function hashDelete(key) {
          var result = this.has(key) && delete this.__data__[key];
          this.size -= result ? 1 : 0;
          return result;
        }

        /**
         * Gets the hash value for `key`.
         *
         * @private
         * @name get
         * @memberOf Hash
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result = data[key];
            return result === HASH_UNDEFINED ? undefined$1 : result;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
        }

        /**
         * Checks if a hash value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Hash
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
        }

        /**
         * Sets the hash `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Hash
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the hash instance.
         */
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
          return this;
        }

        // Add methods to `Hash`.
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;

        /*------------------------------------------------------------------------*/

        /**
         * Creates an list cache object.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function ListCache(entries) {
          var index = -1,
              length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        /**
         * Removes all key-value entries from the list cache.
         *
         * @private
         * @name clear
         * @memberOf ListCache
         */
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }

        /**
         * Removes `key` and its value from the list cache.
         *
         * @private
         * @name delete
         * @memberOf ListCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function listCacheDelete(key) {
          var data = this.__data__,
              index = assocIndexOf(data, key);

          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }

        /**
         * Gets the list cache value for `key`.
         *
         * @private
         * @name get
         * @memberOf ListCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function listCacheGet(key) {
          var data = this.__data__,
              index = assocIndexOf(data, key);

          return index < 0 ? undefined$1 : data[index][1];
        }

        /**
         * Checks if a list cache value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf ListCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }

        /**
         * Sets the list cache `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf ListCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the list cache instance.
         */
        function listCacheSet(key, value) {
          var data = this.__data__,
              index = assocIndexOf(data, key);

          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }

        // Add methods to `ListCache`.
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;

        /*------------------------------------------------------------------------*/

        /**
         * Creates a map cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function MapCache(entries) {
          var index = -1,
              length = entries == null ? 0 : entries.length;

          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }

        /**
         * Removes all key-value entries from the map.
         *
         * @private
         * @name clear
         * @memberOf MapCache
         */
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            'hash': new Hash,
            'map': new (Map || ListCache),
            'string': new Hash
          };
        }

        /**
         * Removes `key` and its value from the map.
         *
         * @private
         * @name delete
         * @memberOf MapCache
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function mapCacheDelete(key) {
          var result = getMapData(this, key)['delete'](key);
          this.size -= result ? 1 : 0;
          return result;
        }

        /**
         * Gets the map value for `key`.
         *
         * @private
         * @name get
         * @memberOf MapCache
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }

        /**
         * Checks if a map value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf MapCache
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }

        /**
         * Sets the map `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf MapCache
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the map cache instance.
         */
        function mapCacheSet(key, value) {
          var data = getMapData(this, key),
              size = data.size;

          data.set(key, value);
          this.size += data.size == size ? 0 : 1;
          return this;
        }

        // Add methods to `MapCache`.
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;

        /*------------------------------------------------------------------------*/

        /**
         *
         * Creates an array cache object to store unique values.
         *
         * @private
         * @constructor
         * @param {Array} [values] The values to cache.
         */
        function SetCache(values) {
          var index = -1,
              length = values == null ? 0 : values.length;

          this.__data__ = new MapCache;
          while (++index < length) {
            this.add(values[index]);
          }
        }

        /**
         * Adds `value` to the array cache.
         *
         * @private
         * @name add
         * @memberOf SetCache
         * @alias push
         * @param {*} value The value to cache.
         * @returns {Object} Returns the cache instance.
         */
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }

        /**
         * Checks if `value` is in the array cache.
         *
         * @private
         * @name has
         * @memberOf SetCache
         * @param {*} value The value to search for.
         * @returns {number} Returns `true` if `value` is found, else `false`.
         */
        function setCacheHas(value) {
          return this.__data__.has(value);
        }

        // Add methods to `SetCache`.
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;

        /*------------------------------------------------------------------------*/

        /**
         * Creates a stack cache object to store key-value pairs.
         *
         * @private
         * @constructor
         * @param {Array} [entries] The key-value pairs to cache.
         */
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }

        /**
         * Removes all key-value entries from the stack.
         *
         * @private
         * @name clear
         * @memberOf Stack
         */
        function stackClear() {
          this.__data__ = new ListCache;
          this.size = 0;
        }

        /**
         * Removes `key` and its value from the stack.
         *
         * @private
         * @name delete
         * @memberOf Stack
         * @param {string} key The key of the value to remove.
         * @returns {boolean} Returns `true` if the entry was removed, else `false`.
         */
        function stackDelete(key) {
          var data = this.__data__,
              result = data['delete'](key);

          this.size = data.size;
          return result;
        }

        /**
         * Gets the stack value for `key`.
         *
         * @private
         * @name get
         * @memberOf Stack
         * @param {string} key The key of the value to get.
         * @returns {*} Returns the entry value.
         */
        function stackGet(key) {
          return this.__data__.get(key);
        }

        /**
         * Checks if a stack value for `key` exists.
         *
         * @private
         * @name has
         * @memberOf Stack
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function stackHas(key) {
          return this.__data__.has(key);
        }

        /**
         * Sets the stack `key` to `value`.
         *
         * @private
         * @name set
         * @memberOf Stack
         * @param {string} key The key of the value to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns the stack cache instance.
         */
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }

        // Add methods to `Stack`.
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;

        /*------------------------------------------------------------------------*/

        /**
         * Creates an array of the enumerable property names of the array-like `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @param {boolean} inherited Specify returning inherited property names.
         * @returns {Array} Returns the array of property names.
         */
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value),
              isArg = !isArr && isArguments(value),
              isBuff = !isArr && !isArg && isBuffer(value),
              isType = !isArr && !isArg && !isBuff && isTypedArray(value),
              skipIndexes = isArr || isArg || isBuff || isType,
              result = skipIndexes ? baseTimes(value.length, String) : [],
              length = result.length;

          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) &&
                !(skipIndexes && (
                   // Safari 9 has enumerable `arguments.length` in strict mode.
                   key == 'length' ||
                   // Node.js 0.10 has enumerable non-index properties on buffers.
                   (isBuff && (key == 'offset' || key == 'parent')) ||
                   // PhantomJS 2 has enumerable non-index properties on typed arrays.
                   (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                   // Skip index properties.
                   isIndex(key, length)
                ))) {
              result.push(key);
            }
          }
          return result;
        }

        /**
         * A specialized version of `_.sample` for arrays.
         *
         * @private
         * @param {Array} array The array to sample.
         * @returns {*} Returns the random element.
         */
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined$1;
        }

        /**
         * A specialized version of `_.sampleSize` for arrays.
         *
         * @private
         * @param {Array} array The array to sample.
         * @param {number} n The number of elements to sample.
         * @returns {Array} Returns the random elements.
         */
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }

        /**
         * A specialized version of `_.shuffle` for arrays.
         *
         * @private
         * @param {Array} array The array to shuffle.
         * @returns {Array} Returns the new shuffled array.
         */
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }

        /**
         * This function is like `assignValue` except that it doesn't assign
         * `undefined` values.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function assignMergeValue(object, key, value) {
          if ((value !== undefined$1 && !eq(object[key], value)) ||
              (value === undefined$1 && !(key in object))) {
            baseAssignValue(object, key, value);
          }
        }

        /**
         * Assigns `value` to `key` of `object` if the existing value is not equivalent
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
              (value === undefined$1 && !(key in object))) {
            baseAssignValue(object, key, value);
          }
        }

        /**
         * Gets the index at which the `key` is found in `array` of key-value pairs.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} key The key to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }

        /**
         * Aggregates elements of `collection` on `accumulator` with keys transformed
         * by `iteratee` and values set by `setter`.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} setter The function to set `accumulator` values.
         * @param {Function} iteratee The iteratee to transform keys.
         * @param {Object} accumulator The initial aggregated object.
         * @returns {Function} Returns `accumulator`.
         */
        function baseAggregator(collection, setter, iteratee, accumulator) {
          baseEach(collection, function(value, key, collection) {
            setter(accumulator, value, iteratee(value), collection);
          });
          return accumulator;
        }

        /**
         * The base implementation of `_.assign` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }

        /**
         * The base implementation of `_.assignIn` without support for multiple sources
         * or `customizer` functions.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @returns {Object} Returns `object`.
         */
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }

        /**
         * The base implementation of `assignValue` and `assignMergeValue` without
         * value checks.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {string} key The key of the property to assign.
         * @param {*} value The value to assign.
         */
        function baseAssignValue(object, key, value) {
          if (key == '__proto__' && defineProperty) {
            defineProperty(object, key, {
              'configurable': true,
              'enumerable': true,
              'value': value,
              'writable': true
            });
          } else {
            object[key] = value;
          }
        }

        /**
         * The base implementation of `_.at` without support for individual paths.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {string[]} paths The property paths to pick.
         * @returns {Array} Returns the picked elements.
         */
        function baseAt(object, paths) {
          var index = -1,
              length = paths.length,
              result = Array(length),
              skip = object == null;

          while (++index < length) {
            result[index] = skip ? undefined$1 : get(object, paths[index]);
          }
          return result;
        }

        /**
         * The base implementation of `_.clamp` which doesn't coerce arguments.
         *
         * @private
         * @param {number} number The number to clamp.
         * @param {number} [lower] The lower bound.
         * @param {number} upper The upper bound.
         * @returns {number} Returns the clamped number.
         */
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined$1) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined$1) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }

        /**
         * The base implementation of `_.clone` and `_.cloneDeep` which tracks
         * traversed objects.
         *
         * @private
         * @param {*} value The value to clone.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Deep clone
         *  2 - Flatten inherited properties
         *  4 - Clone symbols
         * @param {Function} [customizer] The function to customize cloning.
         * @param {string} [key] The key of `value`.
         * @param {Object} [object] The parent object of `value`.
         * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
         * @returns {*} Returns the cloned value.
         */
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result,
              isDeep = bitmask & CLONE_DEEP_FLAG,
              isFlat = bitmask & CLONE_FLAT_FLAG,
              isFull = bitmask & CLONE_SYMBOLS_FLAG;

          if (customizer) {
            result = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result !== undefined$1) {
            return result;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result);
            }
          } else {
            var tag = getTag(value),
                isFunc = tag == funcTag || tag == genTag;

            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
              result = (isFlat || isFunc) ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat
                  ? copySymbolsIn(value, baseAssignIn(result, value))
                  : copySymbols(value, baseAssign(result, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result = initCloneByTag(value, tag, isDeep);
            }
          }
          // Check for circular references and return its corresponding clone.
          stack || (stack = new Stack);
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result);

          if (isSet(value)) {
            value.forEach(function(subValue) {
              result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key) {
              result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
          }

          var keysFunc = isFull
            ? (isFlat ? getAllKeysIn : getAllKeys)
            : (isFlat ? keysIn : keys);

          var props = isArr ? undefined$1 : keysFunc(value);
          arrayEach(props || value, function(subValue, key) {
            if (props) {
              key = subValue;
              subValue = value[key];
            }
            // Recursively populate clone (susceptible to call stack limits).
            assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
          return result;
        }

        /**
         * The base implementation of `_.conforms` which doesn't clone `source`.
         *
         * @private
         * @param {Object} source The object of property predicates to conform to.
         * @returns {Function} Returns the new spec function.
         */
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }

        /**
         * The base implementation of `_.conformsTo` which accepts `props` to check.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property predicates to conform to.
         * @returns {boolean} Returns `true` if `object` conforms, else `false`.
         */
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object(object);
          while (length--) {
            var key = props[length],
                predicate = source[key],
                value = object[key];

            if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }

        /**
         * The base implementation of `_.delay` and `_.defer` which accepts `args`
         * to provide to `func`.
         *
         * @private
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @param {Array} args The arguments to provide to `func`.
         * @returns {number|Object} Returns the timer id or timeout object.
         */
        function baseDelay(func, wait, args) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return setTimeout(function() { func.apply(undefined$1, args); }, wait);
        }

        /**
         * The base implementation of methods like `_.difference` without support
         * for excluding multiple arrays or iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Array} values The values to exclude.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         */
        function baseDifference(array, values, iteratee, comparator) {
          var index = -1,
              includes = arrayIncludes,
              isCommon = true,
              length = array.length,
              result = [],
              valuesLength = values.length;

          if (!length) {
            return result;
          }
          if (iteratee) {
            values = arrayMap(values, baseUnary(iteratee));
          }
          if (comparator) {
            includes = arrayIncludesWith;
            isCommon = false;
          }
          else if (values.length >= LARGE_ARRAY_SIZE) {
            includes = cacheHas;
            isCommon = false;
            values = new SetCache(values);
          }
          outer:
          while (++index < length) {
            var value = array[index],
                computed = iteratee == null ? value : iteratee(value);

            value = (comparator || value !== 0) ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result.push(value);
            }
            else if (!includes(values, computed, comparator)) {
              result.push(value);
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.forEach` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         */
        var baseEach = createBaseEach(baseForOwn);

        /**
         * The base implementation of `_.forEachRight` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         */
        var baseEachRight = createBaseEach(baseForOwnRight, true);

        /**
         * The base implementation of `_.every` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`
         */
        function baseEvery(collection, predicate) {
          var result = true;
          baseEach(collection, function(value, index, collection) {
            result = !!predicate(value, index, collection);
            return result;
          });
          return result;
        }

        /**
         * The base implementation of methods like `_.max` and `_.min` which accepts a
         * `comparator` to determine the extremum value.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The iteratee invoked per iteration.
         * @param {Function} comparator The comparator used to compare values.
         * @returns {*} Returns the extremum value.
         */
        function baseExtremum(array, iteratee, comparator) {
          var index = -1,
              length = array.length;

          while (++index < length) {
            var value = array[index],
                current = iteratee(value);

            if (current != null && (computed === undefined$1
                  ? (current === current && !isSymbol(current))
                  : comparator(current, computed)
                )) {
              var computed = current,
                  result = value;
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.fill` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to fill.
         * @param {*} value The value to fill `array` with.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns `array`.
         */
        function baseFill(array, value, start, end) {
          var length = array.length;

          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : (length + start);
          }
          end = (end === undefined$1 || end > length) ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }

        /**
         * The base implementation of `_.filter` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function baseFilter(collection, predicate) {
          var result = [];
          baseEach(collection, function(value, index, collection) {
            if (predicate(value, index, collection)) {
              result.push(value);
            }
          });
          return result;
        }

        /**
         * The base implementation of `_.flatten` with support for restricting flattening.
         *
         * @private
         * @param {Array} array The array to flatten.
         * @param {number} depth The maximum recursion depth.
         * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
         * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
         * @param {Array} [result=[]] The initial result value.
         * @returns {Array} Returns the new flattened array.
         */
        function baseFlatten(array, depth, predicate, isStrict, result) {
          var index = -1,
              length = array.length;

          predicate || (predicate = isFlattenable);
          result || (result = []);

          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                // Recursively flatten arrays (susceptible to call stack limits).
                baseFlatten(value, depth - 1, predicate, isStrict, result);
              } else {
                arrayPush(result, value);
              }
            } else if (!isStrict) {
              result[result.length] = value;
            }
          }
          return result;
        }

        /**
         * The base implementation of `baseForOwn` which iterates over `object`
         * properties returned by `keysFunc` and invokes `iteratee` for each property.
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */
        var baseFor = createBaseFor();

        /**
         * This function is like `baseFor` except that it iterates over properties
         * in the opposite order.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */
        var baseForRight = createBaseFor(true);

        /**
         * The base implementation of `_.forOwn` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForOwn(object, iteratee) {
          return object && baseFor(object, iteratee, keys);
        }

        /**
         * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */
        function baseForOwnRight(object, iteratee) {
          return object && baseForRight(object, iteratee, keys);
        }

        /**
         * The base implementation of `_.functions` which creates an array of
         * `object` function property names filtered from `props`.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Array} props The property names to filter.
         * @returns {Array} Returns the function names.
         */
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction(object[key]);
          });
        }

        /**
         * The base implementation of `_.get` without support for default values.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @returns {*} Returns the resolved value.
         */
        function baseGet(object, path) {
          path = castPath(path, object);

          var index = 0,
              length = path.length;

          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return (index && index == length) ? object : undefined$1;
        }

        /**
         * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
         * `keysFunc` and `symbolsFunc` to get the enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @param {Function} symbolsFunc The function to get the symbols of `object`.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result = keysFunc(object);
          return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }

        /**
         * The base implementation of `getTag` without fallbacks for buggy environments.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined$1 ? undefinedTag : nullTag;
          }
          return (symToStringTag && symToStringTag in Object(value))
            ? getRawTag(value)
            : objectToString(value);
        }

        /**
         * The base implementation of `_.gt` which doesn't coerce arguments.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is greater than `other`,
         *  else `false`.
         */
        function baseGt(value, other) {
          return value > other;
        }

        /**
         * The base implementation of `_.has` without support for deep paths.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {Array|string} key The key to check.
         * @returns {boolean} Returns `true` if `key` exists, else `false`.
         */
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }

        /**
         * The base implementation of `_.hasIn` without support for deep paths.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {Array|string} key The key to check.
         * @returns {boolean} Returns `true` if `key` exists, else `false`.
         */
        function baseHasIn(object, key) {
          return object != null && key in Object(object);
        }

        /**
         * The base implementation of `_.inRange` which doesn't coerce arguments.
         *
         * @private
         * @param {number} number The number to check.
         * @param {number} start The start of the range.
         * @param {number} end The end of the range.
         * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
         */
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }

        /**
         * The base implementation of methods like `_.intersection`, without support
         * for iteratee shorthands, that accepts an array of arrays to inspect.
         *
         * @private
         * @param {Array} arrays The arrays to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of shared values.
         */
        function baseIntersection(arrays, iteratee, comparator) {
          var includes = comparator ? arrayIncludesWith : arrayIncludes,
              length = arrays[0].length,
              othLength = arrays.length,
              othIndex = othLength,
              caches = Array(othLength),
              maxLength = Infinity,
              result = [];

          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee) {
              array = arrayMap(array, baseUnary(iteratee));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
              ? new SetCache(othIndex && array)
              : undefined$1;
          }
          array = arrays[0];

          var index = -1,
              seen = caches[0];

          outer:
          while (++index < length && result.length < maxLength) {
            var value = array[index],
                computed = iteratee ? iteratee(value) : value;

            value = (comparator || value !== 0) ? value : 0;
            if (!(seen
                  ? cacheHas(seen, computed)
                  : includes(result, computed, comparator)
                )) {
              othIndex = othLength;
              while (--othIndex) {
                var cache = caches[othIndex];
                if (!(cache
                      ? cacheHas(cache, computed)
                      : includes(arrays[othIndex], computed, comparator))
                    ) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.invert` and `_.invertBy` which inverts
         * `object` with values transformed by `iteratee` and set by `setter`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} setter The function to set `accumulator` values.
         * @param {Function} iteratee The iteratee to transform values.
         * @param {Object} accumulator The initial inverted object.
         * @returns {Function} Returns `accumulator`.
         */
        function baseInverter(object, setter, iteratee, accumulator) {
          baseForOwn(object, function(value, key, object) {
            setter(accumulator, iteratee(value), key, object);
          });
          return accumulator;
        }

        /**
         * The base implementation of `_.invoke` without support for individual
         * method arguments.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the method to invoke.
         * @param {Array} args The arguments to invoke the method with.
         * @returns {*} Returns the result of the invoked method.
         */
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined$1 : apply(func, object, args);
        }

        /**
         * The base implementation of `_.isArguments`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         */
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }

        /**
         * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
         */
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }

        /**
         * The base implementation of `_.isDate` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
         */
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }

        /**
         * The base implementation of `_.isEqual` which supports partial comparisons
         * and tracks traversed objects.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @param {boolean} bitmask The bitmask flags.
         *  1 - Unordered comparison
         *  2 - Partial comparison
         * @param {Function} [customizer] The function to customize comparisons.
         * @param {Object} [stack] Tracks traversed `value` and `other` objects.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         */
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }

        /**
         * A specialized version of `baseIsEqual` for arrays and objects which performs
         * deep comparisons and tracks traversed objects enabling objects with circular
         * references to be compared.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} [stack] Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object),
              othIsArr = isArray(other),
              objTag = objIsArr ? arrayTag : getTag(object),
              othTag = othIsArr ? arrayTag : getTag(other);

          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;

          var objIsObj = objTag == objectTag,
              othIsObj = othTag == objectTag,
              isSameTag = objTag == othTag;

          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack);
            return (objIsArr || isTypedArray(object))
              ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
              : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object,
                  othUnwrapped = othIsWrapped ? other.value() : other;

              stack || (stack = new Stack);
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack);
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }

        /**
         * The base implementation of `_.isMap` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         */
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }

        /**
         * The base implementation of `_.isMatch` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @param {Array} matchData The property names, values, and compare flags to match.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         */
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length,
              length = index,
              noCustomizer = !customizer;

          if (object == null) {
            return !length;
          }
          object = Object(object);
          while (index--) {
            var data = matchData[index];
            if ((noCustomizer && data[2])
                  ? data[1] !== object[data[0]]
                  : !(data[0] in object)
                ) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0],
                objValue = object[key],
                srcValue = data[1];

            if (noCustomizer && data[2]) {
              if (objValue === undefined$1 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack;
              if (customizer) {
                var result = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result === undefined$1
                    ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                    : result
                  )) {
                return false;
              }
            }
          }
          return true;
        }

        /**
         * The base implementation of `_.isNative` without bad shim checks.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function,
         *  else `false`.
         */
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }

        /**
         * The base implementation of `_.isRegExp` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
         */
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }

        /**
         * The base implementation of `_.isSet` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         */
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }

        /**
         * The base implementation of `_.isTypedArray` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         */
        function baseIsTypedArray(value) {
          return isObjectLike(value) &&
            isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }

        /**
         * The base implementation of `_.iteratee`.
         *
         * @private
         * @param {*} [value=_.identity] The value to convert to an iteratee.
         * @returns {Function} Returns the iteratee.
         */
        function baseIteratee(value) {
          // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
          // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
          if (typeof value == 'function') {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == 'object') {
            return isArray(value)
              ? baseMatchesProperty(value[0], value[1])
              : baseMatches(value);
          }
          return property(value);
        }

        /**
         * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result = [];
          for (var key in Object(object)) {
            if (hasOwnProperty.call(object, key) && key != 'constructor') {
              result.push(key);
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object),
              result = [];

          for (var key in object) {
            if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
              result.push(key);
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.lt` which doesn't coerce arguments.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is less than `other`,
         *  else `false`.
         */
        function baseLt(value, other) {
          return value < other;
        }

        /**
         * The base implementation of `_.map` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function baseMap(collection, iteratee) {
          var index = -1,
              result = isArrayLike(collection) ? Array(collection.length) : [];

          baseEach(collection, function(value, key, collection) {
            result[++index] = iteratee(value, key, collection);
          });
          return result;
        }

        /**
         * The base implementation of `_.matches` which doesn't clone `source`.
         *
         * @private
         * @param {Object} source The object of property values to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }

        /**
         * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
         *
         * @private
         * @param {string} path The path of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return (objValue === undefined$1 && objValue === srcValue)
              ? hasIn(object, path)
              : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }

        /**
         * The base implementation of `_.merge` without support for multiple sources.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @param {number} srcIndex The index of `source`.
         * @param {Function} [customizer] The function to customize merged values.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         */
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack);
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            }
            else {
              var newValue = customizer
                ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
                : undefined$1;

              if (newValue === undefined$1) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }

        /**
         * A specialized version of `baseMerge` for arrays and objects which performs
         * deep merges and tracks traversed objects enabling objects with circular
         * references to be merged.
         *
         * @private
         * @param {Object} object The destination object.
         * @param {Object} source The source object.
         * @param {string} key The key of the value to merge.
         * @param {number} srcIndex The index of `source`.
         * @param {Function} mergeFunc The function to merge values.
         * @param {Function} [customizer] The function to customize assigned values.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         */
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key),
              srcValue = safeGet(source, key),
              stacked = stack.get(srcValue);

          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer
            ? customizer(objValue, srcValue, (key + ''), object, source, stack)
            : undefined$1;

          var isCommon = newValue === undefined$1;

          if (isCommon) {
            var isArr = isArray(srcValue),
                isBuff = !isArr && isBuffer(srcValue),
                isTyped = !isArr && !isBuff && isTypedArray(srcValue);

            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              }
              else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              }
              else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              }
              else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              }
              else {
                newValue = [];
              }
            }
            else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              }
              else if (!isObject(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            }
            else {
              isCommon = false;
            }
          }
          if (isCommon) {
            // Recursively merge objects and arrays (susceptible to call stack limits).
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack['delete'](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }

        /**
         * The base implementation of `_.nth` which doesn't coerce arguments.
         *
         * @private
         * @param {Array} array The array to query.
         * @param {number} n The index of the element to return.
         * @returns {*} Returns the nth element of `array`.
         */
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined$1;
        }

        /**
         * The base implementation of `_.orderBy` without param guards.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
         * @param {string[]} orders The sort orders of `iteratees`.
         * @returns {Array} Returns the new sorted array.
         */
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee) {
              if (isArray(iteratee)) {
                return function(value) {
                  return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
                }
              }
              return iteratee;
            });
          } else {
            iteratees = [identity];
          }

          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

          var result = baseMap(collection, function(value, key, collection) {
            var criteria = arrayMap(iteratees, function(iteratee) {
              return iteratee(value);
            });
            return { 'criteria': criteria, 'index': ++index, 'value': value };
          });

          return baseSortBy(result, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }

        /**
         * The base implementation of `_.pick` without support for individual
         * property identifiers.
         *
         * @private
         * @param {Object} object The source object.
         * @param {string[]} paths The property paths to pick.
         * @returns {Object} Returns the new object.
         */
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }

        /**
         * The base implementation of  `_.pickBy` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The source object.
         * @param {string[]} paths The property paths to pick.
         * @param {Function} predicate The function invoked per property.
         * @returns {Object} Returns the new object.
         */
        function basePickBy(object, paths, predicate) {
          var index = -1,
              length = paths.length,
              result = {};

          while (++index < length) {
            var path = paths[index],
                value = baseGet(object, path);

            if (predicate(value, path)) {
              baseSet(result, castPath(path, object), value);
            }
          }
          return result;
        }

        /**
         * A specialized version of `baseProperty` which supports deep paths.
         *
         * @private
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }

        /**
         * The base implementation of `_.pullAllBy` without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns `array`.
         */
        function basePullAll(array, values, iteratee, comparator) {
          var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
              index = -1,
              length = values.length,
              seen = array;

          if (array === values) {
            values = copyArray(values);
          }
          if (iteratee) {
            seen = arrayMap(array, baseUnary(iteratee));
          }
          while (++index < length) {
            var fromIndex = 0,
                value = values[index],
                computed = iteratee ? iteratee(value) : value;

            while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }

        /**
         * The base implementation of `_.pullAt` without support for individual
         * indexes or capturing the removed elements.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {number[]} indexes The indexes of elements to remove.
         * @returns {Array} Returns `array`.
         */
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0,
              lastIndex = length - 1;

          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }

        /**
         * The base implementation of `_.random` without support for returning
         * floating-point numbers.
         *
         * @private
         * @param {number} lower The lower bound.
         * @param {number} upper The upper bound.
         * @returns {number} Returns the random number.
         */
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }

        /**
         * The base implementation of `_.range` and `_.rangeRight` which doesn't
         * coerce arguments.
         *
         * @private
         * @param {number} start The start of the range.
         * @param {number} end The end of the range.
         * @param {number} step The value to increment or decrement by.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Array} Returns the range of numbers.
         */
        function baseRange(start, end, step, fromRight) {
          var index = -1,
              length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
              result = Array(length);

          while (length--) {
            result[fromRight ? length : ++index] = start;
            start += step;
          }
          return result;
        }

        /**
         * The base implementation of `_.repeat` which doesn't coerce arguments.
         *
         * @private
         * @param {string} string The string to repeat.
         * @param {number} n The number of times to repeat the string.
         * @returns {string} Returns the repeated string.
         */
        function baseRepeat(string, n) {
          var result = '';
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result;
          }
          // Leverage the exponentiation by squaring algorithm for a faster repeat.
          // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
          do {
            if (n % 2) {
              result += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);

          return result;
        }

        /**
         * The base implementation of `_.rest` which doesn't validate or coerce arguments.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @returns {Function} Returns the new function.
         */
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + '');
        }

        /**
         * The base implementation of `_.sample`.
         *
         * @private
         * @param {Array|Object} collection The collection to sample.
         * @returns {*} Returns the random element.
         */
        function baseSample(collection) {
          return arraySample(values(collection));
        }

        /**
         * The base implementation of `_.sampleSize` without param guards.
         *
         * @private
         * @param {Array|Object} collection The collection to sample.
         * @param {number} n The number of elements to sample.
         * @returns {Array} Returns the random elements.
         */
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }

        /**
         * The base implementation of `_.set`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @param {Function} [customizer] The function to customize path creation.
         * @returns {Object} Returns `object`.
         */
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);

          var index = -1,
              length = path.length,
              lastIndex = length - 1,
              nested = object;

          while (nested != null && ++index < length) {
            var key = toKey(path[index]),
                newValue = value;

            if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
              return object;
            }

            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
              if (newValue === undefined$1) {
                newValue = isObject(objValue)
                  ? objValue
                  : (isIndex(path[index + 1]) ? [] : {});
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }

        /**
         * The base implementation of `setData` without support for hot loop shorting.
         *
         * @private
         * @param {Function} func The function to associate metadata with.
         * @param {*} data The metadata.
         * @returns {Function} Returns `func`.
         */
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };

        /**
         * The base implementation of `setToString` without support for hot loop shorting.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, 'toString', {
            'configurable': true,
            'enumerable': false,
            'value': constant(string),
            'writable': true
          });
        };

        /**
         * The base implementation of `_.shuffle`.
         *
         * @private
         * @param {Array|Object} collection The collection to shuffle.
         * @returns {Array} Returns the new shuffled array.
         */
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }

        /**
         * The base implementation of `_.slice` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */
        function baseSlice(array, start, end) {
          var index = -1,
              length = array.length;

          if (start < 0) {
            start = -start > length ? 0 : (length + start);
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : ((end - start) >>> 0);
          start >>>= 0;

          var result = Array(length);
          while (++index < length) {
            result[index] = array[index + start];
          }
          return result;
        }

        /**
         * The base implementation of `_.some` without support for iteratee shorthands.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */
        function baseSome(collection, predicate) {
          var result;

          baseEach(collection, function(value, index, collection) {
            result = predicate(value, index, collection);
            return !result;
          });
          return !!result;
        }

        /**
         * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
         * performs a binary search of `array` to determine the index at which `value`
         * should be inserted into `array` in order to maintain its sort order.
         *
         * @private
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {boolean} [retHighest] Specify returning the highest qualified index.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         */
        function baseSortedIndex(array, value, retHighest) {
          var low = 0,
              high = array == null ? low : array.length;

          if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = (low + high) >>> 1,
                  computed = array[mid];

              if (computed !== null && !isSymbol(computed) &&
                  (retHighest ? (computed <= value) : (computed < value))) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }

        /**
         * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
         * which invokes `iteratee` for `value` and each element of `array` to compute
         * their sort ranking. The iteratee is invoked with one argument; (value).
         *
         * @private
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} iteratee The iteratee invoked per element.
         * @param {boolean} [retHighest] Specify returning the highest qualified index.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         */
        function baseSortedIndexBy(array, value, iteratee, retHighest) {
          var low = 0,
              high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }

          value = iteratee(value);
          var valIsNaN = value !== value,
              valIsNull = value === null,
              valIsSymbol = isSymbol(value),
              valIsUndefined = value === undefined$1;

          while (low < high) {
            var mid = nativeFloor((low + high) / 2),
                computed = iteratee(array[mid]),
                othIsDefined = computed !== undefined$1,
                othIsNull = computed === null,
                othIsReflexive = computed === computed,
                othIsSymbol = isSymbol(computed);

            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? (computed <= value) : (computed < value);
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }

        /**
         * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         */
        function baseSortedUniq(array, iteratee) {
          var index = -1,
              length = array.length,
              resIndex = 0,
              result = [];

          while (++index < length) {
            var value = array[index],
                computed = iteratee ? iteratee(value) : value;

            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.toNumber` which doesn't ensure correct
         * conversions of binary, hexadecimal, or octal string values.
         *
         * @private
         * @param {*} value The value to process.
         * @returns {number} Returns the number.
         */
        function baseToNumber(value) {
          if (typeof value == 'number') {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }

        /**
         * The base implementation of `_.toString` which doesn't convert nullish
         * values to empty strings.
         *
         * @private
         * @param {*} value The value to process.
         * @returns {string} Returns the string.
         */
        function baseToString(value) {
          // Exit early for strings to avoid a performance hit in some environments.
          if (typeof value == 'string') {
            return value;
          }
          if (isArray(value)) {
            // Recursively convert values (susceptible to call stack limits).
            return arrayMap(value, baseToString) + '';
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : '';
          }
          var result = (value + '');
          return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
        }

        /**
         * The base implementation of `_.uniqBy` without support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         */
        function baseUniq(array, iteratee, comparator) {
          var index = -1,
              includes = arrayIncludes,
              length = array.length,
              isCommon = true,
              result = [],
              seen = result;

          if (comparator) {
            isCommon = false;
            includes = arrayIncludesWith;
          }
          else if (length >= LARGE_ARRAY_SIZE) {
            var set = iteratee ? null : createSet(array);
            if (set) {
              return setToArray(set);
            }
            isCommon = false;
            includes = cacheHas;
            seen = new SetCache;
          }
          else {
            seen = iteratee ? [] : result;
          }
          outer:
          while (++index < length) {
            var value = array[index],
                computed = iteratee ? iteratee(value) : value;

            value = (comparator || value !== 0) ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee) {
                seen.push(computed);
              }
              result.push(value);
            }
            else if (!includes(seen, computed, comparator)) {
              if (seen !== result) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
          return result;
        }

        /**
         * The base implementation of `_.unset`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The property path to unset.
         * @returns {boolean} Returns `true` if the property is deleted, else `false`.
         */
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }

        /**
         * The base implementation of `_.update`.
         *
         * @private
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to update.
         * @param {Function} updater The function to produce the updated value.
         * @param {Function} [customizer] The function to customize path creation.
         * @returns {Object} Returns `object`.
         */
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }

        /**
         * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
         * without support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to query.
         * @param {Function} predicate The function invoked per iteration.
         * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Array} Returns the slice of `array`.
         */
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length,
              index = fromRight ? length : -1;

          while ((fromRight ? index-- : ++index < length) &&
            predicate(array[index], index, array)) {}

          return isDrop
            ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
            : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
        }

        /**
         * The base implementation of `wrapperValue` which returns the result of
         * performing a sequence of actions on the unwrapped `value`, where each
         * successive action is supplied the return value of the previous.
         *
         * @private
         * @param {*} value The unwrapped value.
         * @param {Array} actions Actions to perform to resolve the unwrapped value.
         * @returns {*} Returns the resolved value.
         */
        function baseWrapperValue(value, actions) {
          var result = value;
          if (result instanceof LazyWrapper) {
            result = result.value();
          }
          return arrayReduce(actions, function(result, action) {
            return action.func.apply(action.thisArg, arrayPush([result], action.args));
          }, result);
        }

        /**
         * The base implementation of methods like `_.xor`, without support for
         * iteratee shorthands, that accepts an array of arrays to inspect.
         *
         * @private
         * @param {Array} arrays The arrays to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of values.
         */
        function baseXor(arrays, iteratee, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1,
              result = Array(length);

          while (++index < length) {
            var array = arrays[index],
                othIndex = -1;

            while (++othIndex < length) {
              if (othIndex != index) {
                result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result, 1), iteratee, comparator);
        }

        /**
         * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
         *
         * @private
         * @param {Array} props The property identifiers.
         * @param {Array} values The property values.
         * @param {Function} assignFunc The function to assign values.
         * @returns {Object} Returns the new object.
         */
        function baseZipObject(props, values, assignFunc) {
          var index = -1,
              length = props.length,
              valsLength = values.length,
              result = {};

          while (++index < length) {
            var value = index < valsLength ? values[index] : undefined$1;
            assignFunc(result, props[index], value);
          }
          return result;
        }

        /**
         * Casts `value` to an empty array if it's not an array like object.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {Array|Object} Returns the cast array-like object.
         */
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }

        /**
         * Casts `value` to `identity` if it's not a function.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {Function} Returns cast function.
         */
        function castFunction(value) {
          return typeof value == 'function' ? value : identity;
        }

        /**
         * Casts `value` to a path array if it's not one.
         *
         * @private
         * @param {*} value The value to inspect.
         * @param {Object} [object] The object to query keys on.
         * @returns {Array} Returns the cast property path array.
         */
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }

        /**
         * A `baseRest` alias which can be replaced with `identity` by module
         * replacement plugins.
         *
         * @private
         * @type {Function}
         * @param {Function} func The function to apply a rest parameter to.
         * @returns {Function} Returns the new function.
         */
        var castRest = baseRest;

        /**
         * Casts `array` to a slice if it's needed.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {number} start The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the cast slice.
         */
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined$1 ? length : end;
          return (!start && end >= length) ? array : baseSlice(array, start, end);
        }

        /**
         * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
         *
         * @private
         * @param {number|Object} id The timer id or timeout object of the timer to clear.
         */
        var clearTimeout = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };

        /**
         * Creates a clone of  `buffer`.
         *
         * @private
         * @param {Buffer} buffer The buffer to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Buffer} Returns the cloned buffer.
         */
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length,
              result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

          buffer.copy(result);
          return result;
        }

        /**
         * Creates a clone of `arrayBuffer`.
         *
         * @private
         * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
         * @returns {ArrayBuffer} Returns the cloned array buffer.
         */
        function cloneArrayBuffer(arrayBuffer) {
          var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array(result).set(new Uint8Array(arrayBuffer));
          return result;
        }

        /**
         * Creates a clone of `dataView`.
         *
         * @private
         * @param {Object} dataView The data view to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned data view.
         */
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }

        /**
         * Creates a clone of `regexp`.
         *
         * @private
         * @param {Object} regexp The regexp to clone.
         * @returns {Object} Returns the cloned regexp.
         */
        function cloneRegExp(regexp) {
          var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result.lastIndex = regexp.lastIndex;
          return result;
        }

        /**
         * Creates a clone of the `symbol` object.
         *
         * @private
         * @param {Object} symbol The symbol object to clone.
         * @returns {Object} Returns the cloned symbol object.
         */
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }

        /**
         * Creates a clone of `typedArray`.
         *
         * @private
         * @param {Object} typedArray The typed array to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the cloned typed array.
         */
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }

        /**
         * Compares values to sort them in ascending order.
         *
         * @private
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {number} Returns the sort order indicator for `value`.
         */
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined$1,
                valIsNull = value === null,
                valIsReflexive = value === value,
                valIsSymbol = isSymbol(value);

            var othIsDefined = other !== undefined$1,
                othIsNull = other === null,
                othIsReflexive = other === other,
                othIsSymbol = isSymbol(other);

            if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                (valIsNull && othIsDefined && othIsReflexive) ||
                (!valIsDefined && othIsReflexive) ||
                !valIsReflexive) {
              return 1;
            }
            if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                (othIsNull && valIsDefined && valIsReflexive) ||
                (!othIsDefined && valIsReflexive) ||
                !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }

        /**
         * Used by `_.orderBy` to compare multiple properties of a value to another
         * and stable sort them.
         *
         * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
         * specify an order of "desc" for descending or "asc" for ascending sort order
         * of corresponding values.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {boolean[]|string[]} orders The order to sort by for each property.
         * @returns {number} Returns the sort order indicator for `object`.
         */
        function compareMultiple(object, other, orders) {
          var index = -1,
              objCriteria = object.criteria,
              othCriteria = other.criteria,
              length = objCriteria.length,
              ordersLength = orders.length;

          while (++index < length) {
            var result = compareAscending(objCriteria[index], othCriteria[index]);
            if (result) {
              if (index >= ordersLength) {
                return result;
              }
              var order = orders[index];
              return result * (order == 'desc' ? -1 : 1);
            }
          }
          // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
          // that causes it, under certain circumstances, to provide the same value for
          // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
          // for more details.
          //
          // This also ensures a stable sort in V8 and other engines.
          // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
          return object.index - other.index;
        }

        /**
         * Creates an array that is the composition of partially applied arguments,
         * placeholders, and provided arguments into a single array of arguments.
         *
         * @private
         * @param {Array} args The provided arguments.
         * @param {Array} partials The arguments to prepend to those provided.
         * @param {Array} holders The `partials` placeholder indexes.
         * @params {boolean} [isCurried] Specify composing for a curried function.
         * @returns {Array} Returns the new array of composed arguments.
         */
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1,
              argsLength = args.length,
              holdersLength = holders.length,
              leftIndex = -1,
              leftLength = partials.length,
              rangeLength = nativeMax(argsLength - holdersLength, 0),
              result = Array(leftLength + rangeLength),
              isUncurried = !isCurried;

          while (++leftIndex < leftLength) {
            result[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result[leftIndex++] = args[argsIndex++];
          }
          return result;
        }

        /**
         * This function is like `composeArgs` except that the arguments composition
         * is tailored for `_.partialRight`.
         *
         * @private
         * @param {Array} args The provided arguments.
         * @param {Array} partials The arguments to append to those provided.
         * @param {Array} holders The `partials` placeholder indexes.
         * @params {boolean} [isCurried] Specify composing for a curried function.
         * @returns {Array} Returns the new array of composed arguments.
         */
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1,
              argsLength = args.length,
              holdersIndex = -1,
              holdersLength = holders.length,
              rightIndex = -1,
              rightLength = partials.length,
              rangeLength = nativeMax(argsLength - holdersLength, 0),
              result = Array(rangeLength + rightLength),
              isUncurried = !isCurried;

          while (++argsIndex < rangeLength) {
            result[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result;
        }

        /**
         * Copies the values of `source` to `array`.
         *
         * @private
         * @param {Array} source The array to copy values from.
         * @param {Array} [array=[]] The array to copy values to.
         * @returns {Array} Returns `array`.
         */
        function copyArray(source, array) {
          var index = -1,
              length = source.length;

          array || (array = Array(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }

        /**
         * Copies properties of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy properties from.
         * @param {Array} props The property identifiers to copy.
         * @param {Object} [object={}] The object to copy properties to.
         * @param {Function} [customizer] The function to customize copied values.
         * @returns {Object} Returns `object`.
         */
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});

          var index = -1,
              length = props.length;

          while (++index < length) {
            var key = props[index];

            var newValue = customizer
              ? customizer(object[key], source[key], key, object, source)
              : undefined$1;

            if (newValue === undefined$1) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }

        /**
         * Copies own symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }

        /**
         * Copies own and inherited symbols of `source` to `object`.
         *
         * @private
         * @param {Object} source The object to copy symbols from.
         * @param {Object} [object={}] The object to copy symbols to.
         * @returns {Object} Returns `object`.
         */
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }

        /**
         * Creates a function like `_.groupBy`.
         *
         * @private
         * @param {Function} setter The function to set accumulator values.
         * @param {Function} [initializer] The accumulator object initializer.
         * @returns {Function} Returns the new aggregator function.
         */
        function createAggregator(setter, initializer) {
          return function(collection, iteratee) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator,
                accumulator = initializer ? initializer() : {};

            return func(collection, setter, getIteratee(iteratee, 2), accumulator);
          };
        }

        /**
         * Creates a function like `_.assign`.
         *
         * @private
         * @param {Function} assigner The function to assign values.
         * @returns {Function} Returns the new assigner function.
         */
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1,
                length = sources.length,
                customizer = length > 1 ? sources[length - 1] : undefined$1,
                guard = length > 2 ? sources[2] : undefined$1;

            customizer = (assigner.length > 3 && typeof customizer == 'function')
              ? (length--, customizer)
              : undefined$1;

            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined$1 : customizer;
              length = 1;
            }
            object = Object(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }

        /**
         * Creates a `baseEach` or `baseEachRight` function.
         *
         * @private
         * @param {Function} eachFunc The function to iterate over a collection.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee);
            }
            var length = collection.length,
                index = fromRight ? length : -1,
                iterable = Object(collection);

            while ((fromRight ? index-- : ++index < length)) {
              if (iteratee(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }

        /**
         * Creates a base function for methods like `_.forIn` and `_.forOwn`.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */
        function createBaseFor(fromRight) {
          return function(object, iteratee, keysFunc) {
            var index = -1,
                iterable = Object(object),
                props = keysFunc(object),
                length = props.length;

            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }

        /**
         * Creates a function that wraps `func` to invoke it with the optional `this`
         * binding of `thisArg`.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG,
              Ctor = createCtor(func);

          function wrapper() {
            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }

        /**
         * Creates a function like `_.lowerFirst`.
         *
         * @private
         * @param {string} methodName The name of the `String` case method to use.
         * @returns {Function} Returns the new case function.
         */
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);

            var strSymbols = hasUnicode(string)
              ? stringToArray(string)
              : undefined$1;

            var chr = strSymbols
              ? strSymbols[0]
              : string.charAt(0);

            var trailing = strSymbols
              ? castSlice(strSymbols, 1).join('')
              : string.slice(1);

            return chr[methodName]() + trailing;
          };
        }

        /**
         * Creates a function like `_.camelCase`.
         *
         * @private
         * @param {Function} callback The function to combine each word.
         * @returns {Function} Returns the new compounder function.
         */
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
          };
        }

        /**
         * Creates a function that produces an instance of `Ctor` regardless of
         * whether it was invoked as part of a `new` expression or by `call` or `apply`.
         *
         * @private
         * @param {Function} Ctor The constructor to wrap.
         * @returns {Function} Returns the new wrapped function.
         */
        function createCtor(Ctor) {
          return function() {
            // Use a `switch` statement to work with class constructors. See
            // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
            // for more details.
            var args = arguments;
            switch (args.length) {
              case 0: return new Ctor;
              case 1: return new Ctor(args[0]);
              case 2: return new Ctor(args[0], args[1]);
              case 3: return new Ctor(args[0], args[1], args[2]);
              case 4: return new Ctor(args[0], args[1], args[2], args[3]);
              case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype),
                result = Ctor.apply(thisBinding, args);

            // Mimic the constructor's `return` behavior.
            // See https://es5.github.io/#x13.2.2 for more details.
            return isObject(result) ? result : thisBinding;
          };
        }

        /**
         * Creates a function that wraps `func` to enable currying.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {number} arity The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);

          function wrapper() {
            var length = arguments.length,
                args = Array(length),
                index = length,
                placeholder = getHolder(wrapper);

            while (index--) {
              args[index] = arguments[index];
            }
            var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
              ? []
              : replaceHolders(args, placeholder);

            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
                args, holders, undefined$1, undefined$1, arity - length);
            }
            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }

        /**
         * Creates a `_.find` or `_.findLast` function.
         *
         * @private
         * @param {Function} findIndexFunc The function to find the collection index.
         * @returns {Function} Returns the new find function.
         */
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object(collection);
            if (!isArrayLike(collection)) {
              var iteratee = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) { return iteratee(iterable[key], key, iterable); };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
          };
        }

        /**
         * Creates a `_.flow` or `_.flowRight` function.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new flow function.
         */
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length,
                index = length,
                prereq = LodashWrapper.prototype.thru;

            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];

              var funcName = getFuncName(func),
                  data = funcName == 'wrapper' ? getData(func) : undefined$1;

              if (data && isLaziable(data[0]) &&
                    data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                    !data[4].length && data[9] == 1
                  ) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = (func.length == 1 && isLaziable(func))
                  ? wrapper[funcName]()
                  : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments,
                  value = args[0];

              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index = 0,
                  result = length ? funcs[index].apply(this, args) : value;

              while (++index < length) {
                result = funcs[index].call(this, result);
              }
              return result;
            };
          });
        }

        /**
         * Creates a function that wraps `func` to invoke it with optional `this`
         * binding of `thisArg`, partial application, and currying.
         *
         * @private
         * @param {Function|string} func The function or method name to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to prepend to those provided to
         *  the new function.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [partialsRight] The arguments to append to those provided
         *  to the new function.
         * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG,
              isBind = bitmask & WRAP_BIND_FLAG,
              isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
              isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
              isFlip = bitmask & WRAP_FLIP_FLAG,
              Ctor = isBindKey ? undefined$1 : createCtor(func);

          function wrapper() {
            var length = arguments.length,
                args = Array(length),
                index = length;

            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper),
                  holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func, bitmask, createHybrid, wrapper.placeholder, thisArg,
                args, newHolders, argPos, ary, arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this,
                fn = isBindKey ? thisBinding[func] : func;

            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary < length) {
              args.length = ary;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }

        /**
         * Creates a function like `_.invertBy`.
         *
         * @private
         * @param {Function} setter The function to set accumulator values.
         * @param {Function} toIteratee The function to resolve iteratees.
         * @returns {Function} Returns the new inverter function.
         */
        function createInverter(setter, toIteratee) {
          return function(object, iteratee) {
            return baseInverter(object, setter, toIteratee(iteratee), {});
          };
        }

        /**
         * Creates a function that performs a mathematical operation on two values.
         *
         * @private
         * @param {Function} operator The function to perform the operation.
         * @param {number} [defaultValue] The value used for `undefined` arguments.
         * @returns {Function} Returns the new mathematical operation function.
         */
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result;
            if (value === undefined$1 && other === undefined$1) {
              return defaultValue;
            }
            if (value !== undefined$1) {
              result = value;
            }
            if (other !== undefined$1) {
              if (result === undefined$1) {
                return other;
              }
              if (typeof value == 'string' || typeof other == 'string') {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result = operator(value, other);
            }
            return result;
          };
        }

        /**
         * Creates a function like `_.over`.
         *
         * @private
         * @param {Function} arrayFunc The function to iterate over iteratees.
         * @returns {Function} Returns the new over function.
         */
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee) {
                return apply(iteratee, thisArg, args);
              });
            });
          });
        }

        /**
         * Creates the padding for `string` based on `length`. The `chars` string
         * is truncated if the number of characters exceeds `length`.
         *
         * @private
         * @param {number} length The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padding for `string`.
         */
        function createPadding(length, chars) {
          chars = chars === undefined$1 ? ' ' : baseToString(chars);

          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars)
            ? castSlice(stringToArray(result), 0, length).join('')
            : result.slice(0, length);
        }

        /**
         * Creates a function that wraps `func` to invoke it with the `this` binding
         * of `thisArg` and `partials` prepended to the arguments it receives.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} partials The arguments to prepend to those provided to
         *  the new function.
         * @returns {Function} Returns the new wrapped function.
         */
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG,
              Ctor = createCtor(func);

          function wrapper() {
            var argsIndex = -1,
                argsLength = arguments.length,
                leftIndex = -1,
                leftLength = partials.length,
                args = Array(leftLength + argsLength),
                fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }

        /**
         * Creates a `_.range` or `_.rangeRight` function.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new range function.
         */
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
              end = step = undefined$1;
            }
            // Ensure the sign of `-0` is preserved.
            start = toFinite(start);
            if (end === undefined$1) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }

        /**
         * Creates a function that performs a relational operation on two values.
         *
         * @private
         * @param {Function} operator The function to perform the operation.
         * @returns {Function} Returns the new relational operation function.
         */
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == 'string' && typeof other == 'string')) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }

        /**
         * Creates a function that wraps `func` to continue currying.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @param {Function} wrapFunc The function to create the `func` wrapper.
         * @param {*} placeholder The placeholder value.
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to prepend to those provided to
         *  the new function.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG,
              newHolders = isCurry ? holders : undefined$1,
              newHoldersRight = isCurry ? undefined$1 : holders,
              newPartials = isCurry ? partials : undefined$1,
              newPartialsRight = isCurry ? undefined$1 : partials;

          bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
            newHoldersRight, argPos, ary, arity
          ];

          var result = wrapFunc.apply(undefined$1, newData);
          if (isLaziable(func)) {
            setData(result, newData);
          }
          result.placeholder = placeholder;
          return setWrapToString(result, func, bitmask);
        }

        /**
         * Creates a function like `_.round`.
         *
         * @private
         * @param {string} methodName The name of the `Math` method to use when rounding.
         * @returns {Function} Returns the new round function.
         */
        function createRound(methodName) {
          var func = Math[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              // Shift with exponential notation to avoid floating-point issues.
              // See [MDN](https://mdn.io/round#Examples) for more details.
              var pair = (toString(number) + 'e').split('e'),
                  value = func(pair[0] + 'e' + (+pair[1] + precision));

              pair = (toString(value) + 'e').split('e');
              return +(pair[0] + 'e' + (+pair[1] - precision));
            }
            return func(number);
          };
        }

        /**
         * Creates a set object of `values`.
         *
         * @private
         * @param {Array} values The values to add to the set.
         * @returns {Object} Returns the new set.
         */
        var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
          return new Set(values);
        };

        /**
         * Creates a `_.toPairs` or `_.toPairsIn` function.
         *
         * @private
         * @param {Function} keysFunc The function to get the keys of a given object.
         * @returns {Function} Returns the new pairs function.
         */
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }

        /**
         * Creates a function that either curries or invokes `func` with optional
         * `this` binding and partially applied arguments.
         *
         * @private
         * @param {Function|string} func The function or method name to wrap.
         * @param {number} bitmask The bitmask flags.
         *    1 - `_.bind`
         *    2 - `_.bindKey`
         *    4 - `_.curry` or `_.curryRight` of a bound function
         *    8 - `_.curry`
         *   16 - `_.curryRight`
         *   32 - `_.partial`
         *   64 - `_.partialRight`
         *  128 - `_.rearg`
         *  256 - `_.ary`
         *  512 - `_.flip`
         * @param {*} [thisArg] The `this` binding of `func`.
         * @param {Array} [partials] The arguments to be partially applied.
         * @param {Array} [holders] The `partials` placeholder indexes.
         * @param {Array} [argPos] The argument positions of the new function.
         * @param {number} [ary] The arity cap of `func`.
         * @param {number} [arity] The arity of `func`.
         * @returns {Function} Returns the new wrapped function.
         */
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined$1;
          }
          ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
          arity = arity === undefined$1 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;

          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials,
                holdersRight = holders;

            partials = holders = undefined$1;
          }
          var data = isBindKey ? undefined$1 : getData(func);

          var newData = [
            func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
            argPos, ary, arity
          ];

          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined$1
            ? (isBindKey ? 0 : func.length)
            : nativeMax(newData[9] - length, 0);

          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result = createPartial(func, bitmask, thisArg, partials);
          } else {
            result = createHybrid.apply(undefined$1, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result, newData), func, bitmask);
        }

        /**
         * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
         * of source objects to the destination object for all destination properties
         * that resolve to `undefined`.
         *
         * @private
         * @param {*} objValue The destination value.
         * @param {*} srcValue The source value.
         * @param {string} key The key of the property to assign.
         * @param {Object} object The parent object of `objValue`.
         * @returns {*} Returns the value to assign.
         */
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined$1 ||
              (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            return srcValue;
          }
          return objValue;
        }

        /**
         * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
         * objects into destination objects that are passed thru.
         *
         * @private
         * @param {*} objValue The destination value.
         * @param {*} srcValue The source value.
         * @param {string} key The key of the property to merge.
         * @param {Object} object The parent object of `objValue`.
         * @param {Object} source The parent object of `srcValue`.
         * @param {Object} [stack] Tracks traversed source values and their merged
         *  counterparts.
         * @returns {*} Returns the value to assign.
         */
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            // Recursively merge objects and arrays (susceptible to call stack limits).
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
            stack['delete'](srcValue);
          }
          return objValue;
        }

        /**
         * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
         * objects.
         *
         * @private
         * @param {*} value The value to inspect.
         * @param {string} key The key of the property to inspect.
         * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
         */
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined$1 : value;
        }

        /**
         * A specialized version of `baseIsEqualDeep` for arrays with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Array} array The array to compare.
         * @param {Array} other The other array to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `array` and `other` objects.
         * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
         */
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              arrLength = array.length,
              othLength = other.length;

          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          // Check that cyclic values are equal.
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1,
              result = true,
              seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

          stack.set(array, other);
          stack.set(other, array);

          // Ignore non-index properties.
          while (++index < arrLength) {
            var arrValue = array[index],
                othValue = other[index];

            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, arrValue, index, other, array, stack)
                : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined$1) {
              if (compared) {
                continue;
              }
              result = false;
              break;
            }
            // Recursively compare arrays (susceptible to call stack limits).
            if (seen) {
              if (!arraySome(other, function(othValue, othIndex) {
                    if (!cacheHas(seen, othIndex) &&
                        (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                      return seen.push(othIndex);
                    }
                  })) {
                result = false;
                break;
              }
            } else if (!(
                  arrValue === othValue ||
                    equalFunc(arrValue, othValue, bitmask, customizer, stack)
                )) {
              result = false;
              break;
            }
          }
          stack['delete'](array);
          stack['delete'](other);
          return result;
        }

        /**
         * A specialized version of `baseIsEqualDeep` for comparing objects of
         * the same `toStringTag`.
         *
         * **Note:** This function only supports comparing values with tags of
         * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {string} tag The `toStringTag` of the objects to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if ((object.byteLength != other.byteLength) ||
                  (object.byteOffset != other.byteOffset)) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;

            case arrayBufferTag:
              if ((object.byteLength != other.byteLength) ||
                  !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                return false;
              }
              return true;

            case boolTag:
            case dateTag:
            case numberTag:
              // Coerce booleans to `1` or `0` and dates to milliseconds.
              // Invalid dates are coerced to `NaN`.
              return eq(+object, +other);

            case errorTag:
              return object.name == other.name && object.message == other.message;

            case regexpTag:
            case stringTag:
              // Coerce regexes to strings and treat strings, primitives and objects,
              // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
              // for more details.
              return object == (other + '');

            case mapTag:
              var convert = mapToArray;

            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);

              if (object.size != other.size && !isPartial) {
                return false;
              }
              // Assume cyclic values are equal.
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;

              // Recursively compare objects (susceptible to call stack limits).
              stack.set(object, other);
              var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack['delete'](object);
              return result;

            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }

        /**
         * A specialized version of `baseIsEqualDeep` for objects with support for
         * partial deep comparisons.
         *
         * @private
         * @param {Object} object The object to compare.
         * @param {Object} other The other object to compare.
         * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
         * @param {Function} customizer The function to customize comparisons.
         * @param {Function} equalFunc The function to determine equivalents of values.
         * @param {Object} stack Tracks traversed `object` and `other` objects.
         * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
         */
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              objProps = getAllKeys(object),
              objLength = objProps.length,
              othProps = getAllKeys(other),
              othLength = othProps.length;

          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
              return false;
            }
          }
          // Check that cyclic values are equal.
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result = true;
          stack.set(object, other);
          stack.set(other, object);

          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key],
                othValue = other[key];

            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, objValue, key, other, object, stack)
                : customizer(objValue, othValue, key, object, other, stack);
            }
            // Recursively compare objects (susceptible to call stack limits).
            if (!(compared === undefined$1
                  ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                  : compared
                )) {
              result = false;
              break;
            }
            skipCtor || (skipCtor = key == 'constructor');
          }
          if (result && !skipCtor) {
            var objCtor = object.constructor,
                othCtor = other.constructor;

            // Non `Object` object instances with different constructors are not equal.
            if (objCtor != othCtor &&
                ('constructor' in object && 'constructor' in other) &&
                !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                  typeof othCtor == 'function' && othCtor instanceof othCtor)) {
              result = false;
            }
          }
          stack['delete'](object);
          stack['delete'](other);
          return result;
        }

        /**
         * A specialized version of `baseRest` which flattens the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @returns {Function} Returns the new function.
         */
        function flatRest(func) {
          return setToString(overRest(func, undefined$1, flatten), func + '');
        }

        /**
         * Creates an array of own enumerable property names and symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }

        /**
         * Creates an array of own and inherited enumerable property names and
         * symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names and symbols.
         */
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }

        /**
         * Gets metadata for `func`.
         *
         * @private
         * @param {Function} func The function to query.
         * @returns {*} Returns the metadata for `func`.
         */
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };

        /**
         * Gets the name of `func`.
         *
         * @private
         * @param {Function} func The function to query.
         * @returns {string} Returns the function name.
         */
        function getFuncName(func) {
          var result = (func.name + ''),
              array = realNames[result],
              length = hasOwnProperty.call(realNames, result) ? array.length : 0;

          while (length--) {
            var data = array[length],
                otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result;
        }

        /**
         * Gets the argument placeholder value for `func`.
         *
         * @private
         * @param {Function} func The function to inspect.
         * @returns {*} Returns the placeholder value.
         */
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
          return object.placeholder;
        }

        /**
         * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
         * this function returns the custom method, otherwise it returns `baseIteratee`.
         * If arguments are provided, the chosen function is invoked with them and
         * its result is returned.
         *
         * @private
         * @param {*} [value] The value to convert to an iteratee.
         * @param {number} [arity] The arity of the created iteratee.
         * @returns {Function} Returns the chosen function or its result.
         */
        function getIteratee() {
          var result = lodash.iteratee || iteratee;
          result = result === iteratee ? baseIteratee : result;
          return arguments.length ? result(arguments[0], arguments[1]) : result;
        }

        /**
         * Gets the data for `map`.
         *
         * @private
         * @param {Object} map The map to query.
         * @param {string} key The reference key.
         * @returns {*} Returns the map data.
         */
        function getMapData(map, key) {
          var data = map.__data__;
          return isKeyable(key)
            ? data[typeof key == 'string' ? 'string' : 'hash']
            : data.map;
        }

        /**
         * Gets the property names, values, and compare flags of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the match data of `object`.
         */
        function getMatchData(object) {
          var result = keys(object),
              length = result.length;

          while (length--) {
            var key = result[length],
                value = object[key];

            result[length] = [key, value, isStrictComparable(value)];
          }
          return result;
        }

        /**
         * Gets the native function at `key` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the method to get.
         * @returns {*} Returns the function if it's native, else `undefined`.
         */
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined$1;
        }

        /**
         * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the raw `toStringTag`.
         */
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag),
              tag = value[symToStringTag];

          try {
            value[symToStringTag] = undefined$1;
            var unmasked = true;
          } catch (e) {}

          var result = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result;
        }

        /**
         * Creates an array of the own enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };

        /**
         * Creates an array of the own and inherited enumerable symbols of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of symbols.
         */
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result = [];
          while (object) {
            arrayPush(result, getSymbols(object));
            object = getPrototype(object);
          }
          return result;
        };

        /**
         * Gets the `toStringTag` of `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */
        var getTag = baseGetTag;

        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
            (Map && getTag(new Map) != mapTag) ||
            (Promise && getTag(Promise.resolve()) != promiseTag) ||
            (Set && getTag(new Set) != setTag) ||
            (WeakMap && getTag(new WeakMap) != weakMapTag)) {
          getTag = function(value) {
            var result = baseGetTag(value),
                Ctor = result == objectTag ? value.constructor : undefined$1,
                ctorString = Ctor ? toSource(Ctor) : '';

            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString: return dataViewTag;
                case mapCtorString: return mapTag;
                case promiseCtorString: return promiseTag;
                case setCtorString: return setTag;
                case weakMapCtorString: return weakMapTag;
              }
            }
            return result;
          };
        }

        /**
         * Gets the view, applying any `transforms` to the `start` and `end` positions.
         *
         * @private
         * @param {number} start The start of the view.
         * @param {number} end The end of the view.
         * @param {Array} transforms The transformations to apply to the view.
         * @returns {Object} Returns an object containing the `start` and `end`
         *  positions of the view.
         */
        function getView(start, end, transforms) {
          var index = -1,
              length = transforms.length;

          while (++index < length) {
            var data = transforms[index],
                size = data.size;

            switch (data.type) {
              case 'drop':      start += size; break;
              case 'dropRight': end -= size; break;
              case 'take':      end = nativeMin(end, start + size); break;
              case 'takeRight': start = nativeMax(start, end - size); break;
            }
          }
          return { 'start': start, 'end': end };
        }

        /**
         * Extracts wrapper details from the `source` body comment.
         *
         * @private
         * @param {string} source The source to inspect.
         * @returns {Array} Returns the wrapper details.
         */
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }

        /**
         * Checks if `path` exists on `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @param {Function} hasFunc The function to check properties.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         */
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);

          var index = -1,
              length = path.length,
              result = false;

          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result || ++index != length) {
            return result;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) &&
            (isArray(object) || isArguments(object));
        }

        /**
         * Initializes an array clone.
         *
         * @private
         * @param {Array} array The array to clone.
         * @returns {Array} Returns the initialized clone.
         */
        function initCloneArray(array) {
          var length = array.length,
              result = new array.constructor(length);

          // Add properties assigned by `RegExp#exec`.
          if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
            result.index = array.index;
            result.input = array.input;
          }
          return result;
        }

        /**
         * Initializes an object clone.
         *
         * @private
         * @param {Object} object The object to clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneObject(object) {
          return (typeof object.constructor == 'function' && !isPrototype(object))
            ? baseCreate(getPrototype(object))
            : {};
        }

        /**
         * Initializes an object clone based on its `toStringTag`.
         *
         * **Note:** This function only supports cloning values with tags of
         * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
         *
         * @private
         * @param {Object} object The object to clone.
         * @param {string} tag The `toStringTag` of the object to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Object} Returns the initialized clone.
         */
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);

            case boolTag:
            case dateTag:
              return new Ctor(+object);

            case dataViewTag:
              return cloneDataView(object, isDeep);

            case float32Tag: case float64Tag:
            case int8Tag: case int16Tag: case int32Tag:
            case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
              return cloneTypedArray(object, isDeep);

            case mapTag:
              return new Ctor;

            case numberTag:
            case stringTag:
              return new Ctor(object);

            case regexpTag:
              return cloneRegExp(object);

            case setTag:
              return new Ctor;

            case symbolTag:
              return cloneSymbol(object);
          }
        }

        /**
         * Inserts wrapper `details` in a comment at the top of the `source` body.
         *
         * @private
         * @param {string} source The source to modify.
         * @returns {Array} details The details to insert.
         * @returns {string} Returns the modified source.
         */
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
          details = details.join(length > 2 ? ', ' : ' ');
          return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
        }

        /**
         * Checks if `value` is a flattenable `arguments` object or array.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
         */
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) ||
            !!(spreadableSymbol && value && value[spreadableSymbol]);
        }

        /**
         * Checks if `value` is a valid array-like index.
         *
         * @private
         * @param {*} value The value to check.
         * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
         * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
         */
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;

          return !!length &&
            (type == 'number' ||
              (type != 'symbol' && reIsUint.test(value))) &&
                (value > -1 && value % 1 == 0 && value < length);
        }

        /**
         * Checks if the given arguments are from an iteratee call.
         *
         * @private
         * @param {*} value The potential iteratee value argument.
         * @param {*} index The potential iteratee index or key argument.
         * @param {*} object The potential iteratee object argument.
         * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
         *  else `false`.
         */
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == 'number'
                ? (isArrayLike(object) && isIndex(index, object.length))
                : (type == 'string' && index in object)
              ) {
            return eq(object[index], value);
          }
          return false;
        }

        /**
         * Checks if `value` is a property name and not a property path.
         *
         * @private
         * @param {*} value The value to check.
         * @param {Object} [object] The object to query keys on.
         * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
         */
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == 'number' || type == 'symbol' || type == 'boolean' ||
              value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
            (object != null && value in Object(object));
        }

        /**
         * Checks if `value` is suitable for use as unique object key.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
         */
        function isKeyable(value) {
          var type = typeof value;
          return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
            ? (value !== '__proto__')
            : (value === null);
        }

        /**
         * Checks if `func` has a lazy counterpart.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
         *  else `false`.
         */
        function isLaziable(func) {
          var funcName = getFuncName(func),
              other = lodash[funcName];

          if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }

        /**
         * Checks if `func` has its source masked.
         *
         * @private
         * @param {Function} func The function to check.
         * @returns {boolean} Returns `true` if `func` is masked, else `false`.
         */
        function isMasked(func) {
          return !!maskSrcKey && (maskSrcKey in func);
        }

        /**
         * Checks if `func` is capable of being masked.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
         */
        var isMaskable = coreJsData ? isFunction : stubFalse;

        /**
         * Checks if `value` is likely a prototype object.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
         */
        function isPrototype(value) {
          var Ctor = value && value.constructor,
              proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

          return value === proto;
        }

        /**
         * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` if suitable for strict
         *  equality comparisons, else `false`.
         */
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }

        /**
         * A specialized version of `matchesProperty` for source values suitable
         * for strict equality comparisons, i.e. `===`.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         */
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue &&
              (srcValue !== undefined$1 || (key in Object(object)));
          };
        }

        /**
         * A specialized version of `_.memoize` which clears the memoized function's
         * cache when it exceeds `MAX_MEMOIZE_SIZE`.
         *
         * @private
         * @param {Function} func The function to have its output memoized.
         * @returns {Function} Returns the new memoized function.
         */
        function memoizeCapped(func) {
          var result = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });

          var cache = result.cache;
          return result;
        }

        /**
         * Merges the function metadata of `source` into `data`.
         *
         * Merging metadata reduces the number of wrappers used to invoke a function.
         * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
         * may be applied regardless of execution order. Methods like `_.ary` and
         * `_.rearg` modify function arguments, making the order in which they are
         * executed important, preventing the merging of metadata. However, we make
         * an exception for a safe combined case where curried functions have `_.ary`
         * and or `_.rearg` applied.
         *
         * @private
         * @param {Array} data The destination metadata.
         * @param {Array} source The source metadata.
         * @returns {Array} Returns `data`.
         */
        function mergeData(data, source) {
          var bitmask = data[1],
              srcBitmask = source[1],
              newBitmask = bitmask | srcBitmask,
              isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

          var isCombo =
            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
            ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

          // Exit early if metadata can't be merged.
          if (!(isCommon || isCombo)) {
            return data;
          }
          // Use source `thisArg` if available.
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            // Set when currying a bound function.
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          // Compose partial arguments.
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          // Compose partial right arguments.
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          // Use source `argPos` if available.
          value = source[7];
          if (value) {
            data[7] = value;
          }
          // Use source `ary` if it's smaller.
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          // Use source `arity` if one is not provided.
          if (data[9] == null) {
            data[9] = source[9];
          }
          // Use source `func` and merge bitmasks.
          data[0] = source[0];
          data[1] = newBitmask;

          return data;
        }

        /**
         * This function is like
         * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * except that it includes inherited enumerable properties.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */
        function nativeKeysIn(object) {
          var result = [];
          if (object != null) {
            for (var key in Object(object)) {
              result.push(key);
            }
          }
          return result;
        }

        /**
         * Converts `value` to a string using `Object.prototype.toString`.
         *
         * @private
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         */
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }

        /**
         * A specialized version of `baseRest` which transforms the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @param {Function} transform The rest array transform.
         * @returns {Function} Returns the new function.
         */
        function overRest(func, start, transform) {
          start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
          return function() {
            var args = arguments,
                index = -1,
                length = nativeMax(args.length - start, 0),
                array = Array(length);

            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform(array);
            return apply(func, this, otherArgs);
          };
        }

        /**
         * Gets the parent value at `path` of `object`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} path The path to get the parent value of.
         * @returns {*} Returns the parent value.
         */
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }

        /**
         * Reorder `array` according to the specified indexes where the element at
         * the first index is assigned as the first element, the element at
         * the second index is assigned as the second element, and so on.
         *
         * @private
         * @param {Array} array The array to reorder.
         * @param {Array} indexes The arranged array indexes.
         * @returns {Array} Returns `array`.
         */
        function reorder(array, indexes) {
          var arrLength = array.length,
              length = nativeMin(indexes.length, arrLength),
              oldArray = copyArray(array);

          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
          }
          return array;
        }

        /**
         * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
         *
         * @private
         * @param {Object} object The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */
        function safeGet(object, key) {
          if (key === 'constructor' && typeof object[key] === 'function') {
            return;
          }

          if (key == '__proto__') {
            return;
          }

          return object[key];
        }

        /**
         * Sets metadata for `func`.
         *
         * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
         * period of time, it will trip its breaker and transition to an identity
         * function to avoid garbage collection pauses in V8. See
         * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
         * for more details.
         *
         * @private
         * @param {Function} func The function to associate metadata with.
         * @param {*} data The metadata.
         * @returns {Function} Returns `func`.
         */
        var setData = shortOut(baseSetData);

        /**
         * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
         *
         * @private
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @returns {number|Object} Returns the timer id or timeout object.
         */
        var setTimeout = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };

        /**
         * Sets the `toString` method of `func` to return `string`.
         *
         * @private
         * @param {Function} func The function to modify.
         * @param {Function} string The `toString` result.
         * @returns {Function} Returns `func`.
         */
        var setToString = shortOut(baseSetToString);

        /**
         * Sets the `toString` method of `wrapper` to mimic the source of `reference`
         * with wrapper details in a comment at the top of the source body.
         *
         * @private
         * @param {Function} wrapper The function to modify.
         * @param {Function} reference The reference function.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @returns {Function} Returns `wrapper`.
         */
        function setWrapToString(wrapper, reference, bitmask) {
          var source = (reference + '');
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }

        /**
         * Creates a function that'll short out and invoke `identity` instead
         * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
         * milliseconds.
         *
         * @private
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new shortable function.
         */
        function shortOut(func) {
          var count = 0,
              lastCalled = 0;

          return function() {
            var stamp = nativeNow(),
                remaining = HOT_SPAN - (stamp - lastCalled);

            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined$1, arguments);
          };
        }

        /**
         * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
         *
         * @private
         * @param {Array} array The array to shuffle.
         * @param {number} [size=array.length] The size of `array`.
         * @returns {Array} Returns `array`.
         */
        function shuffleSelf(array, size) {
          var index = -1,
              length = array.length,
              lastIndex = length - 1;

          size = size === undefined$1 ? length : size;
          while (++index < size) {
            var rand = baseRandom(index, lastIndex),
                value = array[rand];

            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size;
          return array;
        }

        /**
         * Converts `string` to a property path array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the property path array.
         */
        var stringToPath = memoizeCapped(function(string) {
          var result = [];
          if (string.charCodeAt(0) === 46 /* . */) {
            result.push('');
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
          });
          return result;
        });

        /**
         * Converts `value` to a string key if it's not a string or symbol.
         *
         * @private
         * @param {*} value The value to inspect.
         * @returns {string|symbol} Returns the key.
         */
        function toKey(value) {
          if (typeof value == 'string' || isSymbol(value)) {
            return value;
          }
          var result = (value + '');
          return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
        }

        /**
         * Converts `func` to its source code.
         *
         * @private
         * @param {Function} func The function to convert.
         * @returns {string} Returns the source code.
         */
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {}
            try {
              return (func + '');
            } catch (e) {}
          }
          return '';
        }

        /**
         * Updates wrapper `details` based on `bitmask` flags.
         *
         * @private
         * @returns {Array} details The details to modify.
         * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
         * @returns {Array} Returns `details`.
         */
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = '_.' + pair[0];
            if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }

        /**
         * Creates a clone of `wrapper`.
         *
         * @private
         * @param {Object} wrapper The wrapper to clone.
         * @returns {Object} Returns the cloned wrapper.
         */
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result.__actions__ = copyArray(wrapper.__actions__);
          result.__index__  = wrapper.__index__;
          result.__values__ = wrapper.__values__;
          return result;
        }

        /*------------------------------------------------------------------------*/

        /**
         * Creates an array of elements split into groups the length of `size`.
         * If `array` can't be split evenly, the final chunk will be the remaining
         * elements.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to process.
         * @param {number} [size=1] The length of each chunk
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the new array of chunks.
         * @example
         *
         * _.chunk(['a', 'b', 'c', 'd'], 2);
         * // => [['a', 'b'], ['c', 'd']]
         *
         * _.chunk(['a', 'b', 'c', 'd'], 3);
         * // => [['a', 'b', 'c'], ['d']]
         */
        function chunk(array, size, guard) {
          if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
            size = 1;
          } else {
            size = nativeMax(toInteger(size), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size < 1) {
            return [];
          }
          var index = 0,
              resIndex = 0,
              result = Array(nativeCeil(length / size));

          while (index < length) {
            result[resIndex++] = baseSlice(array, index, (index += size));
          }
          return result;
        }

        /**
         * Creates an array with all falsey values removed. The values `false`, `null`,
         * `0`, `""`, `undefined`, and `NaN` are falsey.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to compact.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.compact([0, 1, false, 2, '', 3]);
         * // => [1, 2, 3]
         */
        function compact(array) {
          var index = -1,
              length = array == null ? 0 : array.length,
              resIndex = 0,
              result = [];

          while (++index < length) {
            var value = array[index];
            if (value) {
              result[resIndex++] = value;
            }
          }
          return result;
        }

        /**
         * Creates a new array concatenating `array` with any additional arrays
         * and/or values.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to concatenate.
         * @param {...*} [values] The values to concatenate.
         * @returns {Array} Returns the new concatenated array.
         * @example
         *
         * var array = [1];
         * var other = _.concat(array, 2, [3], [[4]]);
         *
         * console.log(other);
         * // => [1, 2, 3, [4]]
         *
         * console.log(array);
         * // => [1]
         */
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array(length - 1),
              array = arguments[0],
              index = length;

          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }

        /**
         * Creates an array of `array` values not included in the other given arrays
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. The order and references of result values are
         * determined by the first array.
         *
         * **Note:** Unlike `_.pullAll`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.without, _.xor
         * @example
         *
         * _.difference([2, 1], [2, 3]);
         * // => [1]
         */
        var difference = baseRest(function(array, values) {
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
            : [];
        });

        /**
         * This method is like `_.difference` except that it accepts `iteratee` which
         * is invoked for each element of `array` and `values` to generate the criterion
         * by which they're compared. The order and references of result values are
         * determined by the first array. The iteratee is invoked with one argument:
         * (value).
         *
         * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
         * // => [{ 'x': 2 }]
         */
        var differenceBy = baseRest(function(array, values) {
          var iteratee = last(values);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined$1;
          }
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
            : [];
        });

        /**
         * This method is like `_.difference` except that it accepts `comparator`
         * which is invoked to compare elements of `array` to `values`. The order and
         * references of result values are determined by the first array. The comparator
         * is invoked with two arguments: (arrVal, othVal).
         *
         * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...Array} [values] The values to exclude.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         *
         * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
         * // => [{ 'x': 2, 'y': 1 }]
         */
        var differenceWith = baseRest(function(array, values) {
          var comparator = last(values);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined$1;
          }
          return isArrayLikeObject(array)
            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
            : [];
        });

        /**
         * Creates a slice of `array` with `n` elements dropped from the beginning.
         *
         * @static
         * @memberOf _
         * @since 0.5.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to drop.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.drop([1, 2, 3]);
         * // => [2, 3]
         *
         * _.drop([1, 2, 3], 2);
         * // => [3]
         *
         * _.drop([1, 2, 3], 5);
         * // => []
         *
         * _.drop([1, 2, 3], 0);
         * // => [1, 2, 3]
         */
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined$1) ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }

        /**
         * Creates a slice of `array` with `n` elements dropped from the end.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to drop.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.dropRight([1, 2, 3]);
         * // => [1, 2]
         *
         * _.dropRight([1, 2, 3], 2);
         * // => [1]
         *
         * _.dropRight([1, 2, 3], 5);
         * // => []
         *
         * _.dropRight([1, 2, 3], 0);
         * // => [1, 2, 3]
         */
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined$1) ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }

        /**
         * Creates a slice of `array` excluding elements dropped from the end.
         * Elements are dropped until `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.dropRightWhile(users, function(o) { return !o.active; });
         * // => objects for ['barney']
         *
         * // The `_.matches` iteratee shorthand.
         * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
         * // => objects for ['barney', 'fred']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.dropRightWhile(users, ['active', false]);
         * // => objects for ['barney']
         *
         * // The `_.property` iteratee shorthand.
         * _.dropRightWhile(users, 'active');
         * // => objects for ['barney', 'fred', 'pebbles']
         */
        function dropRightWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3), true, true)
            : [];
        }

        /**
         * Creates a slice of `array` excluding elements dropped from the beginning.
         * Elements are dropped until `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.dropWhile(users, function(o) { return !o.active; });
         * // => objects for ['pebbles']
         *
         * // The `_.matches` iteratee shorthand.
         * _.dropWhile(users, { 'user': 'barney', 'active': false });
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.dropWhile(users, ['active', false]);
         * // => objects for ['pebbles']
         *
         * // The `_.property` iteratee shorthand.
         * _.dropWhile(users, 'active');
         * // => objects for ['barney', 'fred', 'pebbles']
         */
        function dropWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3), true)
            : [];
        }

        /**
         * Fills elements of `array` with `value` from `start` up to, but not
         * including, `end`.
         *
         * **Note:** This method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 3.2.0
         * @category Array
         * @param {Array} array The array to fill.
         * @param {*} value The value to fill `array` with.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _.fill(array, 'a');
         * console.log(array);
         * // => ['a', 'a', 'a']
         *
         * _.fill(Array(3), 2);
         * // => [2, 2, 2]
         *
         * _.fill([4, 6, 8, 10], '*', 1, 3);
         * // => [4, '*', '*', 10]
         */
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }

        /**
         * This method is like `_.find` except that it returns the index of the first
         * element `predicate` returns truthy for instead of the element itself.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {number} Returns the index of the found element, else `-1`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.findIndex(users, function(o) { return o.user == 'barney'; });
         * // => 0
         *
         * // The `_.matches` iteratee shorthand.
         * _.findIndex(users, { 'user': 'fred', 'active': false });
         * // => 1
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findIndex(users, ['active', false]);
         * // => 0
         *
         * // The `_.property` iteratee shorthand.
         * _.findIndex(users, 'active');
         * // => 2
         */
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }

        /**
         * This method is like `_.findIndex` except that it iterates over elements
         * of `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=array.length-1] The index to search from.
         * @returns {number} Returns the index of the found element, else `-1`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
         * // => 2
         *
         * // The `_.matches` iteratee shorthand.
         * _.findLastIndex(users, { 'user': 'barney', 'active': true });
         * // => 0
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findLastIndex(users, ['active', false]);
         * // => 2
         *
         * // The `_.property` iteratee shorthand.
         * _.findLastIndex(users, 'active');
         * // => 0
         */
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined$1) {
            index = toInteger(fromIndex);
            index = fromIndex < 0
              ? nativeMax(length + index, 0)
              : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }

        /**
         * Flattens `array` a single level deep.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * _.flatten([1, [2, [3, [4]], 5]]);
         * // => [1, 2, [3, [4]], 5]
         */
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }

        /**
         * Recursively flattens `array`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * _.flattenDeep([1, [2, [3, [4]], 5]]);
         * // => [1, 2, 3, 4, 5]
         */
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }

        /**
         * Recursively flatten `array` up to `depth` times.
         *
         * @static
         * @memberOf _
         * @since 4.4.0
         * @category Array
         * @param {Array} array The array to flatten.
         * @param {number} [depth=1] The maximum recursion depth.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * var array = [1, [2, [3, [4]], 5]];
         *
         * _.flattenDepth(array, 1);
         * // => [1, 2, [3, [4]], 5]
         *
         * _.flattenDepth(array, 2);
         * // => [1, 2, 3, [4], 5]
         */
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined$1 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }

        /**
         * The inverse of `_.toPairs`; this method returns an object composed
         * from key-value `pairs`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} pairs The key-value pairs.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.fromPairs([['a', 1], ['b', 2]]);
         * // => { 'a': 1, 'b': 2 }
         */
        function fromPairs(pairs) {
          var index = -1,
              length = pairs == null ? 0 : pairs.length,
              result = {};

          while (++index < length) {
            var pair = pairs[index];
            result[pair[0]] = pair[1];
          }
          return result;
        }

        /**
         * Gets the first element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @alias first
         * @category Array
         * @param {Array} array The array to query.
         * @returns {*} Returns the first element of `array`.
         * @example
         *
         * _.head([1, 2, 3]);
         * // => 1
         *
         * _.head([]);
         * // => undefined
         */
        function head(array) {
          return (array && array.length) ? array[0] : undefined$1;
        }

        /**
         * Gets the index at which the first occurrence of `value` is found in `array`
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. If `fromIndex` is negative, it's used as the
         * offset from the end of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.indexOf([1, 2, 1, 2], 2);
         * // => 1
         *
         * // Search from the `fromIndex`.
         * _.indexOf([1, 2, 1, 2], 2, 2);
         * // => 3
         */
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }

        /**
         * Gets all but the last element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.initial([1, 2, 3]);
         * // => [1, 2]
         */
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }

        /**
         * Creates an array of unique values that are included in all given arrays
         * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons. The order and references of result values are
         * determined by the first array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * _.intersection([2, 1], [2, 3]);
         * // => [2]
         */
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped)
            : [];
        });

        /**
         * This method is like `_.intersection` except that it accepts `iteratee`
         * which is invoked for each element of each `arrays` to generate the criterion
         * by which they're compared. The order and references of result values are
         * determined by the first array. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [2.1]
         *
         * // The `_.property` iteratee shorthand.
         * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }]
         */
        var intersectionBy = baseRest(function(arrays) {
          var iteratee = last(arrays),
              mapped = arrayMap(arrays, castArrayLikeObject);

          if (iteratee === last(mapped)) {
            iteratee = undefined$1;
          } else {
            mapped.pop();
          }
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped, getIteratee(iteratee, 2))
            : [];
        });

        /**
         * This method is like `_.intersection` except that it accepts `comparator`
         * which is invoked to compare elements of `arrays`. The order and references
         * of result values are determined by the first array. The comparator is
         * invoked with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of intersecting values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.intersectionWith(objects, others, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }]
         */
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays),
              mapped = arrayMap(arrays, castArrayLikeObject);

          comparator = typeof comparator == 'function' ? comparator : undefined$1;
          if (comparator) {
            mapped.pop();
          }
          return (mapped.length && mapped[0] === arrays[0])
            ? baseIntersection(mapped, undefined$1, comparator)
            : [];
        });

        /**
         * Converts all elements in `array` into a string separated by `separator`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to convert.
         * @param {string} [separator=','] The element separator.
         * @returns {string} Returns the joined string.
         * @example
         *
         * _.join(['a', 'b', 'c'], '~');
         * // => 'a~b~c'
         */
        function join(array, separator) {
          return array == null ? '' : nativeJoin.call(array, separator);
        }

        /**
         * Gets the last element of `array`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {*} Returns the last element of `array`.
         * @example
         *
         * _.last([1, 2, 3]);
         * // => 3
         */
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined$1;
        }

        /**
         * This method is like `_.indexOf` except that it iterates over elements of
         * `array` from right to left.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=array.length-1] The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.lastIndexOf([1, 2, 1, 2], 2);
         * // => 3
         *
         * // Search from the `fromIndex`.
         * _.lastIndexOf([1, 2, 1, 2], 2, 2);
         * // => 1
         */
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined$1) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value
            ? strictLastIndexOf(array, value, index)
            : baseFindIndex(array, baseIsNaN, index, true);
        }

        /**
         * Gets the element at index `n` of `array`. If `n` is negative, the nth
         * element from the end is returned.
         *
         * @static
         * @memberOf _
         * @since 4.11.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=0] The index of the element to return.
         * @returns {*} Returns the nth element of `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'd'];
         *
         * _.nth(array, 1);
         * // => 'b'
         *
         * _.nth(array, -2);
         * // => 'c';
         */
        function nth(array, n) {
          return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
        }

        /**
         * Removes all given values from `array` using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
         * to remove elements from an array by predicate.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {...*} [values] The values to remove.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
         *
         * _.pull(array, 'a', 'c');
         * console.log(array);
         * // => ['b', 'b']
         */
        var pull = baseRest(pullAll);

        /**
         * This method is like `_.pull` except that it accepts an array of values to remove.
         *
         * **Note:** Unlike `_.difference`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
         *
         * _.pullAll(array, ['a', 'c']);
         * console.log(array);
         * // => ['b', 'b']
         */
        function pullAll(array, values) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values)
            : array;
        }

        /**
         * This method is like `_.pullAll` except that it accepts `iteratee` which is
         * invoked for each element of `array` and `values` to generate the criterion
         * by which they're compared. The iteratee is invoked with one argument: (value).
         *
         * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
         *
         * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
         * console.log(array);
         * // => [{ 'x': 2 }]
         */
        function pullAllBy(array, values, iteratee) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values, getIteratee(iteratee, 2))
            : array;
        }

        /**
         * This method is like `_.pullAll` except that it accepts `comparator` which
         * is invoked to compare elements of `array` to `values`. The comparator is
         * invoked with two arguments: (arrVal, othVal).
         *
         * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Array} values The values to remove.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
         *
         * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
         * console.log(array);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
         */
        function pullAllWith(array, values, comparator) {
          return (array && array.length && values && values.length)
            ? basePullAll(array, values, undefined$1, comparator)
            : array;
        }

        /**
         * Removes elements from `array` corresponding to `indexes` and returns an
         * array of removed elements.
         *
         * **Note:** Unlike `_.at`, this method mutates `array`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {...(number|number[])} [indexes] The indexes of elements to remove.
         * @returns {Array} Returns the new array of removed elements.
         * @example
         *
         * var array = ['a', 'b', 'c', 'd'];
         * var pulled = _.pullAt(array, [1, 3]);
         *
         * console.log(array);
         * // => ['a', 'c']
         *
         * console.log(pulled);
         * // => ['b', 'd']
         */
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length,
              result = baseAt(array, indexes);

          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));

          return result;
        });

        /**
         * Removes all elements from `array` that `predicate` returns truthy for
         * and returns an array of the removed elements. The predicate is invoked
         * with three arguments: (value, index, array).
         *
         * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
         * to pull elements from an array by value.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new array of removed elements.
         * @example
         *
         * var array = [1, 2, 3, 4];
         * var evens = _.remove(array, function(n) {
         *   return n % 2 == 0;
         * });
         *
         * console.log(array);
         * // => [1, 3]
         *
         * console.log(evens);
         * // => [2, 4]
         */
        function remove(array, predicate) {
          var result = [];
          if (!(array && array.length)) {
            return result;
          }
          var index = -1,
              indexes = [],
              length = array.length;

          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result;
        }

        /**
         * Reverses `array` so that the first element becomes the last, the second
         * element becomes the second to last, and so on.
         *
         * **Note:** This method mutates `array` and is based on
         * [`Array#reverse`](https://mdn.io/Array/reverse).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to modify.
         * @returns {Array} Returns `array`.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _.reverse(array);
         * // => [3, 2, 1]
         *
         * console.log(array);
         * // => [3, 2, 1]
         */
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }

        /**
         * Creates a slice of `array` from `start` up to, but not including, `end`.
         *
         * **Note:** This method is used instead of
         * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
         * returned.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          }
          else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined$1 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }

        /**
         * Uses a binary search to determine the lowest index at which `value`
         * should be inserted into `array` in order to maintain its sort order.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * _.sortedIndex([30, 50], 40);
         * // => 1
         */
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }

        /**
         * This method is like `_.sortedIndex` except that it accepts `iteratee`
         * which is invoked for `value` and each element of `array` to compute their
         * sort ranking. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * var objects = [{ 'x': 4 }, { 'x': 5 }];
         *
         * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
         * // => 0
         *
         * // The `_.property` iteratee shorthand.
         * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
         * // => 0
         */
        function sortedIndexBy(array, value, iteratee) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
        }

        /**
         * This method is like `_.indexOf` except that it performs a binary
         * search on a sorted `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
         * // => 1
         */
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }

        /**
         * This method is like `_.sortedIndex` except that it returns the highest
         * index at which `value` should be inserted into `array` in order to
         * maintain its sort order.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
         * // => 4
         */
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }

        /**
         * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
         * which is invoked for `value` and each element of `array` to compute their
         * sort ranking. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The sorted array to inspect.
         * @param {*} value The value to evaluate.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the index at which `value` should be inserted
         *  into `array`.
         * @example
         *
         * var objects = [{ 'x': 4 }, { 'x': 5 }];
         *
         * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
         * // => 1
         *
         * // The `_.property` iteratee shorthand.
         * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
         * // => 1
         */
        function sortedLastIndexBy(array, value, iteratee) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
        }

        /**
         * This method is like `_.lastIndexOf` except that it performs a binary
         * search on a sorted `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @returns {number} Returns the index of the matched value, else `-1`.
         * @example
         *
         * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
         * // => 3
         */
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }

        /**
         * This method is like `_.uniq` except that it's designed and optimized
         * for sorted arrays.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.sortedUniq([1, 1, 2]);
         * // => [1, 2]
         */
        function sortedUniq(array) {
          return (array && array.length)
            ? baseSortedUniq(array)
            : [];
        }

        /**
         * This method is like `_.uniqBy` except that it's designed and optimized
         * for sorted arrays.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
         * // => [1.1, 2.3]
         */
        function sortedUniqBy(array, iteratee) {
          return (array && array.length)
            ? baseSortedUniq(array, getIteratee(iteratee, 2))
            : [];
        }

        /**
         * Gets all but the first element of `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.tail([1, 2, 3]);
         * // => [2, 3]
         */
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }

        /**
         * Creates a slice of `array` with `n` elements taken from the beginning.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to take.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.take([1, 2, 3]);
         * // => [1]
         *
         * _.take([1, 2, 3], 2);
         * // => [1, 2]
         *
         * _.take([1, 2, 3], 5);
         * // => [1, 2, 3]
         *
         * _.take([1, 2, 3], 0);
         * // => []
         */
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = (guard || n === undefined$1) ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }

        /**
         * Creates a slice of `array` with `n` elements taken from the end.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {number} [n=1] The number of elements to take.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * _.takeRight([1, 2, 3]);
         * // => [3]
         *
         * _.takeRight([1, 2, 3], 2);
         * // => [2, 3]
         *
         * _.takeRight([1, 2, 3], 5);
         * // => [1, 2, 3]
         *
         * _.takeRight([1, 2, 3], 0);
         * // => []
         */
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = (guard || n === undefined$1) ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }

        /**
         * Creates a slice of `array` with elements taken from the end. Elements are
         * taken until `predicate` returns falsey. The predicate is invoked with
         * three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': true },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': false }
         * ];
         *
         * _.takeRightWhile(users, function(o) { return !o.active; });
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.matches` iteratee shorthand.
         * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
         * // => objects for ['pebbles']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.takeRightWhile(users, ['active', false]);
         * // => objects for ['fred', 'pebbles']
         *
         * // The `_.property` iteratee shorthand.
         * _.takeRightWhile(users, 'active');
         * // => []
         */
        function takeRightWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3), false, true)
            : [];
        }

        /**
         * Creates a slice of `array` with elements taken from the beginning. Elements
         * are taken until `predicate` returns falsey. The predicate is invoked with
         * three arguments: (value, index, array).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Array
         * @param {Array} array The array to query.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the slice of `array`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'active': false },
         *   { 'user': 'fred',    'active': false },
         *   { 'user': 'pebbles', 'active': true }
         * ];
         *
         * _.takeWhile(users, function(o) { return !o.active; });
         * // => objects for ['barney', 'fred']
         *
         * // The `_.matches` iteratee shorthand.
         * _.takeWhile(users, { 'user': 'barney', 'active': false });
         * // => objects for ['barney']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.takeWhile(users, ['active', false]);
         * // => objects for ['barney', 'fred']
         *
         * // The `_.property` iteratee shorthand.
         * _.takeWhile(users, 'active');
         * // => []
         */
        function takeWhile(array, predicate) {
          return (array && array.length)
            ? baseWhile(array, getIteratee(predicate, 3))
            : [];
        }

        /**
         * Creates an array of unique values, in order, from all given arrays using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * _.union([2], [1, 2]);
         * // => [2, 1]
         */
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });

        /**
         * This method is like `_.union` except that it accepts `iteratee` which is
         * invoked for each element of each `arrays` to generate the criterion by
         * which uniqueness is computed. Result values are chosen from the first
         * array in which the value occurs. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * _.unionBy([2.1], [1.2, 2.3], Math.floor);
         * // => [2.1, 1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }, { 'x': 2 }]
         */
        var unionBy = baseRest(function(arrays) {
          var iteratee = last(arrays);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined$1;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
        });

        /**
         * This method is like `_.union` except that it accepts `comparator` which
         * is invoked to compare elements of `arrays`. Result values are chosen from
         * the first array in which the value occurs. The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of combined values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.unionWith(objects, others, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
         */
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == 'function' ? comparator : undefined$1;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
        });

        /**
         * Creates a duplicate-free version of an array, using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons, in which only the first occurrence of each element
         * is kept. The order of result values is determined by the order they occur
         * in the array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.uniq([2, 1, 2]);
         * // => [2, 1]
         */
        function uniq(array) {
          return (array && array.length) ? baseUniq(array) : [];
        }

        /**
         * This method is like `_.uniq` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the criterion by which
         * uniqueness is computed. The order of result values is determined by the
         * order they occur in the array. The iteratee is invoked with one argument:
         * (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
         * // => [2.1, 1.2]
         *
         * // The `_.property` iteratee shorthand.
         * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 1 }, { 'x': 2 }]
         */
        function uniqBy(array, iteratee) {
          return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
        }

        /**
         * This method is like `_.uniq` except that it accepts `comparator` which
         * is invoked to compare elements of `array`. The order of result values is
         * determined by the order they occur in the array.The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new duplicate free array.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.uniqWith(objects, _.isEqual);
         * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
         */
        function uniqWith(array, comparator) {
          comparator = typeof comparator == 'function' ? comparator : undefined$1;
          return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
        }

        /**
         * This method is like `_.zip` except that it accepts an array of grouped
         * elements and creates an array regrouping the elements to their pre-zip
         * configuration.
         *
         * @static
         * @memberOf _
         * @since 1.2.0
         * @category Array
         * @param {Array} array The array of grouped elements to process.
         * @returns {Array} Returns the new array of regrouped elements.
         * @example
         *
         * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
         * // => [['a', 1, true], ['b', 2, false]]
         *
         * _.unzip(zipped);
         * // => [['a', 'b'], [1, 2], [true, false]]
         */
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }

        /**
         * This method is like `_.unzip` except that it accepts `iteratee` to specify
         * how regrouped values should be combined. The iteratee is invoked with the
         * elements of each group: (...group).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Array
         * @param {Array} array The array of grouped elements to process.
         * @param {Function} [iteratee=_.identity] The function to combine
         *  regrouped values.
         * @returns {Array} Returns the new array of regrouped elements.
         * @example
         *
         * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
         * // => [[1, 10, 100], [2, 20, 200]]
         *
         * _.unzipWith(zipped, _.add);
         * // => [3, 30, 300]
         */
        function unzipWith(array, iteratee) {
          if (!(array && array.length)) {
            return [];
          }
          var result = unzip(array);
          if (iteratee == null) {
            return result;
          }
          return arrayMap(result, function(group) {
            return apply(iteratee, undefined$1, group);
          });
        }

        /**
         * Creates an array excluding all given values using
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * for equality comparisons.
         *
         * **Note:** Unlike `_.pull`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {Array} array The array to inspect.
         * @param {...*} [values] The values to exclude.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.difference, _.xor
         * @example
         *
         * _.without([2, 1, 2, 3], 1, 2);
         * // => [3]
         */
        var without = baseRest(function(array, values) {
          return isArrayLikeObject(array)
            ? baseDifference(array, values)
            : [];
        });

        /**
         * Creates an array of unique values that is the
         * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
         * of the given arrays. The order of result values is determined by the order
         * they occur in the arrays.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @returns {Array} Returns the new array of filtered values.
         * @see _.difference, _.without
         * @example
         *
         * _.xor([2, 1], [2, 3]);
         * // => [1, 3]
         */
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });

        /**
         * This method is like `_.xor` except that it accepts `iteratee` which is
         * invoked for each element of each `arrays` to generate the criterion by
         * which by which they're compared. The order of result values is determined
         * by the order they occur in the arrays. The iteratee is invoked with one
         * argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
         * // => [1.2, 3.4]
         *
         * // The `_.property` iteratee shorthand.
         * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
         * // => [{ 'x': 2 }]
         */
        var xorBy = baseRest(function(arrays) {
          var iteratee = last(arrays);
          if (isArrayLikeObject(iteratee)) {
            iteratee = undefined$1;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
        });

        /**
         * This method is like `_.xor` except that it accepts `comparator` which is
         * invoked to compare elements of `arrays`. The order of result values is
         * determined by the order they occur in the arrays. The comparator is invoked
         * with two arguments: (arrVal, othVal).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Array
         * @param {...Array} [arrays] The arrays to inspect.
         * @param {Function} [comparator] The comparator invoked per element.
         * @returns {Array} Returns the new array of filtered values.
         * @example
         *
         * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
         * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
         *
         * _.xorWith(objects, others, _.isEqual);
         * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
         */
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == 'function' ? comparator : undefined$1;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
        });

        /**
         * Creates an array of grouped elements, the first of which contains the
         * first elements of the given arrays, the second of which contains the
         * second elements of the given arrays, and so on.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Array
         * @param {...Array} [arrays] The arrays to process.
         * @returns {Array} Returns the new array of grouped elements.
         * @example
         *
         * _.zip(['a', 'b'], [1, 2], [true, false]);
         * // => [['a', 1, true], ['b', 2, false]]
         */
        var zip = baseRest(unzip);

        /**
         * This method is like `_.fromPairs` except that it accepts two arrays,
         * one of property identifiers and one of corresponding values.
         *
         * @static
         * @memberOf _
         * @since 0.4.0
         * @category Array
         * @param {Array} [props=[]] The property identifiers.
         * @param {Array} [values=[]] The property values.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.zipObject(['a', 'b'], [1, 2]);
         * // => { 'a': 1, 'b': 2 }
         */
        function zipObject(props, values) {
          return baseZipObject(props || [], values || [], assignValue);
        }

        /**
         * This method is like `_.zipObject` except that it supports property paths.
         *
         * @static
         * @memberOf _
         * @since 4.1.0
         * @category Array
         * @param {Array} [props=[]] The property identifiers.
         * @param {Array} [values=[]] The property values.
         * @returns {Object} Returns the new object.
         * @example
         *
         * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
         * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
         */
        function zipObjectDeep(props, values) {
          return baseZipObject(props || [], values || [], baseSet);
        }

        /**
         * This method is like `_.zip` except that it accepts `iteratee` to specify
         * how grouped values should be combined. The iteratee is invoked with the
         * elements of each group: (...group).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Array
         * @param {...Array} [arrays] The arrays to process.
         * @param {Function} [iteratee=_.identity] The function to combine
         *  grouped values.
         * @returns {Array} Returns the new array of grouped elements.
         * @example
         *
         * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
         *   return a + b + c;
         * });
         * // => [111, 222]
         */
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length,
              iteratee = length > 1 ? arrays[length - 1] : undefined$1;

          iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
          return unzipWith(arrays, iteratee);
        });

        /*------------------------------------------------------------------------*/

        /**
         * Creates a `lodash` wrapper instance that wraps `value` with explicit method
         * chain sequences enabled. The result of such sequences must be unwrapped
         * with `_#value`.
         *
         * @static
         * @memberOf _
         * @since 1.3.0
         * @category Seq
         * @param {*} value The value to wrap.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36 },
         *   { 'user': 'fred',    'age': 40 },
         *   { 'user': 'pebbles', 'age': 1 }
         * ];
         *
         * var youngest = _
         *   .chain(users)
         *   .sortBy('age')
         *   .map(function(o) {
         *     return o.user + ' is ' + o.age;
         *   })
         *   .head()
         *   .value();
         * // => 'pebbles is 1'
         */
        function chain(value) {
          var result = lodash(value);
          result.__chain__ = true;
          return result;
        }

        /**
         * This method invokes `interceptor` and returns `value`. The interceptor
         * is invoked with one argument; (value). The purpose of this method is to
         * "tap into" a method chain sequence in order to modify intermediate results.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Seq
         * @param {*} value The value to provide to `interceptor`.
         * @param {Function} interceptor The function to invoke.
         * @returns {*} Returns `value`.
         * @example
         *
         * _([1, 2, 3])
         *  .tap(function(array) {
         *    // Mutate input array.
         *    array.pop();
         *  })
         *  .reverse()
         *  .value();
         * // => [2, 1]
         */
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }

        /**
         * This method is like `_.tap` except that it returns the result of `interceptor`.
         * The purpose of this method is to "pass thru" values replacing intermediate
         * results in a method chain sequence.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Seq
         * @param {*} value The value to provide to `interceptor`.
         * @param {Function} interceptor The function to invoke.
         * @returns {*} Returns the result of `interceptor`.
         * @example
         *
         * _('  abc  ')
         *  .chain()
         *  .trim()
         *  .thru(function(value) {
         *    return [value];
         *  })
         *  .value();
         * // => ['abc']
         */
        function thru(value, interceptor) {
          return interceptor(value);
        }

        /**
         * This method is the wrapper version of `_.at`.
         *
         * @name at
         * @memberOf _
         * @since 1.0.0
         * @category Seq
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
         *
         * _(object).at(['a[0].b.c', 'a[1]']).value();
         * // => [3, 4]
         */
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length,
              start = length ? paths[0] : 0,
              value = this.__wrapped__,
              interceptor = function(object) { return baseAt(object, paths); };

          if (length > 1 || this.__actions__.length ||
              !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            'func': thru,
            'args': [interceptor],
            'thisArg': undefined$1
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined$1);
            }
            return array;
          });
        });

        /**
         * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
         *
         * @name chain
         * @memberOf _
         * @since 0.1.0
         * @category Seq
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36 },
         *   { 'user': 'fred',   'age': 40 }
         * ];
         *
         * // A sequence without explicit chaining.
         * _(users).head();
         * // => { 'user': 'barney', 'age': 36 }
         *
         * // A sequence with explicit chaining.
         * _(users)
         *   .chain()
         *   .head()
         *   .pick('user')
         *   .value();
         * // => { 'user': 'barney' }
         */
        function wrapperChain() {
          return chain(this);
        }

        /**
         * Executes the chain sequence and returns the wrapped result.
         *
         * @name commit
         * @memberOf _
         * @since 3.2.0
         * @category Seq
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var array = [1, 2];
         * var wrapped = _(array).push(3);
         *
         * console.log(array);
         * // => [1, 2]
         *
         * wrapped = wrapped.commit();
         * console.log(array);
         * // => [1, 2, 3]
         *
         * wrapped.last();
         * // => 3
         *
         * console.log(array);
         * // => [1, 2, 3]
         */
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }

        /**
         * Gets the next value on a wrapped object following the
         * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
         *
         * @name next
         * @memberOf _
         * @since 4.0.0
         * @category Seq
         * @returns {Object} Returns the next iterator value.
         * @example
         *
         * var wrapped = _([1, 2]);
         *
         * wrapped.next();
         * // => { 'done': false, 'value': 1 }
         *
         * wrapped.next();
         * // => { 'done': false, 'value': 2 }
         *
         * wrapped.next();
         * // => { 'done': true, 'value': undefined }
         */
        function wrapperNext() {
          if (this.__values__ === undefined$1) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length,
              value = done ? undefined$1 : this.__values__[this.__index__++];

          return { 'done': done, 'value': value };
        }

        /**
         * Enables the wrapper to be iterable.
         *
         * @name Symbol.iterator
         * @memberOf _
         * @since 4.0.0
         * @category Seq
         * @returns {Object} Returns the wrapper object.
         * @example
         *
         * var wrapped = _([1, 2]);
         *
         * wrapped[Symbol.iterator]() === wrapped;
         * // => true
         *
         * Array.from(wrapped);
         * // => [1, 2]
         */
        function wrapperToIterator() {
          return this;
        }

        /**
         * Creates a clone of the chain sequence planting `value` as the wrapped value.
         *
         * @name plant
         * @memberOf _
         * @since 3.2.0
         * @category Seq
         * @param {*} value The value to plant.
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var wrapped = _([1, 2]).map(square);
         * var other = wrapped.plant([3, 4]);
         *
         * other.value();
         * // => [9, 16]
         *
         * wrapped.value();
         * // => [1, 4]
         */
        function wrapperPlant(value) {
          var result,
              parent = this;

          while (parent instanceof baseLodash) {
            var clone = wrapperClone(parent);
            clone.__index__ = 0;
            clone.__values__ = undefined$1;
            if (result) {
              previous.__wrapped__ = clone;
            } else {
              result = clone;
            }
            var previous = clone;
            parent = parent.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result;
        }

        /**
         * This method is the wrapper version of `_.reverse`.
         *
         * **Note:** This method mutates the wrapped array.
         *
         * @name reverse
         * @memberOf _
         * @since 0.1.0
         * @category Seq
         * @returns {Object} Returns the new `lodash` wrapper instance.
         * @example
         *
         * var array = [1, 2, 3];
         *
         * _(array).reverse().value()
         * // => [3, 2, 1]
         *
         * console.log(array);
         * // => [3, 2, 1]
         */
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              'func': thru,
              'args': [reverse],
              'thisArg': undefined$1
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }

        /**
         * Executes the chain sequence to resolve the unwrapped value.
         *
         * @name value
         * @memberOf _
         * @since 0.1.0
         * @alias toJSON, valueOf
         * @category Seq
         * @returns {*} Returns the resolved unwrapped value.
         * @example
         *
         * _([1, 2, 3]).value();
         * // => [1, 2, 3]
         */
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }

        /*------------------------------------------------------------------------*/

        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` thru `iteratee`. The corresponding value of
         * each key is the number of times the key was returned by `iteratee`. The
         * iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 0.5.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * _.countBy([6.1, 4.2, 6.3], Math.floor);
         * // => { '4': 1, '6': 2 }
         *
         * // The `_.property` iteratee shorthand.
         * _.countBy(['one', 'two', 'three'], 'length');
         * // => { '3': 2, '5': 1 }
         */
        var countBy = createAggregator(function(result, value, key) {
          if (hasOwnProperty.call(result, key)) {
            ++result[key];
          } else {
            baseAssignValue(result, key, 1);
          }
        });

        /**
         * Checks if `predicate` returns truthy for **all** elements of `collection`.
         * Iteration is stopped once `predicate` returns falsey. The predicate is
         * invoked with three arguments: (value, index|key, collection).
         *
         * **Note:** This method returns `true` for
         * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
         * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
         * elements of empty collections.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`.
         * @example
         *
         * _.every([true, 1, null, 'yes'], Boolean);
         * // => false
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': false },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * // The `_.matches` iteratee shorthand.
         * _.every(users, { 'user': 'barney', 'active': false });
         * // => false
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.every(users, ['active', false]);
         * // => true
         *
         * // The `_.property` iteratee shorthand.
         * _.every(users, 'active');
         * // => false
         */
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined$1;
          }
          return func(collection, getIteratee(predicate, 3));
        }

        /**
         * Iterates over elements of `collection`, returning an array of all elements
         * `predicate` returns truthy for. The predicate is invoked with three
         * arguments: (value, index|key, collection).
         *
         * **Note:** Unlike `_.remove`, this method returns a new array.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         * @see _.reject
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': true },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * _.filter(users, function(o) { return !o.active; });
         * // => objects for ['fred']
         *
         * // The `_.matches` iteratee shorthand.
         * _.filter(users, { 'age': 36, 'active': true });
         * // => objects for ['barney']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.filter(users, ['active', false]);
         * // => objects for ['fred']
         *
         * // The `_.property` iteratee shorthand.
         * _.filter(users, 'active');
         * // => objects for ['barney']
         *
         * // Combining several predicates using `_.overEvery` or `_.overSome`.
         * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
         * // => objects for ['fred', 'barney']
         */
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }

        /**
         * Iterates over elements of `collection`, returning the first element
         * `predicate` returns truthy for. The predicate is invoked with three
         * arguments: (value, index|key, collection).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=0] The index to search from.
         * @returns {*} Returns the matched element, else `undefined`.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36, 'active': true },
         *   { 'user': 'fred',    'age': 40, 'active': false },
         *   { 'user': 'pebbles', 'age': 1,  'active': true }
         * ];
         *
         * _.find(users, function(o) { return o.age < 40; });
         * // => object for 'barney'
         *
         * // The `_.matches` iteratee shorthand.
         * _.find(users, { 'age': 1, 'active': true });
         * // => object for 'pebbles'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.find(users, ['active', false]);
         * // => object for 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.find(users, 'active');
         * // => object for 'barney'
         */
        var find = createFind(findIndex);

        /**
         * This method is like `_.find` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param {number} [fromIndex=collection.length-1] The index to search from.
         * @returns {*} Returns the matched element, else `undefined`.
         * @example
         *
         * _.findLast([1, 2, 3, 4], function(n) {
         *   return n % 2 == 1;
         * });
         * // => 3
         */
        var findLast = createFind(findLastIndex);

        /**
         * Creates a flattened array of values by running each element in `collection`
         * thru `iteratee` and flattening the mapped results. The iteratee is invoked
         * with three arguments: (value, index|key, collection).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * function duplicate(n) {
         *   return [n, n];
         * }
         *
         * _.flatMap([1, 2], duplicate);
         * // => [1, 1, 2, 2]
         */
        function flatMap(collection, iteratee) {
          return baseFlatten(map(collection, iteratee), 1);
        }

        /**
         * This method is like `_.flatMap` except that it recursively flattens the
         * mapped results.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * function duplicate(n) {
         *   return [[[n, n]]];
         * }
         *
         * _.flatMapDeep([1, 2], duplicate);
         * // => [1, 1, 2, 2]
         */
        function flatMapDeep(collection, iteratee) {
          return baseFlatten(map(collection, iteratee), INFINITY);
        }

        /**
         * This method is like `_.flatMap` except that it recursively flattens the
         * mapped results up to `depth` times.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {number} [depth=1] The maximum recursion depth.
         * @returns {Array} Returns the new flattened array.
         * @example
         *
         * function duplicate(n) {
         *   return [[[n, n]]];
         * }
         *
         * _.flatMapDepth([1, 2], duplicate, 2);
         * // => [[1, 1], [2, 2]]
         */
        function flatMapDepth(collection, iteratee, depth) {
          depth = depth === undefined$1 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee), depth);
        }

        /**
         * Iterates over elements of `collection` and invokes `iteratee` for each element.
         * The iteratee is invoked with three arguments: (value, index|key, collection).
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * **Note:** As with other "Collections" methods, objects with a "length"
         * property are iterated like arrays. To avoid this behavior use `_.forIn`
         * or `_.forOwn` for object iteration.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @alias each
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         * @see _.forEachRight
         * @example
         *
         * _.forEach([1, 2], function(value) {
         *   console.log(value);
         * });
         * // => Logs `1` then `2`.
         *
         * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a' then 'b' (iteration order is not guaranteed).
         */
        function forEach(collection, iteratee) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee, 3));
        }

        /**
         * This method is like `_.forEach` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @alias eachRight
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array|Object} Returns `collection`.
         * @see _.forEach
         * @example
         *
         * _.forEachRight([1, 2], function(value) {
         *   console.log(value);
         * });
         * // => Logs `2` then `1`.
         */
        function forEachRight(collection, iteratee) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee, 3));
        }

        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` thru `iteratee`. The order of grouped values
         * is determined by the order they occur in `collection`. The corresponding
         * value of each key is an array of elements responsible for generating the
         * key. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * _.groupBy([6.1, 4.2, 6.3], Math.floor);
         * // => { '4': [4.2], '6': [6.1, 6.3] }
         *
         * // The `_.property` iteratee shorthand.
         * _.groupBy(['one', 'two', 'three'], 'length');
         * // => { '3': ['one', 'two'], '5': ['three'] }
         */
        var groupBy = createAggregator(function(result, value, key) {
          if (hasOwnProperty.call(result, key)) {
            result[key].push(value);
          } else {
            baseAssignValue(result, key, [value]);
          }
        });

        /**
         * Checks if `value` is in `collection`. If `collection` is a string, it's
         * checked for a substring of `value`, otherwise
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * is used for equality comparisons. If `fromIndex` is negative, it's used as
         * the offset from the end of `collection`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object|string} collection The collection to inspect.
         * @param {*} value The value to search for.
         * @param {number} [fromIndex=0] The index to search from.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
         * @returns {boolean} Returns `true` if `value` is found, else `false`.
         * @example
         *
         * _.includes([1, 2, 3], 1);
         * // => true
         *
         * _.includes([1, 2, 3], 1, 2);
         * // => false
         *
         * _.includes({ 'a': 1, 'b': 2 }, 1);
         * // => true
         *
         * _.includes('abcd', 'bc');
         * // => true
         */
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection)
            ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
            : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
        }

        /**
         * Invokes the method at `path` of each element in `collection`, returning
         * an array of the results of each invoked method. Any additional arguments
         * are provided to each invoked method. If `path` is a function, it's invoked
         * for, and `this` bound to, each element in `collection`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Array|Function|string} path The path of the method to invoke or
         *  the function invoked per iteration.
         * @param {...*} [args] The arguments to invoke each method with.
         * @returns {Array} Returns the array of results.
         * @example
         *
         * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
         * // => [[1, 5, 7], [1, 2, 3]]
         *
         * _.invokeMap([123, 456], String.prototype.split, '');
         * // => [['1', '2', '3'], ['4', '5', '6']]
         */
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1,
              isFunc = typeof path == 'function',
              result = isArrayLike(collection) ? Array(collection.length) : [];

          baseEach(collection, function(value) {
            result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result;
        });

        /**
         * Creates an object composed of keys generated from the results of running
         * each element of `collection` thru `iteratee`. The corresponding value of
         * each key is the last element responsible for generating the key. The
         * iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
         * @returns {Object} Returns the composed aggregate object.
         * @example
         *
         * var array = [
         *   { 'dir': 'left', 'code': 97 },
         *   { 'dir': 'right', 'code': 100 }
         * ];
         *
         * _.keyBy(array, function(o) {
         *   return String.fromCharCode(o.code);
         * });
         * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
         *
         * _.keyBy(array, 'dir');
         * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
         */
        var keyBy = createAggregator(function(result, value, key) {
          baseAssignValue(result, key, value);
        });

        /**
         * Creates an array of values by running each element in `collection` thru
         * `iteratee`. The iteratee is invoked with three arguments:
         * (value, index|key, collection).
         *
         * Many lodash methods are guarded to work as iteratees for methods like
         * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
         *
         * The guarded methods are:
         * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
         * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
         * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
         * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * _.map([4, 8], square);
         * // => [16, 64]
         *
         * _.map({ 'a': 4, 'b': 8 }, square);
         * // => [16, 64] (iteration order is not guaranteed)
         *
         * var users = [
         *   { 'user': 'barney' },
         *   { 'user': 'fred' }
         * ];
         *
         * // The `_.property` iteratee shorthand.
         * _.map(users, 'user');
         * // => ['barney', 'fred']
         */
        function map(collection, iteratee) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee, 3));
        }

        /**
         * This method is like `_.sortBy` except that it allows specifying the sort
         * orders of the iteratees to sort by. If `orders` is unspecified, all values
         * are sorted in ascending order. Otherwise, specify an order of "desc" for
         * descending or "asc" for ascending sort order of corresponding values.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
         *  The iteratees to sort by.
         * @param {string[]} [orders] The sort orders of `iteratees`.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
         * @returns {Array} Returns the new sorted array.
         * @example
         *
         * var users = [
         *   { 'user': 'fred',   'age': 48 },
         *   { 'user': 'barney', 'age': 34 },
         *   { 'user': 'fred',   'age': 40 },
         *   { 'user': 'barney', 'age': 36 }
         * ];
         *
         * // Sort by `user` in ascending order and by `age` in descending order.
         * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
         */
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined$1 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }

        /**
         * Creates an array of elements split into two groups, the first of which
         * contains elements `predicate` returns truthy for, the second of which
         * contains elements `predicate` returns falsey for. The predicate is
         * invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the array of grouped elements.
         * @example
         *
         * var users = [
         *   { 'user': 'barney',  'age': 36, 'active': false },
         *   { 'user': 'fred',    'age': 40, 'active': true },
         *   { 'user': 'pebbles', 'age': 1,  'active': false }
         * ];
         *
         * _.partition(users, function(o) { return o.active; });
         * // => objects for [['fred'], ['barney', 'pebbles']]
         *
         * // The `_.matches` iteratee shorthand.
         * _.partition(users, { 'age': 1, 'active': false });
         * // => objects for [['pebbles'], ['barney', 'fred']]
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.partition(users, ['active', false]);
         * // => objects for [['barney', 'pebbles'], ['fred']]
         *
         * // The `_.property` iteratee shorthand.
         * _.partition(users, 'active');
         * // => objects for [['fred'], ['barney', 'pebbles']]
         */
        var partition = createAggregator(function(result, value, key) {
          result[key ? 0 : 1].push(value);
        }, function() { return [[], []]; });

        /**
         * Reduces `collection` to a value which is the accumulated result of running
         * each element in `collection` thru `iteratee`, where each successive
         * invocation is supplied the return value of the previous. If `accumulator`
         * is not given, the first element of `collection` is used as the initial
         * value. The iteratee is invoked with four arguments:
         * (accumulator, value, index|key, collection).
         *
         * Many lodash methods are guarded to work as iteratees for methods like
         * `_.reduce`, `_.reduceRight`, and `_.transform`.
         *
         * The guarded methods are:
         * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
         * and `sortBy`
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @returns {*} Returns the accumulated value.
         * @see _.reduceRight
         * @example
         *
         * _.reduce([1, 2], function(sum, n) {
         *   return sum + n;
         * }, 0);
         * // => 3
         *
         * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
         *   (result[value] || (result[value] = [])).push(key);
         *   return result;
         * }, {});
         * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
         */
        function reduce(collection, iteratee, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce,
              initAccum = arguments.length < 3;

          return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
        }

        /**
         * This method is like `_.reduce` except that it iterates over elements of
         * `collection` from right to left.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @returns {*} Returns the accumulated value.
         * @see _.reduce
         * @example
         *
         * var array = [[0, 1], [2, 3], [4, 5]];
         *
         * _.reduceRight(array, function(flattened, other) {
         *   return flattened.concat(other);
         * }, []);
         * // => [4, 5, 2, 3, 0, 1]
         */
        function reduceRight(collection, iteratee, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce,
              initAccum = arguments.length < 3;

          return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
        }

        /**
         * The opposite of `_.filter`; this method returns the elements of `collection`
         * that `predicate` does **not** return truthy for.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         * @see _.filter
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': false },
         *   { 'user': 'fred',   'age': 40, 'active': true }
         * ];
         *
         * _.reject(users, function(o) { return !o.active; });
         * // => objects for ['fred']
         *
         * // The `_.matches` iteratee shorthand.
         * _.reject(users, { 'age': 40, 'active': true });
         * // => objects for ['barney']
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.reject(users, ['active', false]);
         * // => objects for ['fred']
         *
         * // The `_.property` iteratee shorthand.
         * _.reject(users, 'active');
         * // => objects for ['barney']
         */
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }

        /**
         * Gets a random element from `collection`.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to sample.
         * @returns {*} Returns the random element.
         * @example
         *
         * _.sample([1, 2, 3, 4]);
         * // => 2
         */
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }

        /**
         * Gets `n` random elements at unique keys from `collection` up to the
         * size of `collection`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Collection
         * @param {Array|Object} collection The collection to sample.
         * @param {number} [n=1] The number of elements to sample.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the random elements.
         * @example
         *
         * _.sampleSize([1, 2, 3], 2);
         * // => [3, 1]
         *
         * _.sampleSize([1, 2, 3], 4);
         * // => [2, 3, 1]
         */
        function sampleSize(collection, n, guard) {
          if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }

        /**
         * Creates an array of shuffled values, using a version of the
         * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to shuffle.
         * @returns {Array} Returns the new shuffled array.
         * @example
         *
         * _.shuffle([1, 2, 3, 4]);
         * // => [4, 1, 3, 2]
         */
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }

        /**
         * Gets the size of `collection` by returning its length for array-like
         * values or the number of own enumerable string keyed properties for objects.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object|string} collection The collection to inspect.
         * @returns {number} Returns the collection size.
         * @example
         *
         * _.size([1, 2, 3]);
         * // => 3
         *
         * _.size({ 'a': 1, 'b': 2 });
         * // => 2
         *
         * _.size('pebbles');
         * // => 7
         */
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }

        /**
         * Checks if `predicate` returns truthy for **any** element of `collection`.
         * Iteration is stopped once `predicate` returns truthy. The predicate is
         * invoked with three arguments: (value, index|key, collection).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         * @example
         *
         * _.some([null, 0, 'yes', false], Boolean);
         * // => true
         *
         * var users = [
         *   { 'user': 'barney', 'active': true },
         *   { 'user': 'fred',   'active': false }
         * ];
         *
         * // The `_.matches` iteratee shorthand.
         * _.some(users, { 'user': 'barney', 'active': false });
         * // => false
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.some(users, ['active', false]);
         * // => true
         *
         * // The `_.property` iteratee shorthand.
         * _.some(users, 'active');
         * // => true
         */
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined$1;
          }
          return func(collection, getIteratee(predicate, 3));
        }

        /**
         * Creates an array of elements, sorted in ascending order by the results of
         * running each element in a collection thru each iteratee. This method
         * performs a stable sort, that is, it preserves the original sort order of
         * equal elements. The iteratees are invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Collection
         * @param {Array|Object} collection The collection to iterate over.
         * @param {...(Function|Function[])} [iteratees=[_.identity]]
         *  The iteratees to sort by.
         * @returns {Array} Returns the new sorted array.
         * @example
         *
         * var users = [
         *   { 'user': 'fred',   'age': 48 },
         *   { 'user': 'barney', 'age': 36 },
         *   { 'user': 'fred',   'age': 30 },
         *   { 'user': 'barney', 'age': 34 }
         * ];
         *
         * _.sortBy(users, [function(o) { return o.user; }]);
         * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
         *
         * _.sortBy(users, ['user', 'age']);
         * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
         */
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });

        /*------------------------------------------------------------------------*/

        /**
         * Gets the timestamp of the number of milliseconds that have elapsed since
         * the Unix epoch (1 January 1970 00:00:00 UTC).
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Date
         * @returns {number} Returns the timestamp.
         * @example
         *
         * _.defer(function(stamp) {
         *   console.log(_.now() - stamp);
         * }, _.now());
         * // => Logs the number of milliseconds it took for the deferred invocation.
         */
        var now = ctxNow || function() {
          return root.Date.now();
        };

        /*------------------------------------------------------------------------*/

        /**
         * The opposite of `_.before`; this method creates a function that invokes
         * `func` once it's called `n` or more times.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {number} n The number of calls before `func` is invoked.
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * var saves = ['profile', 'settings'];
         *
         * var done = _.after(saves.length, function() {
         *   console.log('done saving!');
         * });
         *
         * _.forEach(saves, function(type) {
         *   asyncSave({ 'type': type, 'complete': done });
         * });
         * // => Logs 'done saving!' after the two async saves have completed.
         */
        function after(n, func) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }

        /**
         * Creates a function that invokes `func`, with up to `n` arguments,
         * ignoring any additional arguments.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} func The function to cap arguments for.
         * @param {number} [n=func.length] The arity cap.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the new capped function.
         * @example
         *
         * _.map(['6', '8', '10'], _.ary(parseInt, 1));
         * // => [6, 8, 10]
         */
        function ary(func, n, guard) {
          n = guard ? undefined$1 : n;
          n = (func && n == null) ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
        }

        /**
         * Creates a function that invokes `func`, with the `this` binding and arguments
         * of the created function, while it's called less than `n` times. Subsequent
         * calls to the created function return the result of the last `func` invocation.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {number} n The number of calls at which `func` is no longer invoked.
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * jQuery(element).on('click', _.before(5, addContactToList));
         * // => Allows adding up to 4 contacts to the list.
         */
        function before(n, func) {
          var result;
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined$1;
            }
            return result;
          };
        }

        /**
         * Creates a function that invokes `func` with the `this` binding of `thisArg`
         * and `partials` prepended to the arguments it receives.
         *
         * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
         * may be used as a placeholder for partially applied arguments.
         *
         * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
         * property of bound functions.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to bind.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new bound function.
         * @example
         *
         * function greet(greeting, punctuation) {
         *   return greeting + ' ' + this.user + punctuation;
         * }
         *
         * var object = { 'user': 'fred' };
         *
         * var bound = _.bind(greet, object, 'hi');
         * bound('!');
         * // => 'hi fred!'
         *
         * // Bound with placeholders.
         * var bound = _.bind(greet, object, _, '!');
         * bound('hi');
         * // => 'hi fred!'
         */
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });

        /**
         * Creates a function that invokes the method at `object[key]` with `partials`
         * prepended to the arguments it receives.
         *
         * This method differs from `_.bind` by allowing bound functions to reference
         * methods that may be redefined or don't yet exist. See
         * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
         * for more details.
         *
         * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * @static
         * @memberOf _
         * @since 0.10.0
         * @category Function
         * @param {Object} object The object to invoke the method on.
         * @param {string} key The key of the method.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new bound function.
         * @example
         *
         * var object = {
         *   'user': 'fred',
         *   'greet': function(greeting, punctuation) {
         *     return greeting + ' ' + this.user + punctuation;
         *   }
         * };
         *
         * var bound = _.bindKey(object, 'greet', 'hi');
         * bound('!');
         * // => 'hi fred!'
         *
         * object.greet = function(greeting, punctuation) {
         *   return greeting + 'ya ' + this.user + punctuation;
         * };
         *
         * bound('!');
         * // => 'hiya fred!'
         *
         * // Bound with placeholders.
         * var bound = _.bindKey(object, 'greet', _, '!');
         * bound('hi');
         * // => 'hiya fred!'
         */
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });

        /**
         * Creates a function that accepts arguments of `func` and either invokes
         * `func` returning its result, if at least `arity` number of arguments have
         * been provided, or returns a function that accepts the remaining `func`
         * arguments, and so on. The arity of `func` may be specified if `func.length`
         * is not sufficient.
         *
         * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
         * may be used as a placeholder for provided arguments.
         *
         * **Note:** This method doesn't set the "length" property of curried functions.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Function
         * @param {Function} func The function to curry.
         * @param {number} [arity=func.length] The arity of `func`.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the new curried function.
         * @example
         *
         * var abc = function(a, b, c) {
         *   return [a, b, c];
         * };
         *
         * var curried = _.curry(abc);
         *
         * curried(1)(2)(3);
         * // => [1, 2, 3]
         *
         * curried(1, 2)(3);
         * // => [1, 2, 3]
         *
         * curried(1, 2, 3);
         * // => [1, 2, 3]
         *
         * // Curried with placeholders.
         * curried(1)(_, 3)(2);
         * // => [1, 2, 3]
         */
        function curry(func, arity, guard) {
          arity = guard ? undefined$1 : arity;
          var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
          result.placeholder = curry.placeholder;
          return result;
        }

        /**
         * This method is like `_.curry` except that arguments are applied to `func`
         * in the manner of `_.partialRight` instead of `_.partial`.
         *
         * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for provided arguments.
         *
         * **Note:** This method doesn't set the "length" property of curried functions.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} func The function to curry.
         * @param {number} [arity=func.length] The arity of `func`.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the new curried function.
         * @example
         *
         * var abc = function(a, b, c) {
         *   return [a, b, c];
         * };
         *
         * var curried = _.curryRight(abc);
         *
         * curried(3)(2)(1);
         * // => [1, 2, 3]
         *
         * curried(2, 3)(1);
         * // => [1, 2, 3]
         *
         * curried(1, 2, 3);
         * // => [1, 2, 3]
         *
         * // Curried with placeholders.
         * curried(3)(1, _)(2);
         * // => [1, 2, 3]
         */
        function curryRight(func, arity, guard) {
          arity = guard ? undefined$1 : arity;
          var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
          result.placeholder = curryRight.placeholder;
          return result;
        }

        /**
         * Creates a debounced function that delays invoking `func` until after `wait`
         * milliseconds have elapsed since the last time the debounced function was
         * invoked. The debounced function comes with a `cancel` method to cancel
         * delayed `func` invocations and a `flush` method to immediately invoke them.
         * Provide `options` to indicate whether `func` should be invoked on the
         * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
         * with the last arguments provided to the debounced function. Subsequent
         * calls to the debounced function return the result of the last `func`
         * invocation.
         *
         * **Note:** If `leading` and `trailing` options are `true`, `func` is
         * invoked on the trailing edge of the timeout only if the debounced function
         * is invoked more than once during the `wait` timeout.
         *
         * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
         * until to the next tick, similar to `setTimeout` with a timeout of `0`.
         *
         * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
         * for details over the differences between `_.debounce` and `_.throttle`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to debounce.
         * @param {number} [wait=0] The number of milliseconds to delay.
         * @param {Object} [options={}] The options object.
         * @param {boolean} [options.leading=false]
         *  Specify invoking on the leading edge of the timeout.
         * @param {number} [options.maxWait]
         *  The maximum time `func` is allowed to be delayed before it's invoked.
         * @param {boolean} [options.trailing=true]
         *  Specify invoking on the trailing edge of the timeout.
         * @returns {Function} Returns the new debounced function.
         * @example
         *
         * // Avoid costly calculations while the window size is in flux.
         * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
         *
         * // Invoke `sendMail` when clicked, debouncing subsequent calls.
         * jQuery(element).on('click', _.debounce(sendMail, 300, {
         *   'leading': true,
         *   'trailing': false
         * }));
         *
         * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
         * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
         * var source = new EventSource('/stream');
         * jQuery(source).on('message', debounced);
         *
         * // Cancel the trailing debounced invocation.
         * jQuery(window).on('popstate', debounced.cancel);
         */
        function debounce(func, wait, options) {
          var lastArgs,
              lastThis,
              maxWait,
              result,
              timerId,
              lastCallTime,
              lastInvokeTime = 0,
              leading = false,
              maxing = false,
              trailing = true;

          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = 'maxWait' in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }

          function invokeFunc(time) {
            var args = lastArgs,
                thisArg = lastThis;

            lastArgs = lastThis = undefined$1;
            lastInvokeTime = time;
            result = func.apply(thisArg, args);
            return result;
          }

          function leadingEdge(time) {
            // Reset any `maxWait` timer.
            lastInvokeTime = time;
            // Start the timer for the trailing edge.
            timerId = setTimeout(timerExpired, wait);
            // Invoke the leading edge.
            return leading ? invokeFunc(time) : result;
          }

          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime,
                timeWaiting = wait - timeSinceLastCall;

            return maxing
              ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
              : timeWaiting;
          }

          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime;

            // Either this is the first call, activity has stopped and we're at the
            // trailing edge, the system time has gone backwards and we're treating
            // it as the trailing edge, or we've hit the `maxWait` limit.
            return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
              (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
          }

          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            // Restart the timer.
            timerId = setTimeout(timerExpired, remainingWait(time));
          }

          function trailingEdge(time) {
            timerId = undefined$1;

            // Only invoke if we have `lastArgs` which means `func` has been
            // debounced at least once.
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined$1;
            return result;
          }

          function cancel() {
            if (timerId !== undefined$1) {
              clearTimeout(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined$1;
          }

          function flush() {
            return timerId === undefined$1 ? result : trailingEdge(now());
          }

          function debounced() {
            var time = now(),
                isInvoking = shouldInvoke(time);

            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;

            if (isInvoking) {
              if (timerId === undefined$1) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                // Handle invocations in a tight loop.
                clearTimeout(timerId);
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined$1) {
              timerId = setTimeout(timerExpired, wait);
            }
            return result;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }

        /**
         * Defers invoking the `func` until the current call stack has cleared. Any
         * additional arguments are provided to `func` when it's invoked.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to defer.
         * @param {...*} [args] The arguments to invoke `func` with.
         * @returns {number} Returns the timer id.
         * @example
         *
         * _.defer(function(text) {
         *   console.log(text);
         * }, 'deferred');
         * // => Logs 'deferred' after one millisecond.
         */
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });

        /**
         * Invokes `func` after `wait` milliseconds. Any additional arguments are
         * provided to `func` when it's invoked.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to delay.
         * @param {number} wait The number of milliseconds to delay invocation.
         * @param {...*} [args] The arguments to invoke `func` with.
         * @returns {number} Returns the timer id.
         * @example
         *
         * _.delay(function(text) {
         *   console.log(text);
         * }, 1000, 'later');
         * // => Logs 'later' after one second.
         */
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });

        /**
         * Creates a function that invokes `func` with arguments reversed.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Function
         * @param {Function} func The function to flip arguments for.
         * @returns {Function} Returns the new flipped function.
         * @example
         *
         * var flipped = _.flip(function() {
         *   return _.toArray(arguments);
         * });
         *
         * flipped('a', 'b', 'c', 'd');
         * // => ['d', 'c', 'b', 'a']
         */
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }

        /**
         * Creates a function that memoizes the result of `func`. If `resolver` is
         * provided, it determines the cache key for storing the result based on the
         * arguments provided to the memoized function. By default, the first argument
         * provided to the memoized function is used as the map cache key. The `func`
         * is invoked with the `this` binding of the memoized function.
         *
         * **Note:** The cache is exposed as the `cache` property on the memoized
         * function. Its creation may be customized by replacing the `_.memoize.Cache`
         * constructor with one whose instances implement the
         * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
         * method interface of `clear`, `delete`, `get`, `has`, and `set`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to have its output memoized.
         * @param {Function} [resolver] The function to resolve the cache key.
         * @returns {Function} Returns the new memoized function.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         * var other = { 'c': 3, 'd': 4 };
         *
         * var values = _.memoize(_.values);
         * values(object);
         * // => [1, 2]
         *
         * values(other);
         * // => [3, 4]
         *
         * object.a = 2;
         * values(object);
         * // => [1, 2]
         *
         * // Modify the result cache.
         * values.cache.set(object, ['a', 'b']);
         * values(object);
         * // => ['a', 'b']
         *
         * // Replace `_.memoize.Cache`.
         * _.memoize.Cache = WeakMap;
         */
        function memoize(func, resolver) {
          if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments,
                key = resolver ? resolver.apply(this, args) : args[0],
                cache = memoized.cache;

            if (cache.has(key)) {
              return cache.get(key);
            }
            var result = func.apply(this, args);
            memoized.cache = cache.set(key, result) || cache;
            return result;
          };
          memoized.cache = new (memoize.Cache || MapCache);
          return memoized;
        }

        // Expose `MapCache`.
        memoize.Cache = MapCache;

        /**
         * Creates a function that negates the result of the predicate `func`. The
         * `func` predicate is invoked with the `this` binding and arguments of the
         * created function.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} predicate The predicate to negate.
         * @returns {Function} Returns the new negated function.
         * @example
         *
         * function isEven(n) {
         *   return n % 2 == 0;
         * }
         *
         * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
         * // => [1, 3, 5]
         */
        function negate(predicate) {
          if (typeof predicate != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0: return !predicate.call(this);
              case 1: return !predicate.call(this, args[0]);
              case 2: return !predicate.call(this, args[0], args[1]);
              case 3: return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }

        /**
         * Creates a function that is restricted to invoking `func` once. Repeat calls
         * to the function return the value of the first invocation. The `func` is
         * invoked with the `this` binding and arguments of the created function.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to restrict.
         * @returns {Function} Returns the new restricted function.
         * @example
         *
         * var initialize = _.once(createApplication);
         * initialize();
         * initialize();
         * // => `createApplication` is invoked once
         */
        function once(func) {
          return before(2, func);
        }

        /**
         * Creates a function that invokes `func` with its arguments transformed.
         *
         * @static
         * @since 4.0.0
         * @memberOf _
         * @category Function
         * @param {Function} func The function to wrap.
         * @param {...(Function|Function[])} [transforms=[_.identity]]
         *  The argument transforms.
         * @returns {Function} Returns the new function.
         * @example
         *
         * function doubled(n) {
         *   return n * 2;
         * }
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var func = _.overArgs(function(x, y) {
         *   return [x, y];
         * }, [square, doubled]);
         *
         * func(9, 3);
         * // => [81, 6]
         *
         * func(10, 5);
         * // => [100, 10]
         */
        var overArgs = castRest(function(func, transforms) {
          transforms = (transforms.length == 1 && isArray(transforms[0]))
            ? arrayMap(transforms[0], baseUnary(getIteratee()))
            : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1,
                length = nativeMin(args.length, funcsLength);

            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });

        /**
         * Creates a function that invokes `func` with `partials` prepended to the
         * arguments it receives. This method is like `_.bind` except it does **not**
         * alter the `this` binding.
         *
         * The `_.partial.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * **Note:** This method doesn't set the "length" property of partially
         * applied functions.
         *
         * @static
         * @memberOf _
         * @since 0.2.0
         * @category Function
         * @param {Function} func The function to partially apply arguments to.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new partially applied function.
         * @example
         *
         * function greet(greeting, name) {
         *   return greeting + ' ' + name;
         * }
         *
         * var sayHelloTo = _.partial(greet, 'hello');
         * sayHelloTo('fred');
         * // => 'hello fred'
         *
         * // Partially applied with placeholders.
         * var greetFred = _.partial(greet, _, 'fred');
         * greetFred('hi');
         * // => 'hi fred'
         */
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
        });

        /**
         * This method is like `_.partial` except that partially applied arguments
         * are appended to the arguments it receives.
         *
         * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
         * builds, may be used as a placeholder for partially applied arguments.
         *
         * **Note:** This method doesn't set the "length" property of partially
         * applied functions.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Function
         * @param {Function} func The function to partially apply arguments to.
         * @param {...*} [partials] The arguments to be partially applied.
         * @returns {Function} Returns the new partially applied function.
         * @example
         *
         * function greet(greeting, name) {
         *   return greeting + ' ' + name;
         * }
         *
         * var greetFred = _.partialRight(greet, 'fred');
         * greetFred('hi');
         * // => 'hi fred'
         *
         * // Partially applied with placeholders.
         * var sayHelloTo = _.partialRight(greet, 'hello', _);
         * sayHelloTo('fred');
         * // => 'hello fred'
         */
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
        });

        /**
         * Creates a function that invokes `func` with arguments arranged according
         * to the specified `indexes` where the argument value at the first index is
         * provided as the first argument, the argument value at the second index is
         * provided as the second argument, and so on.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Function
         * @param {Function} func The function to rearrange arguments for.
         * @param {...(number|number[])} indexes The arranged argument indexes.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var rearged = _.rearg(function(a, b, c) {
         *   return [a, b, c];
         * }, [2, 0, 1]);
         *
         * rearged('b', 'c', 'a')
         * // => ['a', 'b', 'c']
         */
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
        });

        /**
         * Creates a function that invokes `func` with the `this` binding of the
         * created function and arguments from `start` and beyond provided as
         * an array.
         *
         * **Note:** This method is based on the
         * [rest parameter](https://mdn.io/rest_parameters).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Function
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var say = _.rest(function(what, names) {
         *   return what + ' ' + _.initial(names).join(', ') +
         *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
         * });
         *
         * say('hello', 'fred', 'barney', 'pebbles');
         * // => 'hello fred, barney, & pebbles'
         */
        function rest(func, start) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          start = start === undefined$1 ? start : toInteger(start);
          return baseRest(func, start);
        }

        /**
         * Creates a function that invokes `func` with the `this` binding of the
         * create function and an array of arguments much like
         * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
         *
         * **Note:** This method is based on the
         * [spread operator](https://mdn.io/spread_operator).
         *
         * @static
         * @memberOf _
         * @since 3.2.0
         * @category Function
         * @param {Function} func The function to spread arguments over.
         * @param {number} [start=0] The start position of the spread.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var say = _.spread(function(who, what) {
         *   return who + ' says ' + what;
         * });
         *
         * say(['fred', 'hello']);
         * // => 'fred says hello'
         *
         * var numbers = Promise.all([
         *   Promise.resolve(40),
         *   Promise.resolve(36)
         * ]);
         *
         * numbers.then(_.spread(function(x, y) {
         *   return x + y;
         * }));
         * // => a Promise of 76
         */
        function spread(func, start) {
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start],
                otherArgs = castSlice(args, 0, start);

            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }

        /**
         * Creates a throttled function that only invokes `func` at most once per
         * every `wait` milliseconds. The throttled function comes with a `cancel`
         * method to cancel delayed `func` invocations and a `flush` method to
         * immediately invoke them. Provide `options` to indicate whether `func`
         * should be invoked on the leading and/or trailing edge of the `wait`
         * timeout. The `func` is invoked with the last arguments provided to the
         * throttled function. Subsequent calls to the throttled function return the
         * result of the last `func` invocation.
         *
         * **Note:** If `leading` and `trailing` options are `true`, `func` is
         * invoked on the trailing edge of the timeout only if the throttled function
         * is invoked more than once during the `wait` timeout.
         *
         * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
         * until to the next tick, similar to `setTimeout` with a timeout of `0`.
         *
         * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
         * for details over the differences between `_.throttle` and `_.debounce`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {Function} func The function to throttle.
         * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
         * @param {Object} [options={}] The options object.
         * @param {boolean} [options.leading=true]
         *  Specify invoking on the leading edge of the timeout.
         * @param {boolean} [options.trailing=true]
         *  Specify invoking on the trailing edge of the timeout.
         * @returns {Function} Returns the new throttled function.
         * @example
         *
         * // Avoid excessively updating the position while scrolling.
         * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
         *
         * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
         * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
         * jQuery(element).on('click', throttled);
         *
         * // Cancel the trailing throttled invocation.
         * jQuery(window).on('popstate', throttled.cancel);
         */
        function throttle(func, wait, options) {
          var leading = true,
              trailing = true;

          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = 'leading' in options ? !!options.leading : leading;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            'leading': leading,
            'maxWait': wait,
            'trailing': trailing
          });
        }

        /**
         * Creates a function that accepts up to one argument, ignoring any
         * additional arguments.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Function
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         * @example
         *
         * _.map(['6', '8', '10'], _.unary(parseInt));
         * // => [6, 8, 10]
         */
        function unary(func) {
          return ary(func, 1);
        }

        /**
         * Creates a function that provides `value` to `wrapper` as its first
         * argument. Any additional arguments provided to the function are appended
         * to those provided to the `wrapper`. The wrapper is invoked with the `this`
         * binding of the created function.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Function
         * @param {*} value The value to wrap.
         * @param {Function} [wrapper=identity] The wrapper function.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var p = _.wrap(_.escape, function(func, text) {
         *   return '<p>' + func(text) + '</p>';
         * });
         *
         * p('fred, barney, & pebbles');
         * // => '<p>fred, barney, &amp; pebbles</p>'
         */
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }

        /*------------------------------------------------------------------------*/

        /**
         * Casts `value` as an array if it's not one.
         *
         * @static
         * @memberOf _
         * @since 4.4.0
         * @category Lang
         * @param {*} value The value to inspect.
         * @returns {Array} Returns the cast array.
         * @example
         *
         * _.castArray(1);
         * // => [1]
         *
         * _.castArray({ 'a': 1 });
         * // => [{ 'a': 1 }]
         *
         * _.castArray('abc');
         * // => ['abc']
         *
         * _.castArray(null);
         * // => [null]
         *
         * _.castArray(undefined);
         * // => [undefined]
         *
         * _.castArray();
         * // => []
         *
         * var array = [1, 2, 3];
         * console.log(_.castArray(array) === array);
         * // => true
         */
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }

        /**
         * Creates a shallow clone of `value`.
         *
         * **Note:** This method is loosely based on the
         * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
         * and supports cloning arrays, array buffers, booleans, date objects, maps,
         * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
         * arrays. The own enumerable properties of `arguments` objects are cloned
         * as plain objects. An empty object is returned for uncloneable values such
         * as error objects, functions, DOM nodes, and WeakMaps.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to clone.
         * @returns {*} Returns the cloned value.
         * @see _.cloneDeep
         * @example
         *
         * var objects = [{ 'a': 1 }, { 'b': 2 }];
         *
         * var shallow = _.clone(objects);
         * console.log(shallow[0] === objects[0]);
         * // => true
         */
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }

        /**
         * This method is like `_.clone` except that it accepts `customizer` which
         * is invoked to produce the cloned value. If `customizer` returns `undefined`,
         * cloning is handled by the method instead. The `customizer` is invoked with
         * up to four arguments; (value [, index|key, object, stack]).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to clone.
         * @param {Function} [customizer] The function to customize cloning.
         * @returns {*} Returns the cloned value.
         * @see _.cloneDeepWith
         * @example
         *
         * function customizer(value) {
         *   if (_.isElement(value)) {
         *     return value.cloneNode(false);
         *   }
         * }
         *
         * var el = _.cloneWith(document.body, customizer);
         *
         * console.log(el === document.body);
         * // => false
         * console.log(el.nodeName);
         * // => 'BODY'
         * console.log(el.childNodes.length);
         * // => 0
         */
        function cloneWith(value, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined$1;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }

        /**
         * This method is like `_.clone` except that it recursively clones `value`.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Lang
         * @param {*} value The value to recursively clone.
         * @returns {*} Returns the deep cloned value.
         * @see _.clone
         * @example
         *
         * var objects = [{ 'a': 1 }, { 'b': 2 }];
         *
         * var deep = _.cloneDeep(objects);
         * console.log(deep[0] === objects[0]);
         * // => false
         */
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }

        /**
         * This method is like `_.cloneWith` except that it recursively clones `value`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to recursively clone.
         * @param {Function} [customizer] The function to customize cloning.
         * @returns {*} Returns the deep cloned value.
         * @see _.cloneWith
         * @example
         *
         * function customizer(value) {
         *   if (_.isElement(value)) {
         *     return value.cloneNode(true);
         *   }
         * }
         *
         * var el = _.cloneDeepWith(document.body, customizer);
         *
         * console.log(el === document.body);
         * // => false
         * console.log(el.nodeName);
         * // => 'BODY'
         * console.log(el.childNodes.length);
         * // => 20
         */
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined$1;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }

        /**
         * Checks if `object` conforms to `source` by invoking the predicate
         * properties of `source` with the corresponding property values of `object`.
         *
         * **Note:** This method is equivalent to `_.conforms` when `source` is
         * partially applied.
         *
         * @static
         * @memberOf _
         * @since 4.14.0
         * @category Lang
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property predicates to conform to.
         * @returns {boolean} Returns `true` if `object` conforms, else `false`.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         *
         * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
         * // => true
         *
         * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
         * // => false
         */
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }

        /**
         * Performs a
         * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
         * comparison between two values to determine if they are equivalent.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.eq(object, object);
         * // => true
         *
         * _.eq(object, other);
         * // => false
         *
         * _.eq('a', 'a');
         * // => true
         *
         * _.eq('a', Object('a'));
         * // => false
         *
         * _.eq(NaN, NaN);
         * // => true
         */
        function eq(value, other) {
          return value === other || (value !== value && other !== other);
        }

        /**
         * Checks if `value` is greater than `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is greater than `other`,
         *  else `false`.
         * @see _.lt
         * @example
         *
         * _.gt(3, 1);
         * // => true
         *
         * _.gt(3, 3);
         * // => false
         *
         * _.gt(1, 3);
         * // => false
         */
        var gt = createRelationalOperation(baseGt);

        /**
         * Checks if `value` is greater than or equal to `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is greater than or equal to
         *  `other`, else `false`.
         * @see _.lte
         * @example
         *
         * _.gte(3, 1);
         * // => true
         *
         * _.gte(3, 3);
         * // => true
         *
         * _.gte(1, 3);
         * // => false
         */
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });

        /**
         * Checks if `value` is likely an `arguments` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         *  else `false`.
         * @example
         *
         * _.isArguments(function() { return arguments; }());
         * // => true
         *
         * _.isArguments([1, 2, 3]);
         * // => false
         */
        var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
            !propertyIsEnumerable.call(value, 'callee');
        };

        /**
         * Checks if `value` is classified as an `Array` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array, else `false`.
         * @example
         *
         * _.isArray([1, 2, 3]);
         * // => true
         *
         * _.isArray(document.body.children);
         * // => false
         *
         * _.isArray('abc');
         * // => false
         *
         * _.isArray(_.noop);
         * // => false
         */
        var isArray = Array.isArray;

        /**
         * Checks if `value` is classified as an `ArrayBuffer` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
         * @example
         *
         * _.isArrayBuffer(new ArrayBuffer(2));
         * // => true
         *
         * _.isArrayBuffer(new Array(2));
         * // => false
         */
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

        /**
         * Checks if `value` is array-like. A value is considered array-like if it's
         * not a function and has a `value.length` that's an integer greater than or
         * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
         * @example
         *
         * _.isArrayLike([1, 2, 3]);
         * // => true
         *
         * _.isArrayLike(document.body.children);
         * // => true
         *
         * _.isArrayLike('abc');
         * // => true
         *
         * _.isArrayLike(_.noop);
         * // => false
         */
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        }

        /**
         * This method is like `_.isArrayLike` except that it also checks if `value`
         * is an object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array-like object,
         *  else `false`.
         * @example
         *
         * _.isArrayLikeObject([1, 2, 3]);
         * // => true
         *
         * _.isArrayLikeObject(document.body.children);
         * // => true
         *
         * _.isArrayLikeObject('abc');
         * // => false
         *
         * _.isArrayLikeObject(_.noop);
         * // => false
         */
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }

        /**
         * Checks if `value` is classified as a boolean primitive or object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
         * @example
         *
         * _.isBoolean(false);
         * // => true
         *
         * _.isBoolean(null);
         * // => false
         */
        function isBoolean(value) {
          return value === true || value === false ||
            (isObjectLike(value) && baseGetTag(value) == boolTag);
        }

        /**
         * Checks if `value` is a buffer.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
         * @example
         *
         * _.isBuffer(new Buffer(2));
         * // => true
         *
         * _.isBuffer(new Uint8Array(2));
         * // => false
         */
        var isBuffer = nativeIsBuffer || stubFalse;

        /**
         * Checks if `value` is classified as a `Date` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
         * @example
         *
         * _.isDate(new Date);
         * // => true
         *
         * _.isDate('Mon April 23 2012');
         * // => false
         */
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

        /**
         * Checks if `value` is likely a DOM element.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
         * @example
         *
         * _.isElement(document.body);
         * // => true
         *
         * _.isElement('<body>');
         * // => false
         */
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }

        /**
         * Checks if `value` is an empty object, collection, map, or set.
         *
         * Objects are considered empty if they have no own enumerable string keyed
         * properties.
         *
         * Array-like values such as `arguments` objects, arrays, buffers, strings, or
         * jQuery-like collections are considered empty if they have a `length` of `0`.
         * Similarly, maps and sets are considered empty if they have a `size` of `0`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is empty, else `false`.
         * @example
         *
         * _.isEmpty(null);
         * // => true
         *
         * _.isEmpty(true);
         * // => true
         *
         * _.isEmpty(1);
         * // => true
         *
         * _.isEmpty([1, 2, 3]);
         * // => false
         *
         * _.isEmpty({ 'a': 1 });
         * // => false
         */
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) &&
              (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }

        /**
         * Performs a deep comparison between two values to determine if they are
         * equivalent.
         *
         * **Note:** This method supports comparing arrays, array buffers, booleans,
         * date objects, error objects, maps, numbers, `Object` objects, regexes,
         * sets, strings, symbols, and typed arrays. `Object` objects are compared
         * by their own, not inherited, enumerable properties. Functions and DOM
         * nodes are compared by strict equality, i.e. `===`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * var object = { 'a': 1 };
         * var other = { 'a': 1 };
         *
         * _.isEqual(object, other);
         * // => true
         *
         * object === other;
         * // => false
         */
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }

        /**
         * This method is like `_.isEqual` except that it accepts `customizer` which
         * is invoked to compare values. If `customizer` returns `undefined`, comparisons
         * are handled by the method instead. The `customizer` is invoked with up to
         * six arguments: (objValue, othValue [, index|key, object, other, stack]).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
         * @example
         *
         * function isGreeting(value) {
         *   return /^h(?:i|ello)$/.test(value);
         * }
         *
         * function customizer(objValue, othValue) {
         *   if (isGreeting(objValue) && isGreeting(othValue)) {
         *     return true;
         *   }
         * }
         *
         * var array = ['hello', 'goodbye'];
         * var other = ['hi', 'goodbye'];
         *
         * _.isEqualWith(array, other, customizer);
         * // => true
         */
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined$1;
          var result = customizer ? customizer(value, other) : undefined$1;
          return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
        }

        /**
         * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
         * `SyntaxError`, `TypeError`, or `URIError` object.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
         * @example
         *
         * _.isError(new Error);
         * // => true
         *
         * _.isError(Error);
         * // => false
         */
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag ||
            (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
        }

        /**
         * Checks if `value` is a finite primitive number.
         *
         * **Note:** This method is based on
         * [`Number.isFinite`](https://mdn.io/Number/isFinite).
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
         * @example
         *
         * _.isFinite(3);
         * // => true
         *
         * _.isFinite(Number.MIN_VALUE);
         * // => true
         *
         * _.isFinite(Infinity);
         * // => false
         *
         * _.isFinite('3');
         * // => false
         */
        function isFinite(value) {
          return typeof value == 'number' && nativeIsFinite(value);
        }

        /**
         * Checks if `value` is classified as a `Function` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a function, else `false`.
         * @example
         *
         * _.isFunction(_);
         * // => true
         *
         * _.isFunction(/abc/);
         * // => false
         */
        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          }
          // The use of `Object#toString` avoids issues with the `typeof` operator
          // in Safari 9 which returns 'object' for typed arrays and other constructors.
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }

        /**
         * Checks if `value` is an integer.
         *
         * **Note:** This method is based on
         * [`Number.isInteger`](https://mdn.io/Number/isInteger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
         * @example
         *
         * _.isInteger(3);
         * // => true
         *
         * _.isInteger(Number.MIN_VALUE);
         * // => false
         *
         * _.isInteger(Infinity);
         * // => false
         *
         * _.isInteger('3');
         * // => false
         */
        function isInteger(value) {
          return typeof value == 'number' && value == toInteger(value);
        }

        /**
         * Checks if `value` is a valid array-like length.
         *
         * **Note:** This method is loosely based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
         * @example
         *
         * _.isLength(3);
         * // => true
         *
         * _.isLength(Number.MIN_VALUE);
         * // => false
         *
         * _.isLength(Infinity);
         * // => false
         *
         * _.isLength('3');
         * // => false
         */
        function isLength(value) {
          return typeof value == 'number' &&
            value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }

        /**
         * Checks if `value` is the
         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(_.noop);
         * // => true
         *
         * _.isObject(null);
         * // => false
         */
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == 'object' || type == 'function');
        }

        /**
         * Checks if `value` is object-like. A value is object-like if it's not `null`
         * and has a `typeof` result of "object".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
         * @example
         *
         * _.isObjectLike({});
         * // => true
         *
         * _.isObjectLike([1, 2, 3]);
         * // => true
         *
         * _.isObjectLike(_.noop);
         * // => false
         *
         * _.isObjectLike(null);
         * // => false
         */
        function isObjectLike(value) {
          return value != null && typeof value == 'object';
        }

        /**
         * Checks if `value` is classified as a `Map` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a map, else `false`.
         * @example
         *
         * _.isMap(new Map);
         * // => true
         *
         * _.isMap(new WeakMap);
         * // => false
         */
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

        /**
         * Performs a partial deep comparison between `object` and `source` to
         * determine if `object` contains equivalent property values.
         *
         * **Note:** This method is equivalent to `_.matches` when `source` is
         * partially applied.
         *
         * Partial comparisons will match empty array and empty object `source`
         * values against any array or object value, respectively. See `_.isEqual`
         * for a list of supported value comparisons.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         * @example
         *
         * var object = { 'a': 1, 'b': 2 };
         *
         * _.isMatch(object, { 'b': 2 });
         * // => true
         *
         * _.isMatch(object, { 'b': 1 });
         * // => false
         */
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }

        /**
         * This method is like `_.isMatch` except that it accepts `customizer` which
         * is invoked to compare values. If `customizer` returns `undefined`, comparisons
         * are handled by the method instead. The `customizer` is invoked with five
         * arguments: (objValue, srcValue, index|key, object, source).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {Object} object The object to inspect.
         * @param {Object} source The object of property values to match.
         * @param {Function} [customizer] The function to customize comparisons.
         * @returns {boolean} Returns `true` if `object` is a match, else `false`.
         * @example
         *
         * function isGreeting(value) {
         *   return /^h(?:i|ello)$/.test(value);
         * }
         *
         * function customizer(objValue, srcValue) {
         *   if (isGreeting(objValue) && isGreeting(srcValue)) {
         *     return true;
         *   }
         * }
         *
         * var object = { 'greeting': 'hello' };
         * var source = { 'greeting': 'hi' };
         *
         * _.isMatchWith(object, source, customizer);
         * // => true
         */
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined$1;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }

        /**
         * Checks if `value` is `NaN`.
         *
         * **Note:** This method is based on
         * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
         * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
         * `undefined` and other non-number values.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
         * @example
         *
         * _.isNaN(NaN);
         * // => true
         *
         * _.isNaN(new Number(NaN));
         * // => true
         *
         * isNaN(undefined);
         * // => true
         *
         * _.isNaN(undefined);
         * // => false
         */
        function isNaN(value) {
          // An `NaN` primitive is the only value that is not equal to itself.
          // Perform the `toStringTag` check first to avoid errors with some
          // ActiveX objects in IE.
          return isNumber(value) && value != +value;
        }

        /**
         * Checks if `value` is a pristine native function.
         *
         * **Note:** This method can't reliably detect native functions in the presence
         * of the core-js package because core-js circumvents this kind of detection.
         * Despite multiple requests, the core-js maintainer has made it clear: any
         * attempt to fix the detection will be obstructed. As a result, we're left
         * with little choice but to throw an error. Unfortunately, this also affects
         * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
         * which rely on core-js.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a native function,
         *  else `false`.
         * @example
         *
         * _.isNative(Array.prototype.push);
         * // => true
         *
         * _.isNative(_);
         * // => false
         */
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }

        /**
         * Checks if `value` is `null`.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
         * @example
         *
         * _.isNull(null);
         * // => true
         *
         * _.isNull(void 0);
         * // => false
         */
        function isNull(value) {
          return value === null;
        }

        /**
         * Checks if `value` is `null` or `undefined`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
         * @example
         *
         * _.isNil(null);
         * // => true
         *
         * _.isNil(void 0);
         * // => true
         *
         * _.isNil(NaN);
         * // => false
         */
        function isNil(value) {
          return value == null;
        }

        /**
         * Checks if `value` is classified as a `Number` primitive or object.
         *
         * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
         * classified as numbers, use the `_.isFinite` method.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a number, else `false`.
         * @example
         *
         * _.isNumber(3);
         * // => true
         *
         * _.isNumber(Number.MIN_VALUE);
         * // => true
         *
         * _.isNumber(Infinity);
         * // => true
         *
         * _.isNumber('3');
         * // => false
         */
        function isNumber(value) {
          return typeof value == 'number' ||
            (isObjectLike(value) && baseGetTag(value) == numberTag);
        }

        /**
         * Checks if `value` is a plain object, that is, an object created by the
         * `Object` constructor or one with a `[[Prototype]]` of `null`.
         *
         * @static
         * @memberOf _
         * @since 0.8.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * _.isPlainObject(new Foo);
         * // => false
         *
         * _.isPlainObject([1, 2, 3]);
         * // => false
         *
         * _.isPlainObject({ 'x': 0, 'y': 0 });
         * // => true
         *
         * _.isPlainObject(Object.create(null));
         * // => true
         */
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
          return typeof Ctor == 'function' && Ctor instanceof Ctor &&
            funcToString.call(Ctor) == objectCtorString;
        }

        /**
         * Checks if `value` is classified as a `RegExp` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
         * @example
         *
         * _.isRegExp(/abc/);
         * // => true
         *
         * _.isRegExp('/abc/');
         * // => false
         */
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

        /**
         * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
         * double precision number which isn't the result of a rounded unsafe integer.
         *
         * **Note:** This method is based on
         * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
         * @example
         *
         * _.isSafeInteger(3);
         * // => true
         *
         * _.isSafeInteger(Number.MIN_VALUE);
         * // => false
         *
         * _.isSafeInteger(Infinity);
         * // => false
         *
         * _.isSafeInteger('3');
         * // => false
         */
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }

        /**
         * Checks if `value` is classified as a `Set` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a set, else `false`.
         * @example
         *
         * _.isSet(new Set);
         * // => true
         *
         * _.isSet(new WeakSet);
         * // => false
         */
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

        /**
         * Checks if `value` is classified as a `String` primitive or object.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a string, else `false`.
         * @example
         *
         * _.isString('abc');
         * // => true
         *
         * _.isString(1);
         * // => false
         */
        function isString(value) {
          return typeof value == 'string' ||
            (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
        }

        /**
         * Checks if `value` is classified as a `Symbol` primitive or object.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
         * @example
         *
         * _.isSymbol(Symbol.iterator);
         * // => true
         *
         * _.isSymbol('abc');
         * // => false
         */
        function isSymbol(value) {
          return typeof value == 'symbol' ||
            (isObjectLike(value) && baseGetTag(value) == symbolTag);
        }

        /**
         * Checks if `value` is classified as a typed array.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         * @example
         *
         * _.isTypedArray(new Uint8Array);
         * // => true
         *
         * _.isTypedArray([]);
         * // => false
         */
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

        /**
         * Checks if `value` is `undefined`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
         * @example
         *
         * _.isUndefined(void 0);
         * // => true
         *
         * _.isUndefined(null);
         * // => false
         */
        function isUndefined(value) {
          return value === undefined$1;
        }

        /**
         * Checks if `value` is classified as a `WeakMap` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
         * @example
         *
         * _.isWeakMap(new WeakMap);
         * // => true
         *
         * _.isWeakMap(new Map);
         * // => false
         */
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }

        /**
         * Checks if `value` is classified as a `WeakSet` object.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
         * @example
         *
         * _.isWeakSet(new WeakSet);
         * // => true
         *
         * _.isWeakSet(new Set);
         * // => false
         */
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }

        /**
         * Checks if `value` is less than `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is less than `other`,
         *  else `false`.
         * @see _.gt
         * @example
         *
         * _.lt(1, 3);
         * // => true
         *
         * _.lt(3, 3);
         * // => false
         *
         * _.lt(3, 1);
         * // => false
         */
        var lt = createRelationalOperation(baseLt);

        /**
         * Checks if `value` is less than or equal to `other`.
         *
         * @static
         * @memberOf _
         * @since 3.9.0
         * @category Lang
         * @param {*} value The value to compare.
         * @param {*} other The other value to compare.
         * @returns {boolean} Returns `true` if `value` is less than or equal to
         *  `other`, else `false`.
         * @see _.gte
         * @example
         *
         * _.lte(1, 3);
         * // => true
         *
         * _.lte(3, 3);
         * // => true
         *
         * _.lte(3, 1);
         * // => false
         */
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });

        /**
         * Converts `value` to an array.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {Array} Returns the converted array.
         * @example
         *
         * _.toArray({ 'a': 1, 'b': 2 });
         * // => [1, 2]
         *
         * _.toArray('abc');
         * // => ['a', 'b', 'c']
         *
         * _.toArray(1);
         * // => []
         *
         * _.toArray(null);
         * // => []
         */
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value),
              func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

          return func(value);
        }

        /**
         * Converts `value` to a finite number.
         *
         * @static
         * @memberOf _
         * @since 4.12.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted number.
         * @example
         *
         * _.toFinite(3.2);
         * // => 3.2
         *
         * _.toFinite(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toFinite(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toFinite('3.2');
         * // => 3.2
         */
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = (value < 0 ? -1 : 1);
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }

        /**
         * Converts `value` to an integer.
         *
         * **Note:** This method is loosely based on
         * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toInteger(3.2);
         * // => 3
         *
         * _.toInteger(Number.MIN_VALUE);
         * // => 0
         *
         * _.toInteger(Infinity);
         * // => 1.7976931348623157e+308
         *
         * _.toInteger('3.2');
         * // => 3
         */
        function toInteger(value) {
          var result = toFinite(value),
              remainder = result % 1;

          return result === result ? (remainder ? result - remainder : result) : 0;
        }

        /**
         * Converts `value` to an integer suitable for use as the length of an
         * array-like object.
         *
         * **Note:** This method is based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toLength(3.2);
         * // => 3
         *
         * _.toLength(Number.MIN_VALUE);
         * // => 0
         *
         * _.toLength(Infinity);
         * // => 4294967295
         *
         * _.toLength('3.2');
         * // => 3
         */
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }

        /**
         * Converts `value` to a number.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to process.
         * @returns {number} Returns the number.
         * @example
         *
         * _.toNumber(3.2);
         * // => 3.2
         *
         * _.toNumber(Number.MIN_VALUE);
         * // => 5e-324
         *
         * _.toNumber(Infinity);
         * // => Infinity
         *
         * _.toNumber('3.2');
         * // => 3.2
         */
        function toNumber(value) {
          if (typeof value == 'number') {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
            value = isObject(other) ? (other + '') : other;
          }
          if (typeof value != 'string') {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return (isBinary || reIsOctal.test(value))
            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
            : (reIsBadHex.test(value) ? NAN : +value);
        }

        /**
         * Converts `value` to a plain object flattening inherited enumerable string
         * keyed properties of `value` to own properties of the plain object.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {Object} Returns the converted plain object.
         * @example
         *
         * function Foo() {
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.assign({ 'a': 1 }, new Foo);
         * // => { 'a': 1, 'b': 2 }
         *
         * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
         * // => { 'a': 1, 'b': 2, 'c': 3 }
         */
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }

        /**
         * Converts `value` to a safe integer. A safe integer can be compared and
         * represented correctly.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.toSafeInteger(3.2);
         * // => 3
         *
         * _.toSafeInteger(Number.MIN_VALUE);
         * // => 0
         *
         * _.toSafeInteger(Infinity);
         * // => 9007199254740991
         *
         * _.toSafeInteger('3.2');
         * // => 3
         */
        function toSafeInteger(value) {
          return value
            ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
            : (value === 0 ? value : 0);
        }

        /**
         * Converts `value` to a string. An empty string is returned for `null`
         * and `undefined` values. The sign of `-0` is preserved.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.toString(null);
         * // => ''
         *
         * _.toString(-0);
         * // => '-0'
         *
         * _.toString([1, 2, 3]);
         * // => '1,2,3'
         */
        function toString(value) {
          return value == null ? '' : baseToString(value);
        }

        /*------------------------------------------------------------------------*/

        /**
         * Assigns own enumerable string keyed properties of source objects to the
         * destination object. Source objects are applied from left to right.
         * Subsequent sources overwrite property assignments of previous sources.
         *
         * **Note:** This method mutates `object` and is loosely based on
         * [`Object.assign`](https://mdn.io/Object/assign).
         *
         * @static
         * @memberOf _
         * @since 0.10.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.assignIn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * function Bar() {
         *   this.c = 3;
         * }
         *
         * Foo.prototype.b = 2;
         * Bar.prototype.d = 4;
         *
         * _.assign({ 'a': 0 }, new Foo, new Bar);
         * // => { 'a': 1, 'c': 3 }
         */
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });

        /**
         * This method is like `_.assign` except that it iterates over own and
         * inherited source properties.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias extend
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.assign
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         * }
         *
         * function Bar() {
         *   this.c = 3;
         * }
         *
         * Foo.prototype.b = 2;
         * Bar.prototype.d = 4;
         *
         * _.assignIn({ 'a': 0 }, new Foo, new Bar);
         * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
         */
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });

        /**
         * This method is like `_.assignIn` except that it accepts `customizer`
         * which is invoked to produce the assigned values. If `customizer` returns
         * `undefined`, assignment is handled by the method instead. The `customizer`
         * is invoked with five arguments: (objValue, srcValue, key, object, source).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias extendWith
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @see _.assignWith
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   return _.isUndefined(objValue) ? srcValue : objValue;
         * }
         *
         * var defaults = _.partialRight(_.assignInWith, customizer);
         *
         * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });

        /**
         * This method is like `_.assign` except that it accepts `customizer`
         * which is invoked to produce the assigned values. If `customizer` returns
         * `undefined`, assignment is handled by the method instead. The `customizer`
         * is invoked with five arguments: (objValue, srcValue, key, object, source).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @see _.assignInWith
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   return _.isUndefined(objValue) ? srcValue : objValue;
         * }
         *
         * var defaults = _.partialRight(_.assignWith, customizer);
         *
         * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });

        /**
         * Creates an array of values corresponding to `paths` of `object`.
         *
         * @static
         * @memberOf _
         * @since 1.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Array} Returns the picked values.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
         *
         * _.at(object, ['a[0].b.c', 'a[1]']);
         * // => [3, 4]
         */
        var at = flatRest(baseAt);

        /**
         * Creates an object that inherits from the `prototype` object. If a
         * `properties` object is given, its own enumerable string keyed properties
         * are assigned to the created object.
         *
         * @static
         * @memberOf _
         * @since 2.3.0
         * @category Object
         * @param {Object} prototype The object to inherit from.
         * @param {Object} [properties] The properties to assign to the object.
         * @returns {Object} Returns the new object.
         * @example
         *
         * function Shape() {
         *   this.x = 0;
         *   this.y = 0;
         * }
         *
         * function Circle() {
         *   Shape.call(this);
         * }
         *
         * Circle.prototype = _.create(Shape.prototype, {
         *   'constructor': Circle
         * });
         *
         * var circle = new Circle;
         * circle instanceof Circle;
         * // => true
         *
         * circle instanceof Shape;
         * // => true
         */
        function create(prototype, properties) {
          var result = baseCreate(prototype);
          return properties == null ? result : baseAssign(result, properties);
        }

        /**
         * Assigns own and inherited enumerable string keyed properties of source
         * objects to the destination object for all destination properties that
         * resolve to `undefined`. Source objects are applied from left to right.
         * Once a property is set, additional values of the same property are ignored.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.defaultsDeep
         * @example
         *
         * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
         * // => { 'a': 1, 'b': 2 }
         */
        var defaults = baseRest(function(object, sources) {
          object = Object(object);

          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined$1;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }

          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;

            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];

              if (value === undefined$1 ||
                  (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                object[key] = source[key];
              }
            }
          }

          return object;
        });

        /**
         * This method is like `_.defaults` except that it recursively assigns
         * default properties.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @see _.defaults
         * @example
         *
         * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
         * // => { 'a': { 'b': 2, 'c': 3 } }
         */
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined$1, customDefaultsMerge);
          return apply(mergeWith, undefined$1, args);
        });

        /**
         * This method is like `_.find` except that it returns the key of the first
         * element `predicate` returns truthy for instead of the element itself.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {string|undefined} Returns the key of the matched element,
         *  else `undefined`.
         * @example
         *
         * var users = {
         *   'barney':  { 'age': 36, 'active': true },
         *   'fred':    { 'age': 40, 'active': false },
         *   'pebbles': { 'age': 1,  'active': true }
         * };
         *
         * _.findKey(users, function(o) { return o.age < 40; });
         * // => 'barney' (iteration order is not guaranteed)
         *
         * // The `_.matches` iteratee shorthand.
         * _.findKey(users, { 'age': 1, 'active': true });
         * // => 'pebbles'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findKey(users, ['active', false]);
         * // => 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.findKey(users, 'active');
         * // => 'barney'
         */
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }

        /**
         * This method is like `_.findKey` except that it iterates over elements of
         * a collection in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @param {Function} [predicate=_.identity] The function invoked per iteration.
         * @returns {string|undefined} Returns the key of the matched element,
         *  else `undefined`.
         * @example
         *
         * var users = {
         *   'barney':  { 'age': 36, 'active': true },
         *   'fred':    { 'age': 40, 'active': false },
         *   'pebbles': { 'age': 1,  'active': true }
         * };
         *
         * _.findLastKey(users, function(o) { return o.age < 40; });
         * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
         *
         * // The `_.matches` iteratee shorthand.
         * _.findLastKey(users, { 'age': 36, 'active': true });
         * // => 'barney'
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.findLastKey(users, ['active', false]);
         * // => 'fred'
         *
         * // The `_.property` iteratee shorthand.
         * _.findLastKey(users, 'active');
         * // => 'pebbles'
         */
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }

        /**
         * Iterates over own and inherited enumerable string keyed properties of an
         * object and invokes `iteratee` for each property. The iteratee is invoked
         * with three arguments: (value, key, object). Iteratee functions may exit
         * iteration early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 0.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forInRight
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forIn(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
         */
        function forIn(object, iteratee) {
          return object == null
            ? object
            : baseFor(object, getIteratee(iteratee, 3), keysIn);
        }

        /**
         * This method is like `_.forIn` except that it iterates over properties of
         * `object` in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forIn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forInRight(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
         */
        function forInRight(object, iteratee) {
          return object == null
            ? object
            : baseForRight(object, getIteratee(iteratee, 3), keysIn);
        }

        /**
         * Iterates over own enumerable string keyed properties of an object and
         * invokes `iteratee` for each property. The iteratee is invoked with three
         * arguments: (value, key, object). Iteratee functions may exit iteration
         * early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 0.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forOwnRight
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forOwn(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'a' then 'b' (iteration order is not guaranteed).
         */
        function forOwn(object, iteratee) {
          return object && baseForOwn(object, getIteratee(iteratee, 3));
        }

        /**
         * This method is like `_.forOwn` except that it iterates over properties of
         * `object` in the opposite order.
         *
         * @static
         * @memberOf _
         * @since 2.0.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns `object`.
         * @see _.forOwn
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.forOwnRight(new Foo, function(value, key) {
         *   console.log(key);
         * });
         * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
         */
        function forOwnRight(object, iteratee) {
          return object && baseForOwnRight(object, getIteratee(iteratee, 3));
        }

        /**
         * Creates an array of function property names from own enumerable properties
         * of `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to inspect.
         * @returns {Array} Returns the function names.
         * @see _.functionsIn
         * @example
         *
         * function Foo() {
         *   this.a = _.constant('a');
         *   this.b = _.constant('b');
         * }
         *
         * Foo.prototype.c = _.constant('c');
         *
         * _.functions(new Foo);
         * // => ['a', 'b']
         */
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }

        /**
         * Creates an array of function property names from own and inherited
         * enumerable properties of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to inspect.
         * @returns {Array} Returns the function names.
         * @see _.functions
         * @example
         *
         * function Foo() {
         *   this.a = _.constant('a');
         *   this.b = _.constant('b');
         * }
         *
         * Foo.prototype.c = _.constant('c');
         *
         * _.functionsIn(new Foo);
         * // => ['a', 'b', 'c']
         */
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }

        /**
         * Gets the value at `path` of `object`. If the resolved value is
         * `undefined`, the `defaultValue` is returned in its place.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to get.
         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.get(object, 'a[0].b.c');
         * // => 3
         *
         * _.get(object, ['a', '0', 'b', 'c']);
         * // => 3
         *
         * _.get(object, 'a.b.c', 'default');
         * // => 'default'
         */
        function get(object, path, defaultValue) {
          var result = object == null ? undefined$1 : baseGet(object, path);
          return result === undefined$1 ? defaultValue : result;
        }

        /**
         * Checks if `path` is a direct property of `object`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         * @example
         *
         * var object = { 'a': { 'b': 2 } };
         * var other = _.create({ 'a': _.create({ 'b': 2 }) });
         *
         * _.has(object, 'a');
         * // => true
         *
         * _.has(object, 'a.b');
         * // => true
         *
         * _.has(object, ['a', 'b']);
         * // => true
         *
         * _.has(other, 'a');
         * // => false
         */
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }

        /**
         * Checks if `path` is a direct or inherited property of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path to check.
         * @returns {boolean} Returns `true` if `path` exists, else `false`.
         * @example
         *
         * var object = _.create({ 'a': _.create({ 'b': 2 }) });
         *
         * _.hasIn(object, 'a');
         * // => true
         *
         * _.hasIn(object, 'a.b');
         * // => true
         *
         * _.hasIn(object, ['a', 'b']);
         * // => true
         *
         * _.hasIn(object, 'b');
         * // => false
         */
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }

        /**
         * Creates an object composed of the inverted keys and values of `object`.
         * If `object` contains duplicate values, subsequent values overwrite
         * property assignments of previous values.
         *
         * @static
         * @memberOf _
         * @since 0.7.0
         * @category Object
         * @param {Object} object The object to invert.
         * @returns {Object} Returns the new inverted object.
         * @example
         *
         * var object = { 'a': 1, 'b': 2, 'c': 1 };
         *
         * _.invert(object);
         * // => { '1': 'c', '2': 'b' }
         */
        var invert = createInverter(function(result, value, key) {
          if (value != null &&
              typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }

          result[value] = key;
        }, constant(identity));

        /**
         * This method is like `_.invert` except that the inverted object is generated
         * from the results of running each element of `object` thru `iteratee`. The
         * corresponding inverted value of each inverted key is an array of keys
         * responsible for generating the inverted value. The iteratee is invoked
         * with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.1.0
         * @category Object
         * @param {Object} object The object to invert.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {Object} Returns the new inverted object.
         * @example
         *
         * var object = { 'a': 1, 'b': 2, 'c': 1 };
         *
         * _.invertBy(object);
         * // => { '1': ['a', 'c'], '2': ['b'] }
         *
         * _.invertBy(object, function(value) {
         *   return 'group' + value;
         * });
         * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
         */
        var invertBy = createInverter(function(result, value, key) {
          if (value != null &&
              typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }

          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }, getIteratee);

        /**
         * Invokes the method at `path` of `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the method to invoke.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {*} Returns the result of the invoked method.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
         *
         * _.invoke(object, 'a[0].b.c.slice', 1, 3);
         * // => [2, 3]
         */
        var invoke = baseRest(baseInvoke);

        /**
         * Creates an array of the own enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects. See the
         * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * for more details.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keys(new Foo);
         * // => ['a', 'b'] (iteration order is not guaranteed)
         *
         * _.keys('hi');
         * // => ['0', '1']
         */
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }

        /**
         * Creates an array of the own and inherited enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keysIn(new Foo);
         * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
         */
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }

        /**
         * The opposite of `_.mapValues`; this method creates an object with the
         * same values as `object` and keys generated by running each own enumerable
         * string keyed property of `object` thru `iteratee`. The iteratee is invoked
         * with three arguments: (value, key, object).
         *
         * @static
         * @memberOf _
         * @since 3.8.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns the new mapped object.
         * @see _.mapValues
         * @example
         *
         * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
         *   return key + value;
         * });
         * // => { 'a1': 1, 'b2': 2 }
         */
        function mapKeys(object, iteratee) {
          var result = {};
          iteratee = getIteratee(iteratee, 3);

          baseForOwn(object, function(value, key, object) {
            baseAssignValue(result, iteratee(value, key, object), value);
          });
          return result;
        }

        /**
         * Creates an object with the same keys as `object` and values generated
         * by running each own enumerable string keyed property of `object` thru
         * `iteratee`. The iteratee is invoked with three arguments:
         * (value, key, object).
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Object} Returns the new mapped object.
         * @see _.mapKeys
         * @example
         *
         * var users = {
         *   'fred':    { 'user': 'fred',    'age': 40 },
         *   'pebbles': { 'user': 'pebbles', 'age': 1 }
         * };
         *
         * _.mapValues(users, function(o) { return o.age; });
         * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
         *
         * // The `_.property` iteratee shorthand.
         * _.mapValues(users, 'age');
         * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
         */
        function mapValues(object, iteratee) {
          var result = {};
          iteratee = getIteratee(iteratee, 3);

          baseForOwn(object, function(value, key, object) {
            baseAssignValue(result, key, iteratee(value, key, object));
          });
          return result;
        }

        /**
         * This method is like `_.assign` except that it recursively merges own and
         * inherited enumerable string keyed properties of source objects into the
         * destination object. Source properties that resolve to `undefined` are
         * skipped if a destination value exists. Array and plain object properties
         * are merged recursively. Other objects and value types are overridden by
         * assignment. Source objects are applied from left to right. Subsequent
         * sources overwrite property assignments of previous sources.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 0.5.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} [sources] The source objects.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {
         *   'a': [{ 'b': 2 }, { 'd': 4 }]
         * };
         *
         * var other = {
         *   'a': [{ 'c': 3 }, { 'e': 5 }]
         * };
         *
         * _.merge(object, other);
         * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
         */
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });

        /**
         * This method is like `_.merge` except that it accepts `customizer` which
         * is invoked to produce the merged values of the destination and source
         * properties. If `customizer` returns `undefined`, merging is handled by the
         * method instead. The `customizer` is invoked with six arguments:
         * (objValue, srcValue, key, object, source, stack).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The destination object.
         * @param {...Object} sources The source objects.
         * @param {Function} customizer The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * function customizer(objValue, srcValue) {
         *   if (_.isArray(objValue)) {
         *     return objValue.concat(srcValue);
         *   }
         * }
         *
         * var object = { 'a': [1], 'b': [2] };
         * var other = { 'a': [3], 'b': [4] };
         *
         * _.mergeWith(object, other, customizer);
         * // => { 'a': [1, 3], 'b': [2, 4] }
         */
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });

        /**
         * The opposite of `_.pick`; this method creates an object composed of the
         * own and inherited enumerable property paths of `object` that are not omitted.
         *
         * **Note:** This method is considerably slower than `_.pick`.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The source object.
         * @param {...(string|string[])} [paths] The property paths to omit.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.omit(object, ['a', 'c']);
         * // => { 'b': '2' }
         */
        var omit = flatRest(function(object, paths) {
          var result = {};
          if (object == null) {
            return result;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result);
          if (isDeep) {
            result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result, paths[length]);
          }
          return result;
        });

        /**
         * The opposite of `_.pickBy`; this method creates an object composed of
         * the own and inherited enumerable string keyed properties of `object` that
         * `predicate` doesn't return truthy for. The predicate is invoked with two
         * arguments: (value, key).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The source object.
         * @param {Function} [predicate=_.identity] The function invoked per property.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.omitBy(object, _.isNumber);
         * // => { 'b': '2' }
         */
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }

        /**
         * Creates an object composed of the picked `object` properties.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The source object.
         * @param {...(string|string[])} [paths] The property paths to pick.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.pick(object, ['a', 'c']);
         * // => { 'a': 1, 'c': 3 }
         */
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });

        /**
         * Creates an object composed of the `object` properties `predicate` returns
         * truthy for. The predicate is invoked with two arguments: (value, key).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The source object.
         * @param {Function} [predicate=_.identity] The function invoked per property.
         * @returns {Object} Returns the new object.
         * @example
         *
         * var object = { 'a': 1, 'b': '2', 'c': 3 };
         *
         * _.pickBy(object, _.isNumber);
         * // => { 'a': 1, 'c': 3 }
         */
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }

        /**
         * This method is like `_.get` except that if the resolved value is a
         * function it's invoked with the `this` binding of its parent object and
         * its result is returned.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @param {Array|string} path The path of the property to resolve.
         * @param {*} [defaultValue] The value returned for `undefined` resolved values.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
         *
         * _.result(object, 'a[0].b.c1');
         * // => 3
         *
         * _.result(object, 'a[0].b.c2');
         * // => 4
         *
         * _.result(object, 'a[0].b.c3', 'default');
         * // => 'default'
         *
         * _.result(object, 'a[0].b.c3', _.constant('default'));
         * // => 'default'
         */
        function result(object, path, defaultValue) {
          path = castPath(path, object);

          var index = -1,
              length = path.length;

          // Ensure the loop is entered when path is empty.
          if (!length) {
            length = 1;
            object = undefined$1;
          }
          while (++index < length) {
            var value = object == null ? undefined$1 : object[toKey(path[index])];
            if (value === undefined$1) {
              index = length;
              value = defaultValue;
            }
            object = isFunction(value) ? value.call(object) : value;
          }
          return object;
        }

        /**
         * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
         * it's created. Arrays are created for missing index properties while objects
         * are created for all other missing properties. Use `_.setWith` to customize
         * `path` creation.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.set(object, 'a[0].b.c', 4);
         * console.log(object.a[0].b.c);
         * // => 4
         *
         * _.set(object, ['x', '0', 'y', 'z'], 5);
         * console.log(object.x[0].y.z);
         * // => 5
         */
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }

        /**
         * This method is like `_.set` except that it accepts `customizer` which is
         * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
         * path creation is handled by the method instead. The `customizer` is invoked
         * with three arguments: (nsValue, key, nsObject).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {*} value The value to set.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {};
         *
         * _.setWith(object, '[0][1]', 'a', Object);
         * // => { '0': { '1': 'a' } }
         */
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined$1;
          return object == null ? object : baseSet(object, path, value, customizer);
        }

        /**
         * Creates an array of own enumerable string keyed-value pairs for `object`
         * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
         * entries are returned.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias entries
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the key-value pairs.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.toPairs(new Foo);
         * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
         */
        var toPairs = createToPairs(keys);

        /**
         * Creates an array of own and inherited enumerable string keyed-value pairs
         * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
         * or set, its entries are returned.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @alias entriesIn
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the key-value pairs.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.toPairsIn(new Foo);
         * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
         */
        var toPairsIn = createToPairs(keysIn);

        /**
         * An alternative to `_.reduce`; this method transforms `object` to a new
         * `accumulator` object which is the result of running each of its own
         * enumerable string keyed properties thru `iteratee`, with each invocation
         * potentially mutating the `accumulator` object. If `accumulator` is not
         * provided, a new object with the same `[[Prototype]]` will be used. The
         * iteratee is invoked with four arguments: (accumulator, value, key, object).
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * @static
         * @memberOf _
         * @since 1.3.0
         * @category Object
         * @param {Object} object The object to iterate over.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @param {*} [accumulator] The custom accumulator value.
         * @returns {*} Returns the accumulated value.
         * @example
         *
         * _.transform([2, 3, 4], function(result, n) {
         *   result.push(n *= n);
         *   return n % 2 == 0;
         * }, []);
         * // => [4, 9]
         *
         * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
         *   (result[value] || (result[value] = [])).push(key);
         * }, {});
         * // => { '1': ['a', 'c'], '2': ['b'] }
         */
        function transform(object, iteratee, accumulator) {
          var isArr = isArray(object),
              isArrLike = isArr || isBuffer(object) || isTypedArray(object);

          iteratee = getIteratee(iteratee, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor : [];
            }
            else if (isObject(object)) {
              accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
            }
            else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
            return iteratee(accumulator, value, index, object);
          });
          return accumulator;
        }

        /**
         * Removes the property at `path` of `object`.
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to unset.
         * @returns {boolean} Returns `true` if the property is deleted, else `false`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 7 } }] };
         * _.unset(object, 'a[0].b.c');
         * // => true
         *
         * console.log(object);
         * // => { 'a': [{ 'b': {} }] };
         *
         * _.unset(object, ['a', '0', 'b', 'c']);
         * // => true
         *
         * console.log(object);
         * // => { 'a': [{ 'b': {} }] };
         */
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }

        /**
         * This method is like `_.set` except that accepts `updater` to produce the
         * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
         * is invoked with one argument: (value).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {Function} updater The function to produce the updated value.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = { 'a': [{ 'b': { 'c': 3 } }] };
         *
         * _.update(object, 'a[0].b.c', function(n) { return n * n; });
         * console.log(object.a[0].b.c);
         * // => 9
         *
         * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
         * console.log(object.x[0].y.z);
         * // => 0
         */
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }

        /**
         * This method is like `_.update` except that it accepts `customizer` which is
         * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
         * path creation is handled by the method instead. The `customizer` is invoked
         * with three arguments: (nsValue, key, nsObject).
         *
         * **Note:** This method mutates `object`.
         *
         * @static
         * @memberOf _
         * @since 4.6.0
         * @category Object
         * @param {Object} object The object to modify.
         * @param {Array|string} path The path of the property to set.
         * @param {Function} updater The function to produce the updated value.
         * @param {Function} [customizer] The function to customize assigned values.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var object = {};
         *
         * _.updateWith(object, '[0][1]', _.constant('a'), Object);
         * // => { '0': { '1': 'a' } }
         */
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == 'function' ? customizer : undefined$1;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }

        /**
         * Creates an array of the own enumerable string keyed property values of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property values.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.values(new Foo);
         * // => [1, 2] (iteration order is not guaranteed)
         *
         * _.values('hi');
         * // => ['h', 'i']
         */
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }

        /**
         * Creates an array of the own and inherited enumerable string keyed property
         * values of `object`.
         *
         * **Note:** Non-object values are coerced to objects.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property values.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.valuesIn(new Foo);
         * // => [1, 2, 3] (iteration order is not guaranteed)
         */
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }

        /*------------------------------------------------------------------------*/

        /**
         * Clamps `number` within the inclusive `lower` and `upper` bounds.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Number
         * @param {number} number The number to clamp.
         * @param {number} [lower] The lower bound.
         * @param {number} upper The upper bound.
         * @returns {number} Returns the clamped number.
         * @example
         *
         * _.clamp(-10, -5, 5);
         * // => -5
         *
         * _.clamp(10, -5, 5);
         * // => 5
         */
        function clamp(number, lower, upper) {
          if (upper === undefined$1) {
            upper = lower;
            lower = undefined$1;
          }
          if (upper !== undefined$1) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined$1) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }

        /**
         * Checks if `n` is between `start` and up to, but not including, `end`. If
         * `end` is not specified, it's set to `start` with `start` then set to `0`.
         * If `start` is greater than `end` the params are swapped to support
         * negative ranges.
         *
         * @static
         * @memberOf _
         * @since 3.3.0
         * @category Number
         * @param {number} number The number to check.
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
         * @see _.range, _.rangeRight
         * @example
         *
         * _.inRange(3, 2, 4);
         * // => true
         *
         * _.inRange(4, 8);
         * // => true
         *
         * _.inRange(4, 2);
         * // => false
         *
         * _.inRange(2, 2);
         * // => false
         *
         * _.inRange(1.2, 2);
         * // => true
         *
         * _.inRange(5.2, 4);
         * // => false
         *
         * _.inRange(-3, -2, -6);
         * // => true
         */
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined$1) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }

        /**
         * Produces a random number between the inclusive `lower` and `upper` bounds.
         * If only one argument is provided a number between `0` and the given number
         * is returned. If `floating` is `true`, or either `lower` or `upper` are
         * floats, a floating-point number is returned instead of an integer.
         *
         * **Note:** JavaScript follows the IEEE-754 standard for resolving
         * floating-point values which can produce unexpected results.
         *
         * @static
         * @memberOf _
         * @since 0.7.0
         * @category Number
         * @param {number} [lower=0] The lower bound.
         * @param {number} [upper=1] The upper bound.
         * @param {boolean} [floating] Specify returning a floating-point number.
         * @returns {number} Returns the random number.
         * @example
         *
         * _.random(0, 5);
         * // => an integer between 0 and 5
         *
         * _.random(5);
         * // => also an integer between 0 and 5
         *
         * _.random(5, true);
         * // => a floating-point number between 0 and 5
         *
         * _.random(1.2, 5.2);
         * // => a floating-point number between 1.2 and 5.2
         */
        function random(lower, upper, floating) {
          if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined$1;
          }
          if (floating === undefined$1) {
            if (typeof upper == 'boolean') {
              floating = upper;
              upper = undefined$1;
            }
            else if (typeof lower == 'boolean') {
              floating = lower;
              lower = undefined$1;
            }
          }
          if (lower === undefined$1 && upper === undefined$1) {
            lower = 0;
            upper = 1;
          }
          else {
            lower = toFinite(lower);
            if (upper === undefined$1) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
          }
          return baseRandom(lower, upper);
        }

        /*------------------------------------------------------------------------*/

        /**
         * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the camel cased string.
         * @example
         *
         * _.camelCase('Foo Bar');
         * // => 'fooBar'
         *
         * _.camelCase('--foo-bar--');
         * // => 'fooBar'
         *
         * _.camelCase('__FOO_BAR__');
         * // => 'fooBar'
         */
        var camelCase = createCompounder(function(result, word, index) {
          word = word.toLowerCase();
          return result + (index ? capitalize(word) : word);
        });

        /**
         * Converts the first character of `string` to upper case and the remaining
         * to lower case.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to capitalize.
         * @returns {string} Returns the capitalized string.
         * @example
         *
         * _.capitalize('FRED');
         * // => 'Fred'
         */
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }

        /**
         * Deburrs `string` by converting
         * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
         * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
         * letters to basic Latin letters and removing
         * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to deburr.
         * @returns {string} Returns the deburred string.
         * @example
         *
         * _.deburr('déjà vu');
         * // => 'deja vu'
         */
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
        }

        /**
         * Checks if `string` ends with the given target string.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to inspect.
         * @param {string} [target] The string to search for.
         * @param {number} [position=string.length] The position to search up to.
         * @returns {boolean} Returns `true` if `string` ends with `target`,
         *  else `false`.
         * @example
         *
         * _.endsWith('abc', 'c');
         * // => true
         *
         * _.endsWith('abc', 'b');
         * // => false
         *
         * _.endsWith('abc', 'b', 2);
         * // => true
         */
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);

          var length = string.length;
          position = position === undefined$1
            ? length
            : baseClamp(toInteger(position), 0, length);

          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }

        /**
         * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
         * corresponding HTML entities.
         *
         * **Note:** No other characters are escaped. To escape additional
         * characters use a third-party library like [_he_](https://mths.be/he).
         *
         * Though the ">" character is escaped for symmetry, characters like
         * ">" and "/" don't need escaping in HTML and have no special meaning
         * unless they're part of a tag or unquoted attribute value. See
         * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
         * (under "semi-related fun fact") for more details.
         *
         * When working with HTML you should always
         * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
         * XSS vectors.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category String
         * @param {string} [string=''] The string to escape.
         * @returns {string} Returns the escaped string.
         * @example
         *
         * _.escape('fred, barney, & pebbles');
         * // => 'fred, barney, &amp; pebbles'
         */
        function escape(string) {
          string = toString(string);
          return (string && reHasUnescapedHtml.test(string))
            ? string.replace(reUnescapedHtml, escapeHtmlChar)
            : string;
        }

        /**
         * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
         * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to escape.
         * @returns {string} Returns the escaped string.
         * @example
         *
         * _.escapeRegExp('[lodash](https://lodash.com/)');
         * // => '\[lodash\]\(https://lodash\.com/\)'
         */
        function escapeRegExp(string) {
          string = toString(string);
          return (string && reHasRegExpChar.test(string))
            ? string.replace(reRegExpChar, '\\$&')
            : string;
        }

        /**
         * Converts `string` to
         * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the kebab cased string.
         * @example
         *
         * _.kebabCase('Foo Bar');
         * // => 'foo-bar'
         *
         * _.kebabCase('fooBar');
         * // => 'foo-bar'
         *
         * _.kebabCase('__FOO_BAR__');
         * // => 'foo-bar'
         */
        var kebabCase = createCompounder(function(result, word, index) {
          return result + (index ? '-' : '') + word.toLowerCase();
        });

        /**
         * Converts `string`, as space separated words, to lower case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the lower cased string.
         * @example
         *
         * _.lowerCase('--Foo-Bar--');
         * // => 'foo bar'
         *
         * _.lowerCase('fooBar');
         * // => 'foo bar'
         *
         * _.lowerCase('__FOO_BAR__');
         * // => 'foo bar'
         */
        var lowerCase = createCompounder(function(result, word, index) {
          return result + (index ? ' ' : '') + word.toLowerCase();
        });

        /**
         * Converts the first character of `string` to lower case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.lowerFirst('Fred');
         * // => 'fred'
         *
         * _.lowerFirst('FRED');
         * // => 'fRED'
         */
        var lowerFirst = createCaseFirst('toLowerCase');

        /**
         * Pads `string` on the left and right sides if it's shorter than `length`.
         * Padding characters are truncated if they can't be evenly divided by `length`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.pad('abc', 8);
         * // => '  abc   '
         *
         * _.pad('abc', 8, '_-');
         * // => '_-abc_-_'
         *
         * _.pad('abc', 3);
         * // => 'abc'
         */
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);

          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return (
            createPadding(nativeFloor(mid), chars) +
            string +
            createPadding(nativeCeil(mid), chars)
          );
        }

        /**
         * Pads `string` on the right side if it's shorter than `length`. Padding
         * characters are truncated if they exceed `length`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.padEnd('abc', 6);
         * // => 'abc   '
         *
         * _.padEnd('abc', 6, '_-');
         * // => 'abc_-_'
         *
         * _.padEnd('abc', 3);
         * // => 'abc'
         */
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);

          var strLength = length ? stringSize(string) : 0;
          return (length && strLength < length)
            ? (string + createPadding(length - strLength, chars))
            : string;
        }

        /**
         * Pads `string` on the left side if it's shorter than `length`. Padding
         * characters are truncated if they exceed `length`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to pad.
         * @param {number} [length=0] The padding length.
         * @param {string} [chars=' '] The string used as padding.
         * @returns {string} Returns the padded string.
         * @example
         *
         * _.padStart('abc', 6);
         * // => '   abc'
         *
         * _.padStart('abc', 6, '_-');
         * // => '_-_abc'
         *
         * _.padStart('abc', 3);
         * // => 'abc'
         */
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);

          var strLength = length ? stringSize(string) : 0;
          return (length && strLength < length)
            ? (createPadding(length - strLength, chars) + string)
            : string;
        }

        /**
         * Converts `string` to an integer of the specified radix. If `radix` is
         * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
         * hexadecimal, in which case a `radix` of `16` is used.
         *
         * **Note:** This method aligns with the
         * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category String
         * @param {string} string The string to convert.
         * @param {number} [radix=10] The radix to interpret `value` by.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {number} Returns the converted integer.
         * @example
         *
         * _.parseInt('08');
         * // => 8
         *
         * _.map(['6', '08', '10'], _.parseInt);
         * // => [6, 8, 10]
         */
        function parseInt(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
        }

        /**
         * Repeats the given string `n` times.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to repeat.
         * @param {number} [n=1] The number of times to repeat the string.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the repeated string.
         * @example
         *
         * _.repeat('*', 3);
         * // => '***'
         *
         * _.repeat('abc', 2);
         * // => 'abcabc'
         *
         * _.repeat('abc', 0);
         * // => ''
         */
        function repeat(string, n, guard) {
          if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }

        /**
         * Replaces matches for `pattern` in `string` with `replacement`.
         *
         * **Note:** This method is based on
         * [`String#replace`](https://mdn.io/String/replace).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to modify.
         * @param {RegExp|string} pattern The pattern to replace.
         * @param {Function|string} replacement The match replacement.
         * @returns {string} Returns the modified string.
         * @example
         *
         * _.replace('Hi Fred', 'Fred', 'Barney');
         * // => 'Hi Barney'
         */
        function replace() {
          var args = arguments,
              string = toString(args[0]);

          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }

        /**
         * Converts `string` to
         * [snake case](https://en.wikipedia.org/wiki/Snake_case).
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the snake cased string.
         * @example
         *
         * _.snakeCase('Foo Bar');
         * // => 'foo_bar'
         *
         * _.snakeCase('fooBar');
         * // => 'foo_bar'
         *
         * _.snakeCase('--FOO-BAR--');
         * // => 'foo_bar'
         */
        var snakeCase = createCompounder(function(result, word, index) {
          return result + (index ? '_' : '') + word.toLowerCase();
        });

        /**
         * Splits `string` by `separator`.
         *
         * **Note:** This method is based on
         * [`String#split`](https://mdn.io/String/split).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to split.
         * @param {RegExp|string} separator The separator pattern to split by.
         * @param {number} [limit] The length to truncate results to.
         * @returns {Array} Returns the string segments.
         * @example
         *
         * _.split('a-b-c', '-', 2);
         * // => ['a', 'b']
         */
        function split(string, separator, limit) {
          if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined$1;
          }
          limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (
                typeof separator == 'string' ||
                (separator != null && !isRegExp(separator))
              )) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }

        /**
         * Converts `string` to
         * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
         *
         * @static
         * @memberOf _
         * @since 3.1.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the start cased string.
         * @example
         *
         * _.startCase('--foo-bar--');
         * // => 'Foo Bar'
         *
         * _.startCase('fooBar');
         * // => 'Foo Bar'
         *
         * _.startCase('__FOO_BAR__');
         * // => 'FOO BAR'
         */
        var startCase = createCompounder(function(result, word, index) {
          return result + (index ? ' ' : '') + upperFirst(word);
        });

        /**
         * Checks if `string` starts with the given target string.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to inspect.
         * @param {string} [target] The string to search for.
         * @param {number} [position=0] The position to search from.
         * @returns {boolean} Returns `true` if `string` starts with `target`,
         *  else `false`.
         * @example
         *
         * _.startsWith('abc', 'a');
         * // => true
         *
         * _.startsWith('abc', 'b');
         * // => false
         *
         * _.startsWith('abc', 'b', 1);
         * // => true
         */
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null
            ? 0
            : baseClamp(toInteger(position), 0, string.length);

          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }

        /**
         * Creates a compiled template function that can interpolate data properties
         * in "interpolate" delimiters, HTML-escape interpolated data properties in
         * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
         * properties may be accessed as free variables in the template. If a setting
         * object is given, it takes precedence over `_.templateSettings` values.
         *
         * **Note:** In the development build `_.template` utilizes
         * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
         * for easier debugging.
         *
         * For more information on precompiling templates see
         * [lodash's custom builds documentation](https://lodash.com/custom-builds).
         *
         * For more information on Chrome extension sandboxes see
         * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category String
         * @param {string} [string=''] The template string.
         * @param {Object} [options={}] The options object.
         * @param {RegExp} [options.escape=_.templateSettings.escape]
         *  The HTML "escape" delimiter.
         * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
         *  The "evaluate" delimiter.
         * @param {Object} [options.imports=_.templateSettings.imports]
         *  An object to import into the template as free variables.
         * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
         *  The "interpolate" delimiter.
         * @param {string} [options.sourceURL='lodash.templateSources[n]']
         *  The sourceURL of the compiled template.
         * @param {string} [options.variable='obj']
         *  The data object variable name.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Function} Returns the compiled template function.
         * @example
         *
         * // Use the "interpolate" delimiter to create a compiled template.
         * var compiled = _.template('hello <%= user %>!');
         * compiled({ 'user': 'fred' });
         * // => 'hello fred!'
         *
         * // Use the HTML "escape" delimiter to escape data property values.
         * var compiled = _.template('<b><%- value %></b>');
         * compiled({ 'value': '<script>' });
         * // => '<b>&lt;script&gt;</b>'
         *
         * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
         * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
         * compiled({ 'users': ['fred', 'barney'] });
         * // => '<li>fred</li><li>barney</li>'
         *
         * // Use the internal `print` function in "evaluate" delimiters.
         * var compiled = _.template('<% print("hello " + user); %>!');
         * compiled({ 'user': 'barney' });
         * // => 'hello barney!'
         *
         * // Use the ES template literal delimiter as an "interpolate" delimiter.
         * // Disable support by replacing the "interpolate" delimiter.
         * var compiled = _.template('hello ${ user }!');
         * compiled({ 'user': 'pebbles' });
         * // => 'hello pebbles!'
         *
         * // Use backslashes to treat delimiters as plain text.
         * var compiled = _.template('<%= "\\<%- value %\\>" %>');
         * compiled({ 'value': 'ignored' });
         * // => '<%- value %>'
         *
         * // Use the `imports` option to import `jQuery` as `jq`.
         * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
         * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
         * compiled({ 'users': ['fred', 'barney'] });
         * // => '<li>fred</li><li>barney</li>'
         *
         * // Use the `sourceURL` option to specify a custom sourceURL for the template.
         * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
         * compiled(data);
         * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
         *
         * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
         * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
         * compiled.source;
         * // => function(data) {
         * //   var __t, __p = '';
         * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
         * //   return __p;
         * // }
         *
         * // Use custom template delimiters.
         * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
         * var compiled = _.template('hello {{ user }}!');
         * compiled({ 'user': 'mustache' });
         * // => 'hello mustache!'
         *
         * // Use the `source` property to inline compiled templates for meaningful
         * // line numbers in error messages and stack traces.
         * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
         *   var JST = {\
         *     "main": ' + _.template(mainText).source + '\
         *   };\
         * ');
         */
        function template(string, options, guard) {
          // Based on John Resig's `tmpl` implementation
          // (http://ejohn.org/blog/javascript-micro-templating/)
          // and Laura Doktorova's doT.js (https://github.com/olado/doT).
          var settings = lodash.templateSettings;

          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined$1;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);

          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
              importsKeys = keys(imports),
              importsValues = baseValues(imports, importsKeys);

          var isEscaping,
              isEvaluating,
              index = 0,
              interpolate = options.interpolate || reNoMatch,
              source = "__p += '";

          // Compile the regexp to match each delimiter.
          var reDelimiters = RegExp(
            (options.escape || reNoMatch).source + '|' +
            interpolate.source + '|' +
            (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
            (options.evaluate || reNoMatch).source + '|$'
          , 'g');

          // Use a sourceURL for easier debugging.
          // The sourceURL gets injected into the source that's eval-ed, so be careful
          // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
          // and escape the comment, thus injecting code that gets evaled.
          var sourceURL = '//# sourceURL=' +
            (hasOwnProperty.call(options, 'sourceURL')
              ? (options.sourceURL + '').replace(/\s/g, ' ')
              : ('lodash.templateSources[' + (++templateCounter) + ']')
            ) + '\n';

          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);

            // Escape characters that can't be included in string literals.
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

            // Replace delimiters with snippets.
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;

            // The JS engine embedded in Adobe products needs `match` returned in
            // order to produce the correct `offset` value.
            return match;
          });

          source += "';\n";

          // If `variable` is not specified wrap a with-statement around the generated
          // code to add the data object to the top of the scope chain.
          var variable = hasOwnProperty.call(options, 'variable') && options.variable;
          if (!variable) {
            source = 'with (obj) {\n' + source + '\n}\n';
          }
          // Throw an error if a forbidden character was found in `variable`, to prevent
          // potential command injection attacks.
          else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
          }

          // Cleanup code by stripping empty strings.
          source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
            .replace(reEmptyStringMiddle, '$1')
            .replace(reEmptyStringTrailing, '$1;');

          // Frame code as the function body.
          source = 'function(' + (variable || 'obj') + ') {\n' +
            (variable
              ? ''
              : 'obj || (obj = {});\n'
            ) +
            "var __t, __p = ''" +
            (isEscaping
               ? ', __e = _.escape'
               : ''
            ) +
            (isEvaluating
              ? ', __j = Array.prototype.join;\n' +
                "function print() { __p += __j.call(arguments, '') }\n"
              : ';\n'
            ) +
            source +
            'return __p\n}';

          var result = attempt(function() {
            return Function(importsKeys, sourceURL + 'return ' + source)
              .apply(undefined$1, importsValues);
          });

          // Provide the compiled function's source by its `toString` method or
          // the `source` property as a convenience for inlining compiled templates.
          result.source = source;
          if (isError(result)) {
            throw result;
          }
          return result;
        }

        /**
         * Converts `string`, as a whole, to lower case just like
         * [String#toLowerCase](https://mdn.io/toLowerCase).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the lower cased string.
         * @example
         *
         * _.toLower('--Foo-Bar--');
         * // => '--foo-bar--'
         *
         * _.toLower('fooBar');
         * // => 'foobar'
         *
         * _.toLower('__FOO_BAR__');
         * // => '__foo_bar__'
         */
        function toLower(value) {
          return toString(value).toLowerCase();
        }

        /**
         * Converts `string`, as a whole, to upper case just like
         * [String#toUpperCase](https://mdn.io/toUpperCase).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the upper cased string.
         * @example
         *
         * _.toUpper('--foo-bar--');
         * // => '--FOO-BAR--'
         *
         * _.toUpper('fooBar');
         * // => 'FOOBAR'
         *
         * _.toUpper('__foo_bar__');
         * // => '__FOO_BAR__'
         */
        function toUpper(value) {
          return toString(value).toUpperCase();
        }

        /**
         * Removes leading and trailing whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trim('  abc  ');
         * // => 'abc'
         *
         * _.trim('-_-abc-_-', '_-');
         * // => 'abc'
         *
         * _.map(['  foo  ', '  bar  '], _.trim);
         * // => ['foo', 'bar']
         */
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined$1)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
              chrSymbols = stringToArray(chars),
              start = charsStartIndex(strSymbols, chrSymbols),
              end = charsEndIndex(strSymbols, chrSymbols) + 1;

          return castSlice(strSymbols, start, end).join('');
        }

        /**
         * Removes trailing whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trimEnd('  abc  ');
         * // => '  abc'
         *
         * _.trimEnd('-_-abc-_-', '_-');
         * // => '-_-abc'
         */
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined$1)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
              end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

          return castSlice(strSymbols, 0, end).join('');
        }

        /**
         * Removes leading whitespace or specified characters from `string`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to trim.
         * @param {string} [chars=whitespace] The characters to trim.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {string} Returns the trimmed string.
         * @example
         *
         * _.trimStart('  abc  ');
         * // => 'abc  '
         *
         * _.trimStart('-_-abc-_-', '_-');
         * // => 'abc-_-'
         */
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined$1)) {
            return string.replace(reTrimStart, '');
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
              start = charsStartIndex(strSymbols, stringToArray(chars));

          return castSlice(strSymbols, start).join('');
        }

        /**
         * Truncates `string` if it's longer than the given maximum string length.
         * The last characters of the truncated string are replaced with the omission
         * string which defaults to "...".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to truncate.
         * @param {Object} [options={}] The options object.
         * @param {number} [options.length=30] The maximum string length.
         * @param {string} [options.omission='...'] The string to indicate text is omitted.
         * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
         * @returns {string} Returns the truncated string.
         * @example
         *
         * _.truncate('hi-diddly-ho there, neighborino');
         * // => 'hi-diddly-ho there, neighbo...'
         *
         * _.truncate('hi-diddly-ho there, neighborino', {
         *   'length': 24,
         *   'separator': ' '
         * });
         * // => 'hi-diddly-ho there,...'
         *
         * _.truncate('hi-diddly-ho there, neighborino', {
         *   'length': 24,
         *   'separator': /,? +/
         * });
         * // => 'hi-diddly-ho there...'
         *
         * _.truncate('hi-diddly-ho there, neighborino', {
         *   'omission': ' [...]'
         * });
         * // => 'hi-diddly-ho there, neig [...]'
         */
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH,
              omission = DEFAULT_TRUNC_OMISSION;

          if (isObject(options)) {
            var separator = 'separator' in options ? options.separator : separator;
            length = 'length' in options ? toInteger(options.length) : length;
            omission = 'omission' in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);

          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result = strSymbols
            ? castSlice(strSymbols, 0, end).join('')
            : string.slice(0, end);

          if (separator === undefined$1) {
            return result + omission;
          }
          if (strSymbols) {
            end += (result.length - end);
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match,
                  substring = result;

              if (!separator.global) {
                separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
              }
              separator.lastIndex = 0;
              while ((match = separator.exec(substring))) {
                var newEnd = match.index;
              }
              result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result.lastIndexOf(separator);
            if (index > -1) {
              result = result.slice(0, index);
            }
          }
          return result + omission;
        }

        /**
         * The inverse of `_.escape`; this method converts the HTML entities
         * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
         * their corresponding characters.
         *
         * **Note:** No other HTML entities are unescaped. To unescape additional
         * HTML entities use a third-party library like [_he_](https://mths.be/he).
         *
         * @static
         * @memberOf _
         * @since 0.6.0
         * @category String
         * @param {string} [string=''] The string to unescape.
         * @returns {string} Returns the unescaped string.
         * @example
         *
         * _.unescape('fred, barney, &amp; pebbles');
         * // => 'fred, barney, & pebbles'
         */
        function unescape(string) {
          string = toString(string);
          return (string && reHasEscapedHtml.test(string))
            ? string.replace(reEscapedHtml, unescapeHtmlChar)
            : string;
        }

        /**
         * Converts `string`, as space separated words, to upper case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the upper cased string.
         * @example
         *
         * _.upperCase('--foo-bar');
         * // => 'FOO BAR'
         *
         * _.upperCase('fooBar');
         * // => 'FOO BAR'
         *
         * _.upperCase('__foo_bar__');
         * // => 'FOO BAR'
         */
        var upperCase = createCompounder(function(result, word, index) {
          return result + (index ? ' ' : '') + word.toUpperCase();
        });

        /**
         * Converts the first character of `string` to upper case.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category String
         * @param {string} [string=''] The string to convert.
         * @returns {string} Returns the converted string.
         * @example
         *
         * _.upperFirst('fred');
         * // => 'Fred'
         *
         * _.upperFirst('FRED');
         * // => 'FRED'
         */
        var upperFirst = createCaseFirst('toUpperCase');

        /**
         * Splits `string` into an array of its words.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category String
         * @param {string} [string=''] The string to inspect.
         * @param {RegExp|string} [pattern] The pattern to match words.
         * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
         * @returns {Array} Returns the words of `string`.
         * @example
         *
         * _.words('fred, barney, & pebbles');
         * // => ['fred', 'barney', 'pebbles']
         *
         * _.words('fred, barney, & pebbles', /[^, ]+/g);
         * // => ['fred', 'barney', '&', 'pebbles']
         */
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined$1 : pattern;

          if (pattern === undefined$1) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }

        /*------------------------------------------------------------------------*/

        /**
         * Attempts to invoke `func`, returning either the result or the caught error
         * object. Any additional arguments are provided to `func` when it's invoked.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {Function} func The function to attempt.
         * @param {...*} [args] The arguments to invoke `func` with.
         * @returns {*} Returns the `func` result or error object.
         * @example
         *
         * // Avoid throwing errors for invalid selectors.
         * var elements = _.attempt(function(selector) {
         *   return document.querySelectorAll(selector);
         * }, '>_>');
         *
         * if (_.isError(elements)) {
         *   elements = [];
         * }
         */
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined$1, args);
          } catch (e) {
            return isError(e) ? e : new Error(e);
          }
        });

        /**
         * Binds methods of an object to the object itself, overwriting the existing
         * method.
         *
         * **Note:** This method doesn't set the "length" property of bound functions.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {Object} object The object to bind and assign the bound methods to.
         * @param {...(string|string[])} methodNames The object method names to bind.
         * @returns {Object} Returns `object`.
         * @example
         *
         * var view = {
         *   'label': 'docs',
         *   'click': function() {
         *     console.log('clicked ' + this.label);
         *   }
         * };
         *
         * _.bindAll(view, ['click']);
         * jQuery(element).on('click', view.click);
         * // => Logs 'clicked docs' when clicked.
         */
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });

        /**
         * Creates a function that iterates over `pairs` and invokes the corresponding
         * function of the first predicate to return truthy. The predicate-function
         * pairs are invoked with the `this` binding and arguments of the created
         * function.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {Array} pairs The predicate-function pairs.
         * @returns {Function} Returns the new composite function.
         * @example
         *
         * var func = _.cond([
         *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
         *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
         *   [_.stubTrue,                      _.constant('no match')]
         * ]);
         *
         * func({ 'a': 1, 'b': 2 });
         * // => 'matches A'
         *
         * func({ 'a': 0, 'b': 1 });
         * // => 'matches B'
         *
         * func({ 'a': '1', 'b': '2' });
         * // => 'no match'
         */
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length,
              toIteratee = getIteratee();

          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });

          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }

        /**
         * Creates a function that invokes the predicate properties of `source` with
         * the corresponding property values of a given object, returning `true` if
         * all predicates return truthy, else `false`.
         *
         * **Note:** The created function is equivalent to `_.conformsTo` with
         * `source` partially applied.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {Object} source The object of property predicates to conform to.
         * @returns {Function} Returns the new spec function.
         * @example
         *
         * var objects = [
         *   { 'a': 2, 'b': 1 },
         *   { 'a': 1, 'b': 2 }
         * ];
         *
         * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
         * // => [{ 'a': 1, 'b': 2 }]
         */
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }

        /**
         * Creates a function that returns `value`.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {*} value The value to return from the new function.
         * @returns {Function} Returns the new constant function.
         * @example
         *
         * var objects = _.times(2, _.constant({ 'a': 1 }));
         *
         * console.log(objects);
         * // => [{ 'a': 1 }, { 'a': 1 }]
         *
         * console.log(objects[0] === objects[1]);
         * // => true
         */
        function constant(value) {
          return function() {
            return value;
          };
        }

        /**
         * Checks `value` to determine whether a default value should be returned in
         * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
         * or `undefined`.
         *
         * @static
         * @memberOf _
         * @since 4.14.0
         * @category Util
         * @param {*} value The value to check.
         * @param {*} defaultValue The default value.
         * @returns {*} Returns the resolved value.
         * @example
         *
         * _.defaultTo(1, 10);
         * // => 1
         *
         * _.defaultTo(undefined, 10);
         * // => 10
         */
        function defaultTo(value, defaultValue) {
          return (value == null || value !== value) ? defaultValue : value;
        }

        /**
         * Creates a function that returns the result of invoking the given functions
         * with the `this` binding of the created function, where each successive
         * invocation is supplied the return value of the previous.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {...(Function|Function[])} [funcs] The functions to invoke.
         * @returns {Function} Returns the new composite function.
         * @see _.flowRight
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var addSquare = _.flow([_.add, square]);
         * addSquare(1, 2);
         * // => 9
         */
        var flow = createFlow();

        /**
         * This method is like `_.flow` except that it creates a function that
         * invokes the given functions from right to left.
         *
         * @static
         * @since 3.0.0
         * @memberOf _
         * @category Util
         * @param {...(Function|Function[])} [funcs] The functions to invoke.
         * @returns {Function} Returns the new composite function.
         * @see _.flow
         * @example
         *
         * function square(n) {
         *   return n * n;
         * }
         *
         * var addSquare = _.flowRight([square, _.add]);
         * addSquare(1, 2);
         * // => 9
         */
        var flowRight = createFlow(true);

        /**
         * This method returns the first argument it receives.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {*} value Any value.
         * @returns {*} Returns `value`.
         * @example
         *
         * var object = { 'a': 1 };
         *
         * console.log(_.identity(object) === object);
         * // => true
         */
        function identity(value) {
          return value;
        }

        /**
         * Creates a function that invokes `func` with the arguments of the created
         * function. If `func` is a property name, the created function returns the
         * property value for a given element. If `func` is an array or object, the
         * created function returns `true` for elements that contain the equivalent
         * source properties, otherwise it returns `false`.
         *
         * @static
         * @since 4.0.0
         * @memberOf _
         * @category Util
         * @param {*} [func=_.identity] The value to convert to a callback.
         * @returns {Function} Returns the callback.
         * @example
         *
         * var users = [
         *   { 'user': 'barney', 'age': 36, 'active': true },
         *   { 'user': 'fred',   'age': 40, 'active': false }
         * ];
         *
         * // The `_.matches` iteratee shorthand.
         * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
         * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
         *
         * // The `_.matchesProperty` iteratee shorthand.
         * _.filter(users, _.iteratee(['user', 'fred']));
         * // => [{ 'user': 'fred', 'age': 40 }]
         *
         * // The `_.property` iteratee shorthand.
         * _.map(users, _.iteratee('user'));
         * // => ['barney', 'fred']
         *
         * // Create custom iteratee shorthands.
         * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
         *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
         *     return func.test(string);
         *   };
         * });
         *
         * _.filter(['abc', 'def'], /ef/);
         * // => ['def']
         */
        function iteratee(func) {
          return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
        }

        /**
         * Creates a function that performs a partial deep comparison between a given
         * object and `source`, returning `true` if the given object has equivalent
         * property values, else `false`.
         *
         * **Note:** The created function is equivalent to `_.isMatch` with `source`
         * partially applied.
         *
         * Partial comparisons will match empty array and empty object `source`
         * values against any array or object value, respectively. See `_.isEqual`
         * for a list of supported value comparisons.
         *
         * **Note:** Multiple values can be checked by combining several matchers
         * using `_.overSome`
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {Object} source The object of property values to match.
         * @returns {Function} Returns the new spec function.
         * @example
         *
         * var objects = [
         *   { 'a': 1, 'b': 2, 'c': 3 },
         *   { 'a': 4, 'b': 5, 'c': 6 }
         * ];
         *
         * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
         * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
         *
         * // Checking for several possible values
         * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
         * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
         */
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }

        /**
         * Creates a function that performs a partial deep comparison between the
         * value at `path` of a given object to `srcValue`, returning `true` if the
         * object value is equivalent, else `false`.
         *
         * **Note:** Partial comparisons will match empty array and empty object
         * `srcValue` values against any array or object value, respectively. See
         * `_.isEqual` for a list of supported value comparisons.
         *
         * **Note:** Multiple values can be checked by combining several matchers
         * using `_.overSome`
         *
         * @static
         * @memberOf _
         * @since 3.2.0
         * @category Util
         * @param {Array|string} path The path of the property to get.
         * @param {*} srcValue The value to match.
         * @returns {Function} Returns the new spec function.
         * @example
         *
         * var objects = [
         *   { 'a': 1, 'b': 2, 'c': 3 },
         *   { 'a': 4, 'b': 5, 'c': 6 }
         * ];
         *
         * _.find(objects, _.matchesProperty('a', 4));
         * // => { 'a': 4, 'b': 5, 'c': 6 }
         *
         * // Checking for several possible values
         * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
         * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
         */
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }

        /**
         * Creates a function that invokes the method at `path` of a given object.
         * Any additional arguments are provided to the invoked method.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Util
         * @param {Array|string} path The path of the method to invoke.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {Function} Returns the new invoker function.
         * @example
         *
         * var objects = [
         *   { 'a': { 'b': _.constant(2) } },
         *   { 'a': { 'b': _.constant(1) } }
         * ];
         *
         * _.map(objects, _.method('a.b'));
         * // => [2, 1]
         *
         * _.map(objects, _.method(['a', 'b']));
         * // => [2, 1]
         */
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });

        /**
         * The opposite of `_.method`; this method creates a function that invokes
         * the method at a given path of `object`. Any additional arguments are
         * provided to the invoked method.
         *
         * @static
         * @memberOf _
         * @since 3.7.0
         * @category Util
         * @param {Object} object The object to query.
         * @param {...*} [args] The arguments to invoke the method with.
         * @returns {Function} Returns the new invoker function.
         * @example
         *
         * var array = _.times(3, _.constant),
         *     object = { 'a': array, 'b': array, 'c': array };
         *
         * _.map(['a[2]', 'c[0]'], _.methodOf(object));
         * // => [2, 0]
         *
         * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
         * // => [2, 0]
         */
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });

        /**
         * Adds all own enumerable string keyed function properties of a source
         * object to the destination object. If `object` is a function, then methods
         * are added to its prototype as well.
         *
         * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
         * avoid conflicts caused by modifying the original.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {Function|Object} [object=lodash] The destination object.
         * @param {Object} source The object of functions to add.
         * @param {Object} [options={}] The options object.
         * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
         * @returns {Function|Object} Returns `object`.
         * @example
         *
         * function vowels(string) {
         *   return _.filter(string, function(v) {
         *     return /[aeiou]/i.test(v);
         *   });
         * }
         *
         * _.mixin({ 'vowels': vowels });
         * _.vowels('fred');
         * // => ['e']
         *
         * _('fred').vowels().value();
         * // => ['e']
         *
         * _.mixin({ 'vowels': vowels }, { 'chain': false });
         * _('fred').vowels();
         * // => ['e']
         */
        function mixin(object, source, options) {
          var props = keys(source),
              methodNames = baseFunctions(source, props);

          if (options == null &&
              !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
              isFunc = isFunction(object);

          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain || chainAll) {
                  var result = object(this.__wrapped__),
                      actions = result.__actions__ = copyArray(this.__actions__);

                  actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                  result.__chain__ = chainAll;
                  return result;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });

          return object;
        }

        /**
         * Reverts the `_` variable to its previous value and returns a reference to
         * the `lodash` function.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @returns {Function} Returns the `lodash` function.
         * @example
         *
         * var lodash = _.noConflict();
         */
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }

        /**
         * This method returns `undefined`.
         *
         * @static
         * @memberOf _
         * @since 2.3.0
         * @category Util
         * @example
         *
         * _.times(2, _.noop);
         * // => [undefined, undefined]
         */
        function noop() {
          // No operation performed.
        }

        /**
         * Creates a function that gets the argument at index `n`. If `n` is negative,
         * the nth argument from the end is returned.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {number} [n=0] The index of the argument to return.
         * @returns {Function} Returns the new pass-thru function.
         * @example
         *
         * var func = _.nthArg(1);
         * func('a', 'b', 'c', 'd');
         * // => 'b'
         *
         * var func = _.nthArg(-2);
         * func('a', 'b', 'c', 'd');
         * // => 'c'
         */
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }

        /**
         * Creates a function that invokes `iteratees` with the arguments it receives
         * and returns their results.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {...(Function|Function[])} [iteratees=[_.identity]]
         *  The iteratees to invoke.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var func = _.over([Math.max, Math.min]);
         *
         * func(1, 2, 3, 4);
         * // => [4, 1]
         */
        var over = createOver(arrayMap);

        /**
         * Creates a function that checks if **all** of the `predicates` return
         * truthy when invoked with the arguments it receives.
         *
         * Following shorthands are possible for providing predicates.
         * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
         * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {...(Function|Function[])} [predicates=[_.identity]]
         *  The predicates to check.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var func = _.overEvery([Boolean, isFinite]);
         *
         * func('1');
         * // => true
         *
         * func(null);
         * // => false
         *
         * func(NaN);
         * // => false
         */
        var overEvery = createOver(arrayEvery);

        /**
         * Creates a function that checks if **any** of the `predicates` return
         * truthy when invoked with the arguments it receives.
         *
         * Following shorthands are possible for providing predicates.
         * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
         * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {...(Function|Function[])} [predicates=[_.identity]]
         *  The predicates to check.
         * @returns {Function} Returns the new function.
         * @example
         *
         * var func = _.overSome([Boolean, isFinite]);
         *
         * func('1');
         * // => true
         *
         * func(null);
         * // => true
         *
         * func(NaN);
         * // => false
         *
         * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
         * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
         */
        var overSome = createOver(arraySome);

        /**
         * Creates a function that returns the value at `path` of a given object.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {Array|string} path The path of the property to get.
         * @returns {Function} Returns the new accessor function.
         * @example
         *
         * var objects = [
         *   { 'a': { 'b': 2 } },
         *   { 'a': { 'b': 1 } }
         * ];
         *
         * _.map(objects, _.property('a.b'));
         * // => [2, 1]
         *
         * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
         * // => [1, 2]
         */
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }

        /**
         * The opposite of `_.property`; this method creates a function that returns
         * the value at a given path of `object`.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Util
         * @param {Object} object The object to query.
         * @returns {Function} Returns the new accessor function.
         * @example
         *
         * var array = [0, 1, 2],
         *     object = { 'a': array, 'b': array, 'c': array };
         *
         * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
         * // => [2, 0]
         *
         * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
         * // => [2, 0]
         */
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined$1 : baseGet(object, path);
          };
        }

        /**
         * Creates an array of numbers (positive and/or negative) progressing from
         * `start` up to, but not including, `end`. A step of `-1` is used if a negative
         * `start` is specified without an `end` or `step`. If `end` is not specified,
         * it's set to `start` with `start` then set to `0`.
         *
         * **Note:** JavaScript follows the IEEE-754 standard for resolving
         * floating-point values which can produce unexpected results.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @param {number} [step=1] The value to increment or decrement by.
         * @returns {Array} Returns the range of numbers.
         * @see _.inRange, _.rangeRight
         * @example
         *
         * _.range(4);
         * // => [0, 1, 2, 3]
         *
         * _.range(-4);
         * // => [0, -1, -2, -3]
         *
         * _.range(1, 5);
         * // => [1, 2, 3, 4]
         *
         * _.range(0, 20, 5);
         * // => [0, 5, 10, 15]
         *
         * _.range(0, -4, -1);
         * // => [0, -1, -2, -3]
         *
         * _.range(1, 4, 0);
         * // => [1, 1, 1]
         *
         * _.range(0);
         * // => []
         */
        var range = createRange();

        /**
         * This method is like `_.range` except that it populates values in
         * descending order.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {number} [start=0] The start of the range.
         * @param {number} end The end of the range.
         * @param {number} [step=1] The value to increment or decrement by.
         * @returns {Array} Returns the range of numbers.
         * @see _.inRange, _.range
         * @example
         *
         * _.rangeRight(4);
         * // => [3, 2, 1, 0]
         *
         * _.rangeRight(-4);
         * // => [-3, -2, -1, 0]
         *
         * _.rangeRight(1, 5);
         * // => [4, 3, 2, 1]
         *
         * _.rangeRight(0, 20, 5);
         * // => [15, 10, 5, 0]
         *
         * _.rangeRight(0, -4, -1);
         * // => [-3, -2, -1, 0]
         *
         * _.rangeRight(1, 4, 0);
         * // => [1, 1, 1]
         *
         * _.rangeRight(0);
         * // => []
         */
        var rangeRight = createRange(true);

        /**
         * This method returns a new empty array.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {Array} Returns the new empty array.
         * @example
         *
         * var arrays = _.times(2, _.stubArray);
         *
         * console.log(arrays);
         * // => [[], []]
         *
         * console.log(arrays[0] === arrays[1]);
         * // => false
         */
        function stubArray() {
          return [];
        }

        /**
         * This method returns `false`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `false`.
         * @example
         *
         * _.times(2, _.stubFalse);
         * // => [false, false]
         */
        function stubFalse() {
          return false;
        }

        /**
         * This method returns a new empty object.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {Object} Returns the new empty object.
         * @example
         *
         * var objects = _.times(2, _.stubObject);
         *
         * console.log(objects);
         * // => [{}, {}]
         *
         * console.log(objects[0] === objects[1]);
         * // => false
         */
        function stubObject() {
          return {};
        }

        /**
         * This method returns an empty string.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {string} Returns the empty string.
         * @example
         *
         * _.times(2, _.stubString);
         * // => ['', '']
         */
        function stubString() {
          return '';
        }

        /**
         * This method returns `true`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `true`.
         * @example
         *
         * _.times(2, _.stubTrue);
         * // => [true, true]
         */
        function stubTrue() {
          return true;
        }

        /**
         * Invokes the iteratee `n` times, returning an array of the results of
         * each invocation. The iteratee is invoked with one argument; (index).
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} [iteratee=_.identity] The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         * @example
         *
         * _.times(3, String);
         * // => ['0', '1', '2']
         *
         *  _.times(4, _.constant(0));
         * // => [0, 0, 0, 0]
         */
        function times(n, iteratee) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH,
              length = nativeMin(n, MAX_ARRAY_LENGTH);

          iteratee = getIteratee(iteratee);
          n -= MAX_ARRAY_LENGTH;

          var result = baseTimes(length, iteratee);
          while (++index < n) {
            iteratee(index);
          }
          return result;
        }

        /**
         * Converts `value` to a property path array.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Util
         * @param {*} value The value to convert.
         * @returns {Array} Returns the new property path array.
         * @example
         *
         * _.toPath('a.b.c');
         * // => ['a', 'b', 'c']
         *
         * _.toPath('a[0].b.c');
         * // => ['a', '0', 'b', 'c']
         */
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }

        /**
         * Generates a unique ID. If `prefix` is given, the ID is appended to it.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {string} [prefix=''] The value to prefix the ID with.
         * @returns {string} Returns the unique ID.
         * @example
         *
         * _.uniqueId('contact_');
         * // => 'contact_104'
         *
         * _.uniqueId();
         * // => '105'
         */
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }

        /*------------------------------------------------------------------------*/

        /**
         * Adds two numbers.
         *
         * @static
         * @memberOf _
         * @since 3.4.0
         * @category Math
         * @param {number} augend The first number in an addition.
         * @param {number} addend The second number in an addition.
         * @returns {number} Returns the total.
         * @example
         *
         * _.add(6, 4);
         * // => 10
         */
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);

        /**
         * Computes `number` rounded up to `precision`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Math
         * @param {number} number The number to round up.
         * @param {number} [precision=0] The precision to round up to.
         * @returns {number} Returns the rounded up number.
         * @example
         *
         * _.ceil(4.006);
         * // => 5
         *
         * _.ceil(6.004, 2);
         * // => 6.01
         *
         * _.ceil(6040, -2);
         * // => 6100
         */
        var ceil = createRound('ceil');

        /**
         * Divide two numbers.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Math
         * @param {number} dividend The first number in a division.
         * @param {number} divisor The second number in a division.
         * @returns {number} Returns the quotient.
         * @example
         *
         * _.divide(6, 4);
         * // => 1.5
         */
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);

        /**
         * Computes `number` rounded down to `precision`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Math
         * @param {number} number The number to round down.
         * @param {number} [precision=0] The precision to round down to.
         * @returns {number} Returns the rounded down number.
         * @example
         *
         * _.floor(4.006);
         * // => 4
         *
         * _.floor(0.046, 2);
         * // => 0.04
         *
         * _.floor(4060, -2);
         * // => 4000
         */
        var floor = createRound('floor');

        /**
         * Computes the maximum value of `array`. If `array` is empty or falsey,
         * `undefined` is returned.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {*} Returns the maximum value.
         * @example
         *
         * _.max([4, 2, 8, 6]);
         * // => 8
         *
         * _.max([]);
         * // => undefined
         */
        function max(array) {
          return (array && array.length)
            ? baseExtremum(array, identity, baseGt)
            : undefined$1;
        }

        /**
         * This method is like `_.max` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the criterion by which
         * the value is ranked. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {*} Returns the maximum value.
         * @example
         *
         * var objects = [{ 'n': 1 }, { 'n': 2 }];
         *
         * _.maxBy(objects, function(o) { return o.n; });
         * // => { 'n': 2 }
         *
         * // The `_.property` iteratee shorthand.
         * _.maxBy(objects, 'n');
         * // => { 'n': 2 }
         */
        function maxBy(array, iteratee) {
          return (array && array.length)
            ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
            : undefined$1;
        }

        /**
         * Computes the mean of the values in `array`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {number} Returns the mean.
         * @example
         *
         * _.mean([4, 2, 8, 6]);
         * // => 5
         */
        function mean(array) {
          return baseMean(array, identity);
        }

        /**
         * This method is like `_.mean` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the value to be averaged.
         * The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the mean.
         * @example
         *
         * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
         *
         * _.meanBy(objects, function(o) { return o.n; });
         * // => 5
         *
         * // The `_.property` iteratee shorthand.
         * _.meanBy(objects, 'n');
         * // => 5
         */
        function meanBy(array, iteratee) {
          return baseMean(array, getIteratee(iteratee, 2));
        }

        /**
         * Computes the minimum value of `array`. If `array` is empty or falsey,
         * `undefined` is returned.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {*} Returns the minimum value.
         * @example
         *
         * _.min([4, 2, 8, 6]);
         * // => 2
         *
         * _.min([]);
         * // => undefined
         */
        function min(array) {
          return (array && array.length)
            ? baseExtremum(array, identity, baseLt)
            : undefined$1;
        }

        /**
         * This method is like `_.min` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the criterion by which
         * the value is ranked. The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {*} Returns the minimum value.
         * @example
         *
         * var objects = [{ 'n': 1 }, { 'n': 2 }];
         *
         * _.minBy(objects, function(o) { return o.n; });
         * // => { 'n': 1 }
         *
         * // The `_.property` iteratee shorthand.
         * _.minBy(objects, 'n');
         * // => { 'n': 1 }
         */
        function minBy(array, iteratee) {
          return (array && array.length)
            ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
            : undefined$1;
        }

        /**
         * Multiply two numbers.
         *
         * @static
         * @memberOf _
         * @since 4.7.0
         * @category Math
         * @param {number} multiplier The first number in a multiplication.
         * @param {number} multiplicand The second number in a multiplication.
         * @returns {number} Returns the product.
         * @example
         *
         * _.multiply(6, 4);
         * // => 24
         */
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);

        /**
         * Computes `number` rounded to `precision`.
         *
         * @static
         * @memberOf _
         * @since 3.10.0
         * @category Math
         * @param {number} number The number to round.
         * @param {number} [precision=0] The precision to round to.
         * @returns {number} Returns the rounded number.
         * @example
         *
         * _.round(4.006);
         * // => 4
         *
         * _.round(4.006, 2);
         * // => 4.01
         *
         * _.round(4060, -2);
         * // => 4100
         */
        var round = createRound('round');

        /**
         * Subtract two numbers.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {number} minuend The first number in a subtraction.
         * @param {number} subtrahend The second number in a subtraction.
         * @returns {number} Returns the difference.
         * @example
         *
         * _.subtract(6, 4);
         * // => 2
         */
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);

        /**
         * Computes the sum of the values in `array`.
         *
         * @static
         * @memberOf _
         * @since 3.4.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @returns {number} Returns the sum.
         * @example
         *
         * _.sum([4, 2, 8, 6]);
         * // => 20
         */
        function sum(array) {
          return (array && array.length)
            ? baseSum(array, identity)
            : 0;
        }

        /**
         * This method is like `_.sum` except that it accepts `iteratee` which is
         * invoked for each element in `array` to generate the value to be summed.
         * The iteratee is invoked with one argument: (value).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Math
         * @param {Array} array The array to iterate over.
         * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
         * @returns {number} Returns the sum.
         * @example
         *
         * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
         *
         * _.sumBy(objects, function(o) { return o.n; });
         * // => 20
         *
         * // The `_.property` iteratee shorthand.
         * _.sumBy(objects, 'n');
         * // => 20
         */
        function sumBy(array, iteratee) {
          return (array && array.length)
            ? baseSum(array, getIteratee(iteratee, 2))
            : 0;
        }

        /*------------------------------------------------------------------------*/

        // Add methods that return wrapped values in chain sequences.
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;

        // Add aliases.
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;

        // Add methods to `lodash.prototype`.
        mixin(lodash, lodash);

        /*------------------------------------------------------------------------*/

        // Add methods that return unwrapped values in chain sequences.
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;

        // Add aliases.
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;

        mixin(lodash, (function() {
          var source = {};
          baseForOwn(lodash, function(func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }()), { 'chain': false });

        /*------------------------------------------------------------------------*/

        /**
         * The semantic version number.
         *
         * @static
         * @memberOf _
         * @type {string}
         */
        lodash.VERSION = VERSION;

        // Assign default placeholders.
        arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
          lodash[methodName].placeholder = lodash;
        });

        // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
        arrayEach(['drop', 'take'], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

            var result = (this.__filtered__ && !index)
              ? new LazyWrapper(this)
              : this.clone();

            if (result.__filtered__) {
              result.__takeCount__ = nativeMin(n, result.__takeCount__);
            } else {
              result.__views__.push({
                'size': nativeMin(n, MAX_ARRAY_LENGTH),
                'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
              });
            }
            return result;
          };

          LazyWrapper.prototype[methodName + 'Right'] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });

        // Add `LazyWrapper` methods that accept an `iteratee` value.
        arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
          var type = index + 1,
              isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

          LazyWrapper.prototype[methodName] = function(iteratee) {
            var result = this.clone();
            result.__iteratees__.push({
              'iteratee': getIteratee(iteratee, 3),
              'type': type
            });
            result.__filtered__ = result.__filtered__ || isFilter;
            return result;
          };
        });

        // Add `LazyWrapper` methods for `_.head` and `_.last`.
        arrayEach(['head', 'last'], function(methodName, index) {
          var takeName = 'take' + (index ? 'Right' : '');

          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });

        // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
        arrayEach(['initial', 'tail'], function(methodName, index) {
          var dropName = 'drop' + (index ? '' : 'Right');

          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });

        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };

        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };

        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };

        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == 'function') {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });

        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };

        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);

          var result = this;
          if (result.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result);
          }
          if (start < 0) {
            result = result.takeRight(-start);
          } else if (start) {
            result = result.drop(start);
          }
          if (end !== undefined$1) {
            end = toInteger(end);
            result = end < 0 ? result.dropRight(-end) : result.take(end - start);
          }
          return result;
        };

        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };

        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };

        // Add `LazyWrapper` methods to `lodash.prototype`.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
              isTaker = /^(?:head|last)$/.test(methodName),
              lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
              retUnwrapped = isTaker || /^find/.test(methodName);

          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function() {
            var value = this.__wrapped__,
                args = isTaker ? [1] : arguments,
                isLazy = value instanceof LazyWrapper,
                iteratee = args[0],
                useLazy = isLazy || isArray(value);

            var interceptor = function(value) {
              var result = lodashFunc.apply(lodash, arrayPush([value], args));
              return (isTaker && chainAll) ? result[0] : result;
            };

            if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
              // Avoid lazy use if the iteratee has a "length" value other than `1`.
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__,
                isHybrid = !!this.__actions__.length,
                isUnwrapped = retUnwrapped && !chainAll,
                onlyLazy = isLazy && !isHybrid;

            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result = func.apply(value, args);
              result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
              return new LodashWrapper(result, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result = this.thru(interceptor);
            return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
          };
        });

        // Add `Array` methods to `lodash.prototype`.
        arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
          var func = arrayProto[methodName],
              chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
              retUnwrapped = /^(?:pop|shift)$/.test(methodName);

          lodash.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value) {
              return func.apply(isArray(value) ? value : [], args);
            });
          };
        });

        // Map minified method names to their real names.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + '';
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ 'name': methodName, 'func': lodashFunc });
          }
        });

        realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
          'name': 'wrapper',
          'func': undefined$1
        }];

        // Add methods to `LazyWrapper`.
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;

        // Add chain sequence methods to the `lodash` wrapper.
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

        // Add lazy aliases.
        lodash.prototype.first = lodash.prototype.head;

        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      });

      /*--------------------------------------------------------------------------*/

      // Export lodash.
      var _ = runInContext();

      // Some AMD build optimizers, like r.js, check for condition patterns like:
      if (freeModule) {
        // Export for Node.js.
        (freeModule.exports = _)._ = _;
        // Export for CommonJS support.
        freeExports._ = _;
      }
      else {
        // Export to the global object.
        root._ = _;
      }
    }.call(commonjsGlobal));
    }(lodash$1, lodash$1.exports));

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */

    function listCacheClear$1() {
      this.__data__ = [];
      this.size = 0;
    }

    var _listCacheClear = listCacheClear$1;

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */

    function eq$3(value, other) {
      return value === other || (value !== value && other !== other);
    }

    var eq_1 = eq$3;

    var eq$2 = eq_1;

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf$4(array, key) {
      var length = array.length;
      while (length--) {
        if (eq$2(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    var _assocIndexOf = assocIndexOf$4;

    var assocIndexOf$3 = _assocIndexOf;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype;

    /** Built-in value references. */
    var splice = arrayProto.splice;

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete$1(key) {
      var data = this.__data__,
          index = assocIndexOf$3(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    var _listCacheDelete = listCacheDelete$1;

    var assocIndexOf$2 = _assocIndexOf;

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet$1(key) {
      var data = this.__data__,
          index = assocIndexOf$2(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    var _listCacheGet = listCacheGet$1;

    var assocIndexOf$1 = _assocIndexOf;

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas$1(key) {
      return assocIndexOf$1(this.__data__, key) > -1;
    }

    var _listCacheHas = listCacheHas$1;

    var assocIndexOf = _assocIndexOf;

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet$1(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    var _listCacheSet = listCacheSet$1;

    var listCacheClear = _listCacheClear,
        listCacheDelete = _listCacheDelete,
        listCacheGet = _listCacheGet,
        listCacheHas = _listCacheHas,
        listCacheSet = _listCacheSet;

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache$4(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `ListCache`.
    ListCache$4.prototype.clear = listCacheClear;
    ListCache$4.prototype['delete'] = listCacheDelete;
    ListCache$4.prototype.get = listCacheGet;
    ListCache$4.prototype.has = listCacheHas;
    ListCache$4.prototype.set = listCacheSet;

    var _ListCache = ListCache$4;

    var ListCache$3 = _ListCache;

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear$1() {
      this.__data__ = new ListCache$3;
      this.size = 0;
    }

    var _stackClear = stackClear$1;

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

    function stackDelete$1(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    var _stackDelete = stackDelete$1;

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */

    function stackGet$1(key) {
      return this.__data__.get(key);
    }

    var _stackGet = stackGet$1;

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

    function stackHas$1(key) {
      return this.__data__.has(key);
    }

    var _stackHas = stackHas$1;

    /** Detect free variable `global` from Node.js. */

    var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    var _freeGlobal = freeGlobal$1;

    var freeGlobal = _freeGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root$8 = freeGlobal || freeSelf || Function('return this')();

    var _root = root$8;

    var root$7 = _root;

    /** Built-in value references. */
    var Symbol$7 = root$7.Symbol;

    var _Symbol = Symbol$7;

    var Symbol$6 = _Symbol;

    /** Used for built-in method references. */
    var objectProto$g = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$d = objectProto$g.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString$1 = objectProto$g.toString;

    /** Built-in value references. */
    var symToStringTag$1 = Symbol$6 ? Symbol$6.toStringTag : undefined;

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag$1(value) {
      var isOwn = hasOwnProperty$d.call(value, symToStringTag$1),
          tag = value[symToStringTag$1];

      try {
        value[symToStringTag$1] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString$1.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag$1] = tag;
        } else {
          delete value[symToStringTag$1];
        }
      }
      return result;
    }

    var _getRawTag = getRawTag$1;

    /** Used for built-in method references. */

    var objectProto$f = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto$f.toString;

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString$1(value) {
      return nativeObjectToString.call(value);
    }

    var _objectToString = objectToString$1;

    var Symbol$5 = _Symbol,
        getRawTag = _getRawTag,
        objectToString = _objectToString;

    /** `Object#toString` result references. */
    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]';

    /** Built-in value references. */
    var symToStringTag = Symbol$5 ? Symbol$5.toStringTag : undefined;

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag$6(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    var _baseGetTag = baseGetTag$6;

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */

    function isObject$7(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    var isObject_1 = isObject$7;

    var baseGetTag$5 = _baseGetTag,
        isObject$6 = isObject_1;

    /** `Object#toString` result references. */
    var asyncTag = '[object AsyncFunction]',
        funcTag$2 = '[object Function]',
        genTag$1 = '[object GeneratorFunction]',
        proxyTag = '[object Proxy]';

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction$3(value) {
      if (!isObject$6(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag$5(value);
      return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
    }

    var isFunction_1 = isFunction$3;

    var root$6 = _root;

    /** Used to detect overreaching core-js shims. */
    var coreJsData$1 = root$6['__core-js_shared__'];

    var _coreJsData = coreJsData$1;

    var coreJsData = _coreJsData;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked$1(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    var _isMasked = isMasked$1;

    /** Used for built-in method references. */

    var funcProto$1 = Function.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$1 = funcProto$1.toString;

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource$2(func) {
      if (func != null) {
        try {
          return funcToString$1.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    var _toSource = toSource$2;

    var isFunction$2 = isFunction_1,
        isMasked = _isMasked,
        isObject$5 = isObject_1,
        toSource$1 = _toSource;

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used for built-in method references. */
    var funcProto = Function.prototype,
        objectProto$e = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty$c = objectProto$e.hasOwnProperty;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty$c).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative$1(value) {
      if (!isObject$5(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource$1(value));
    }

    var _baseIsNative = baseIsNative$1;

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */

    function getValue$1(object, key) {
      return object == null ? undefined : object[key];
    }

    var _getValue = getValue$1;

    var baseIsNative = _baseIsNative,
        getValue = _getValue;

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative$7(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    var _getNative = getNative$7;

    var getNative$6 = _getNative,
        root$5 = _root;

    /* Built-in method references that are verified to be native. */
    var Map$4 = getNative$6(root$5, 'Map');

    var _Map = Map$4;

    var getNative$5 = _getNative;

    /* Built-in method references that are verified to be native. */
    var nativeCreate$4 = getNative$5(Object, 'create');

    var _nativeCreate = nativeCreate$4;

    var nativeCreate$3 = _nativeCreate;

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear$1() {
      this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
      this.size = 0;
    }

    var _hashClear = hashClear$1;

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

    function hashDelete$1(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    var _hashDelete = hashDelete$1;

    var nativeCreate$2 = _nativeCreate;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

    /** Used for built-in method references. */
    var objectProto$d = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$b = objectProto$d.hasOwnProperty;

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet$1(key) {
      var data = this.__data__;
      if (nativeCreate$2) {
        var result = data[key];
        return result === HASH_UNDEFINED$2 ? undefined : result;
      }
      return hasOwnProperty$b.call(data, key) ? data[key] : undefined;
    }

    var _hashGet = hashGet$1;

    var nativeCreate$1 = _nativeCreate;

    /** Used for built-in method references. */
    var objectProto$c = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$a = objectProto$c.hasOwnProperty;

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas$1(key) {
      var data = this.__data__;
      return nativeCreate$1 ? (data[key] !== undefined) : hasOwnProperty$a.call(data, key);
    }

    var _hashHas = hashHas$1;

    var nativeCreate = _nativeCreate;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet$1(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
      return this;
    }

    var _hashSet = hashSet$1;

    var hashClear = _hashClear,
        hashDelete = _hashDelete,
        hashGet = _hashGet,
        hashHas = _hashHas,
        hashSet = _hashSet;

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash$1(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `Hash`.
    Hash$1.prototype.clear = hashClear;
    Hash$1.prototype['delete'] = hashDelete;
    Hash$1.prototype.get = hashGet;
    Hash$1.prototype.has = hashHas;
    Hash$1.prototype.set = hashSet;

    var _Hash = Hash$1;

    var Hash = _Hash,
        ListCache$2 = _ListCache,
        Map$3 = _Map;

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear$1() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map$3 || ListCache$2),
        'string': new Hash
      };
    }

    var _mapCacheClear = mapCacheClear$1;

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */

    function isKeyable$1(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    var _isKeyable = isKeyable$1;

    var isKeyable = _isKeyable;

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData$4(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    var _getMapData = getMapData$4;

    var getMapData$3 = _getMapData;

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete$1(key) {
      var result = getMapData$3(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    var _mapCacheDelete = mapCacheDelete$1;

    var getMapData$2 = _getMapData;

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet$1(key) {
      return getMapData$2(this, key).get(key);
    }

    var _mapCacheGet = mapCacheGet$1;

    var getMapData$1 = _getMapData;

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas$1(key) {
      return getMapData$1(this, key).has(key);
    }

    var _mapCacheHas = mapCacheHas$1;

    var getMapData = _getMapData;

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet$1(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    var _mapCacheSet = mapCacheSet$1;

    var mapCacheClear = _mapCacheClear,
        mapCacheDelete = _mapCacheDelete,
        mapCacheGet = _mapCacheGet,
        mapCacheHas = _mapCacheHas,
        mapCacheSet = _mapCacheSet;

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache$3(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `MapCache`.
    MapCache$3.prototype.clear = mapCacheClear;
    MapCache$3.prototype['delete'] = mapCacheDelete;
    MapCache$3.prototype.get = mapCacheGet;
    MapCache$3.prototype.has = mapCacheHas;
    MapCache$3.prototype.set = mapCacheSet;

    var _MapCache = MapCache$3;

    var ListCache$1 = _ListCache,
        Map$2 = _Map,
        MapCache$2 = _MapCache;

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE$1 = 200;

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet$1(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache$1) {
        var pairs = data.__data__;
        if (!Map$2 || (pairs.length < LARGE_ARRAY_SIZE$1 - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache$2(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    var _stackSet = stackSet$1;

    var ListCache = _ListCache,
        stackClear = _stackClear,
        stackDelete = _stackDelete,
        stackGet = _stackGet,
        stackHas = _stackHas,
        stackSet = _stackSet;

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack$3(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    // Add methods to `Stack`.
    Stack$3.prototype.clear = stackClear;
    Stack$3.prototype['delete'] = stackDelete;
    Stack$3.prototype.get = stackGet;
    Stack$3.prototype.has = stackHas;
    Stack$3.prototype.set = stackSet;

    var _Stack = Stack$3;

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */

    function arrayEach$3(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    var _arrayEach = arrayEach$3;

    var getNative$4 = _getNative;

    var defineProperty$2 = (function() {
      try {
        var func = getNative$4(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    var _defineProperty = defineProperty$2;

    var defineProperty$1 = _defineProperty;

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue$2(object, key, value) {
      if (key == '__proto__' && defineProperty$1) {
        defineProperty$1(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    var _baseAssignValue = baseAssignValue$2;

    var baseAssignValue$1 = _baseAssignValue,
        eq$1 = eq_1;

    /** Used for built-in method references. */
    var objectProto$b = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$9 = objectProto$b.hasOwnProperty;

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue$2(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty$9.call(object, key) && eq$1(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue$1(object, key, value);
      }
    }

    var _assignValue = assignValue$2;

    var assignValue$1 = _assignValue,
        baseAssignValue = _baseAssignValue;

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject$4(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue$1(object, key, newValue);
        }
      }
      return object;
    }

    var _copyObject = copyObject$4;

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */

    function baseTimes$1(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    var _baseTimes = baseTimes$1;

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */

    function isObjectLike$9(value) {
      return value != null && typeof value == 'object';
    }

    var isObjectLike_1 = isObjectLike$9;

    var baseGetTag$4 = _baseGetTag,
        isObjectLike$8 = isObjectLike_1;

    /** `Object#toString` result references. */
    var argsTag$3 = '[object Arguments]';

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments$1(value) {
      return isObjectLike$8(value) && baseGetTag$4(value) == argsTag$3;
    }

    var _baseIsArguments = baseIsArguments$1;

    var baseIsArguments = _baseIsArguments,
        isObjectLike$7 = isObjectLike_1;

    /** Used for built-in method references. */
    var objectProto$a = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$8 = objectProto$a.hasOwnProperty;

    /** Built-in value references. */
    var propertyIsEnumerable$1 = objectProto$a.propertyIsEnumerable;

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments$4 = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike$7(value) && hasOwnProperty$8.call(value, 'callee') &&
        !propertyIsEnumerable$1.call(value, 'callee');
    };

    var isArguments_1 = isArguments$4;

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */

    var isArray$h = Array.isArray;

    var isArray_1 = isArray$h;

    var isBuffer$5 = {exports: {}};

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */

    function stubFalse() {
      return false;
    }

    var stubFalse_1 = stubFalse;

    (function (module, exports) {
    var root = _root,
        stubFalse = stubFalse_1;

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    module.exports = isBuffer;
    }(isBuffer$5, isBuffer$5.exports));

    /** Used as references for various `Number` constants. */

    var MAX_SAFE_INTEGER$1 = 9007199254740991;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex$2(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER$1 : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    var _isIndex = isIndex$2;

    /** Used as references for various `Number` constants. */

    var MAX_SAFE_INTEGER = 9007199254740991;

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength$3(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    var isLength_1 = isLength$3;

    var baseGetTag$3 = _baseGetTag,
        isLength$2 = isLength_1,
        isObjectLike$6 = isObjectLike_1;

    /** `Object#toString` result references. */
    var argsTag$2 = '[object Arguments]',
        arrayTag$2 = '[object Array]',
        boolTag$3 = '[object Boolean]',
        dateTag$3 = '[object Date]',
        errorTag$2 = '[object Error]',
        funcTag$1 = '[object Function]',
        mapTag$7 = '[object Map]',
        numberTag$3 = '[object Number]',
        objectTag$3 = '[object Object]',
        regexpTag$3 = '[object RegExp]',
        setTag$7 = '[object Set]',
        stringTag$4 = '[object String]',
        weakMapTag$2 = '[object WeakMap]';

    var arrayBufferTag$3 = '[object ArrayBuffer]',
        dataViewTag$4 = '[object DataView]',
        float32Tag$2 = '[object Float32Array]',
        float64Tag$2 = '[object Float64Array]',
        int8Tag$2 = '[object Int8Array]',
        int16Tag$2 = '[object Int16Array]',
        int32Tag$2 = '[object Int32Array]',
        uint8Tag$2 = '[object Uint8Array]',
        uint8ClampedTag$2 = '[object Uint8ClampedArray]',
        uint16Tag$2 = '[object Uint16Array]',
        uint32Tag$2 = '[object Uint32Array]';

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
    typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
    typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
    typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
    typedArrayTags[uint32Tag$2] = true;
    typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =
    typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] =
    typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] =
    typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] =
    typedArrayTags[mapTag$7] = typedArrayTags[numberTag$3] =
    typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$3] =
    typedArrayTags[setTag$7] = typedArrayTags[stringTag$4] =
    typedArrayTags[weakMapTag$2] = false;

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray$1(value) {
      return isObjectLike$6(value) &&
        isLength$2(value.length) && !!typedArrayTags[baseGetTag$3(value)];
    }

    var _baseIsTypedArray = baseIsTypedArray$1;

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */

    function baseUnary$3(func) {
      return function(value) {
        return func(value);
      };
    }

    var _baseUnary = baseUnary$3;

    var _nodeUtil = {exports: {}};

    (function (module, exports) {
    var freeGlobal = _freeGlobal;

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        }

        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());

    module.exports = nodeUtil;
    }(_nodeUtil, _nodeUtil.exports));

    var baseIsTypedArray = _baseIsTypedArray,
        baseUnary$2 = _baseUnary,
        nodeUtil$2 = _nodeUtil.exports;

    /* Node.js helper references. */
    var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray$4 = nodeIsTypedArray ? baseUnary$2(nodeIsTypedArray) : baseIsTypedArray;

    var isTypedArray_1 = isTypedArray$4;

    var baseTimes = _baseTimes,
        isArguments$3 = isArguments_1,
        isArray$g = isArray_1,
        isBuffer$4 = isBuffer$5.exports,
        isIndex$1 = _isIndex,
        isTypedArray$3 = isTypedArray_1;

    /** Used for built-in method references. */
    var objectProto$9 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$7 = objectProto$9.hasOwnProperty;

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys$2(value, inherited) {
      var isArr = isArray$g(value),
          isArg = !isArr && isArguments$3(value),
          isBuff = !isArr && !isArg && isBuffer$4(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray$3(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty$7.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex$1(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    var _arrayLikeKeys = arrayLikeKeys$2;

    /** Used for built-in method references. */

    var objectProto$8 = Object.prototype;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype$4(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$8;

      return value === proto;
    }

    var _isPrototype = isPrototype$4;

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */

    function overArg$2(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    var _overArg = overArg$2;

    var overArg$1 = _overArg;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeKeys$1 = overArg$1(Object.keys, Object);

    var _nativeKeys = nativeKeys$1;

    var isPrototype$3 = _isPrototype,
        nativeKeys = _nativeKeys;

    /** Used for built-in method references. */
    var objectProto$7 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys$3(object) {
      if (!isPrototype$3(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty$6.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    var _baseKeys = baseKeys$3;

    var isFunction$1 = isFunction_1,
        isLength$1 = isLength_1;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike$7(value) {
      return value != null && isLength$1(value.length) && !isFunction$1(value);
    }

    var isArrayLike_1 = isArrayLike$7;

    var arrayLikeKeys$1 = _arrayLikeKeys,
        baseKeys$2 = _baseKeys,
        isArrayLike$6 = isArrayLike_1;

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys$6(object) {
      return isArrayLike$6(object) ? arrayLikeKeys$1(object) : baseKeys$2(object);
    }

    var keys_1 = keys$6;

    var copyObject$3 = _copyObject,
        keys$5 = keys_1;

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign$1(object, source) {
      return object && copyObject$3(source, keys$5(source), object);
    }

    var _baseAssign = baseAssign$1;

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */

    function nativeKeysIn$1(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    var _nativeKeysIn = nativeKeysIn$1;

    var isObject$4 = isObject_1,
        isPrototype$2 = _isPrototype,
        nativeKeysIn = _nativeKeysIn;

    /** Used for built-in method references. */
    var objectProto$6 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn$1(object) {
      if (!isObject$4(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype$2(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty$5.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    var _baseKeysIn = baseKeysIn$1;

    var arrayLikeKeys = _arrayLikeKeys,
        baseKeysIn = _baseKeysIn,
        isArrayLike$5 = isArrayLike_1;

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn$3(object) {
      return isArrayLike$5(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    var keysIn_1 = keysIn$3;

    var copyObject$2 = _copyObject,
        keysIn$2 = keysIn_1;

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn$1(object, source) {
      return object && copyObject$2(source, keysIn$2(source), object);
    }

    var _baseAssignIn = baseAssignIn$1;

    var _cloneBuffer = {exports: {}};

    (function (module, exports) {
    var root = _root;

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    module.exports = cloneBuffer;
    }(_cloneBuffer, _cloneBuffer.exports));

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */

    function copyArray$1(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    var _copyArray = copyArray$1;

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */

    function arrayFilter$2(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    var _arrayFilter = arrayFilter$2;

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */

    function stubArray$2() {
      return [];
    }

    var stubArray_1 = stubArray$2;

    var arrayFilter$1 = _arrayFilter,
        stubArray$1 = stubArray_1;

    /** Used for built-in method references. */
    var objectProto$5 = Object.prototype;

    /** Built-in value references. */
    var propertyIsEnumerable = objectProto$5.propertyIsEnumerable;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter$1(nativeGetSymbols$1(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    var _getSymbols = getSymbols$3;

    var copyObject$1 = _copyObject,
        getSymbols$2 = _getSymbols;

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols$1(source, object) {
      return copyObject$1(source, getSymbols$2(source), object);
    }

    var _copySymbols = copySymbols$1;

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */

    function arrayPush$3(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    var _arrayPush = arrayPush$3;

    var overArg = _overArg;

    /** Built-in value references. */
    var getPrototype$3 = overArg(Object.getPrototypeOf, Object);

    var _getPrototype = getPrototype$3;

    var arrayPush$2 = _arrayPush,
        getPrototype$2 = _getPrototype,
        getSymbols$1 = _getSymbols,
        stubArray = stubArray_1;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush$2(result, getSymbols$1(object));
        object = getPrototype$2(object);
      }
      return result;
    };

    var _getSymbolsIn = getSymbolsIn$2;

    var copyObject = _copyObject,
        getSymbolsIn$1 = _getSymbolsIn;

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn$1(source, object) {
      return copyObject(source, getSymbolsIn$1(source), object);
    }

    var _copySymbolsIn = copySymbolsIn$1;

    var arrayPush$1 = _arrayPush,
        isArray$f = isArray_1;

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray$f(object) ? result : arrayPush$1(result, symbolsFunc(object));
    }

    var _baseGetAllKeys = baseGetAllKeys$2;

    var baseGetAllKeys$1 = _baseGetAllKeys,
        getSymbols = _getSymbols,
        keys$4 = keys_1;

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys$2(object) {
      return baseGetAllKeys$1(object, keys$4, getSymbols);
    }

    var _getAllKeys = getAllKeys$2;

    var baseGetAllKeys = _baseGetAllKeys,
        getSymbolsIn = _getSymbolsIn,
        keysIn$1 = keysIn_1;

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn$1(object) {
      return baseGetAllKeys(object, keysIn$1, getSymbolsIn);
    }

    var _getAllKeysIn = getAllKeysIn$1;

    var getNative$3 = _getNative,
        root$4 = _root;

    /* Built-in method references that are verified to be native. */
    var DataView$1 = getNative$3(root$4, 'DataView');

    var _DataView = DataView$1;

    var getNative$2 = _getNative,
        root$3 = _root;

    /* Built-in method references that are verified to be native. */
    var Promise$2 = getNative$2(root$3, 'Promise');

    var _Promise = Promise$2;

    var getNative$1 = _getNative,
        root$2 = _root;

    /* Built-in method references that are verified to be native. */
    var Set$3 = getNative$1(root$2, 'Set');

    var _Set = Set$3;

    var getNative = _getNative,
        root$1 = _root;

    /* Built-in method references that are verified to be native. */
    var WeakMap$1 = getNative(root$1, 'WeakMap');

    var _WeakMap = WeakMap$1;

    var DataView = _DataView,
        Map$1 = _Map,
        Promise$1 = _Promise,
        Set$2 = _Set,
        WeakMap = _WeakMap,
        baseGetTag$2 = _baseGetTag,
        toSource = _toSource;

    /** `Object#toString` result references. */
    var mapTag$6 = '[object Map]',
        objectTag$2 = '[object Object]',
        promiseTag = '[object Promise]',
        setTag$6 = '[object Set]',
        weakMapTag$1 = '[object WeakMap]';

    var dataViewTag$3 = '[object DataView]';

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map$1),
        promiseCtorString = toSource(Promise$1),
        setCtorString = toSource(Set$2),
        weakMapCtorString = toSource(WeakMap);

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag$6 = baseGetTag$2;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag$6(new DataView(new ArrayBuffer(1))) != dataViewTag$3) ||
        (Map$1 && getTag$6(new Map$1) != mapTag$6) ||
        (Promise$1 && getTag$6(Promise$1.resolve()) != promiseTag) ||
        (Set$2 && getTag$6(new Set$2) != setTag$6) ||
        (WeakMap && getTag$6(new WeakMap) != weakMapTag$1)) {
      getTag$6 = function(value) {
        var result = baseGetTag$2(value),
            Ctor = result == objectTag$2 ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag$3;
            case mapCtorString: return mapTag$6;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag$6;
            case weakMapCtorString: return weakMapTag$1;
          }
        }
        return result;
      };
    }

    var _getTag = getTag$6;

    /** Used for built-in method references. */

    var objectProto$4 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$4 = objectProto$4.hasOwnProperty;

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray$1(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty$4.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    var _initCloneArray = initCloneArray$1;

    var root = _root;

    /** Built-in value references. */
    var Uint8Array$2 = root.Uint8Array;

    var _Uint8Array = Uint8Array$2;

    var Uint8Array$1 = _Uint8Array;

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer$3(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
      return result;
    }

    var _cloneArrayBuffer = cloneArrayBuffer$3;

    var cloneArrayBuffer$2 = _cloneArrayBuffer;

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView$1(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$2(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    var _cloneDataView = cloneDataView$1;

    /** Used to match `RegExp` flags from their coerced string values. */

    var reFlags = /\w*$/;

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp$1(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    var _cloneRegExp = cloneRegExp$1;

    var Symbol$4 = _Symbol;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$2 = Symbol$4 ? Symbol$4.prototype : undefined,
        symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol$1(symbol) {
      return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
    }

    var _cloneSymbol = cloneSymbol$1;

    var cloneArrayBuffer$1 = _cloneArrayBuffer;

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray$1(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$1(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    var _cloneTypedArray = cloneTypedArray$1;

    var cloneArrayBuffer = _cloneArrayBuffer,
        cloneDataView = _cloneDataView,
        cloneRegExp = _cloneRegExp,
        cloneSymbol = _cloneSymbol,
        cloneTypedArray = _cloneTypedArray;

    /** `Object#toString` result references. */
    var boolTag$2 = '[object Boolean]',
        dateTag$2 = '[object Date]',
        mapTag$5 = '[object Map]',
        numberTag$2 = '[object Number]',
        regexpTag$2 = '[object RegExp]',
        setTag$5 = '[object Set]',
        stringTag$3 = '[object String]',
        symbolTag$3 = '[object Symbol]';

    var arrayBufferTag$2 = '[object ArrayBuffer]',
        dataViewTag$2 = '[object DataView]',
        float32Tag$1 = '[object Float32Array]',
        float64Tag$1 = '[object Float64Array]',
        int8Tag$1 = '[object Int8Array]',
        int16Tag$1 = '[object Int16Array]',
        int32Tag$1 = '[object Int32Array]',
        uint8Tag$1 = '[object Uint8Array]',
        uint8ClampedTag$1 = '[object Uint8ClampedArray]',
        uint16Tag$1 = '[object Uint16Array]',
        uint32Tag$1 = '[object Uint32Array]';

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag$1(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag$2:
          return cloneArrayBuffer(object);

        case boolTag$2:
        case dateTag$2:
          return new Ctor(+object);

        case dataViewTag$2:
          return cloneDataView(object, isDeep);

        case float32Tag$1: case float64Tag$1:
        case int8Tag$1: case int16Tag$1: case int32Tag$1:
        case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
          return cloneTypedArray(object, isDeep);

        case mapTag$5:
          return new Ctor;

        case numberTag$2:
        case stringTag$3:
          return new Ctor(object);

        case regexpTag$2:
          return cloneRegExp(object);

        case setTag$5:
          return new Ctor;

        case symbolTag$3:
          return cloneSymbol(object);
      }
    }

    var _initCloneByTag = initCloneByTag$1;

    var isObject$3 = isObject_1;

    /** Built-in value references. */
    var objectCreate = Object.create;

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate$2 = (function() {
      function object() {}
      return function(proto) {
        if (!isObject$3(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    var _baseCreate = baseCreate$2;

    var baseCreate$1 = _baseCreate,
        getPrototype$1 = _getPrototype,
        isPrototype$1 = _isPrototype;

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject$1(object) {
      return (typeof object.constructor == 'function' && !isPrototype$1(object))
        ? baseCreate$1(getPrototype$1(object))
        : {};
    }

    var _initCloneObject = initCloneObject$1;

    var getTag$5 = _getTag,
        isObjectLike$5 = isObjectLike_1;

    /** `Object#toString` result references. */
    var mapTag$4 = '[object Map]';

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap$1(value) {
      return isObjectLike$5(value) && getTag$5(value) == mapTag$4;
    }

    var _baseIsMap = baseIsMap$1;

    var baseIsMap = _baseIsMap,
        baseUnary$1 = _baseUnary,
        nodeUtil$1 = _nodeUtil.exports;

    /* Node.js helper references. */
    var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap$1 = nodeIsMap ? baseUnary$1(nodeIsMap) : baseIsMap;

    var isMap_1 = isMap$1;

    var getTag$4 = _getTag,
        isObjectLike$4 = isObjectLike_1;

    /** `Object#toString` result references. */
    var setTag$4 = '[object Set]';

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet$1(value) {
      return isObjectLike$4(value) && getTag$4(value) == setTag$4;
    }

    var _baseIsSet = baseIsSet$1;

    var baseIsSet = _baseIsSet,
        baseUnary = _baseUnary,
        nodeUtil = _nodeUtil.exports;

    /* Node.js helper references. */
    var nodeIsSet = nodeUtil && nodeUtil.isSet;

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    var isSet_1 = isSet$1;

    var Stack$2 = _Stack,
        arrayEach$2 = _arrayEach,
        assignValue = _assignValue,
        baseAssign = _baseAssign,
        baseAssignIn = _baseAssignIn,
        cloneBuffer = _cloneBuffer.exports,
        copyArray = _copyArray,
        copySymbols = _copySymbols,
        copySymbolsIn = _copySymbolsIn,
        getAllKeys$1 = _getAllKeys,
        getAllKeysIn = _getAllKeysIn,
        getTag$3 = _getTag,
        initCloneArray = _initCloneArray,
        initCloneByTag = _initCloneByTag,
        initCloneObject = _initCloneObject,
        isArray$e = isArray_1,
        isBuffer$3 = isBuffer$5.exports,
        isMap = isMap_1,
        isObject$2 = isObject_1,
        isSet = isSet_1,
        keys$3 = keys_1,
        keysIn = keysIn_1;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG$1 = 4;

    /** `Object#toString` result references. */
    var argsTag$1 = '[object Arguments]',
        arrayTag$1 = '[object Array]',
        boolTag$1 = '[object Boolean]',
        dateTag$1 = '[object Date]',
        errorTag$1 = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag$3 = '[object Map]',
        numberTag$1 = '[object Number]',
        objectTag$1 = '[object Object]',
        regexpTag$1 = '[object RegExp]',
        setTag$3 = '[object Set]',
        stringTag$2 = '[object String]',
        symbolTag$2 = '[object Symbol]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag$1 = '[object ArrayBuffer]',
        dataViewTag$1 = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] =
    cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] =
    cloneableTags[boolTag$1] = cloneableTags[dateTag$1] =
    cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    cloneableTags[int32Tag] = cloneableTags[mapTag$3] =
    cloneableTags[numberTag$1] = cloneableTags[objectTag$1] =
    cloneableTags[regexpTag$1] = cloneableTags[setTag$3] =
    cloneableTags[stringTag$2] = cloneableTags[symbolTag$2] =
    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag$1] = cloneableTags[funcTag] =
    cloneableTags[weakMapTag] = false;

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone$1(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG$1;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject$2(value)) {
        return value;
      }
      var isArr = isArray$e(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag$3(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer$3(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag$1 || tag == argsTag$1 || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack$2);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone$1(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone$1(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys$1)
        : (isFlat ? keysIn : keys$3);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach$2(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone$1(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    var _baseClone = baseClone$1;

    var baseClone = _baseClone;

    /** Used to compose bitmasks for cloning. */
    var CLONE_SYMBOLS_FLAG = 4;

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    var clone_1 = clone;

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */

    function constant$1(value) {
      return function() {
        return value;
      };
    }

    var constant_1 = constant$1;

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */

    function createBaseFor$1(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    var _createBaseFor = createBaseFor$1;

    var createBaseFor = _createBaseFor;

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor$1 = createBaseFor();

    var _baseFor = baseFor$1;

    var baseFor = _baseFor,
        keys$2 = keys_1;

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn$2(object, iteratee) {
      return object && baseFor(object, iteratee, keys$2);
    }

    var _baseForOwn = baseForOwn$2;

    var isArrayLike$4 = isArrayLike_1;

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach$1(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike$4(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    var _createBaseEach = createBaseEach$1;

    var baseForOwn$1 = _baseForOwn,
        createBaseEach = _createBaseEach;

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach$4 = createBaseEach(baseForOwn$1);

    var _baseEach = baseEach$4;

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */

    function identity$4(value) {
      return value;
    }

    var identity_1 = identity$4;

    var identity$3 = identity_1;

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction$1(value) {
      return typeof value == 'function' ? value : identity$3;
    }

    var _castFunction = castFunction$1;

    var arrayEach$1 = _arrayEach,
        baseEach$3 = _baseEach,
        castFunction = _castFunction,
        isArray$d = isArray_1;

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray$d(collection) ? arrayEach$1 : baseEach$3;
      return func(collection, castFunction(iteratee));
    }

    var forEach_1 = forEach;

    var each = forEach_1;

    var baseEach$2 = _baseEach;

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter$1(collection, predicate) {
      var result = [];
      baseEach$2(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    var _baseFilter = baseFilter$1;

    /** Used to stand-in for `undefined` hash values. */

    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd$1(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    var _setCacheAdd = setCacheAdd$1;

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */

    function setCacheHas$1(value) {
      return this.__data__.has(value);
    }

    var _setCacheHas = setCacheHas$1;

    var MapCache$1 = _MapCache,
        setCacheAdd = _setCacheAdd,
        setCacheHas = _setCacheHas;

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache$2(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache$1;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    // Add methods to `SetCache`.
    SetCache$2.prototype.add = SetCache$2.prototype.push = setCacheAdd;
    SetCache$2.prototype.has = setCacheHas;

    var _SetCache = SetCache$2;

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */

    function arraySome$1(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    var _arraySome = arraySome$1;

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

    function cacheHas$2(cache, key) {
      return cache.has(key);
    }

    var _cacheHas = cacheHas$2;

    var SetCache$1 = _SetCache,
        arraySome = _arraySome,
        cacheHas$1 = _cacheHas;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$5 = 1,
        COMPARE_UNORDERED_FLAG$3 = 2;

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new SetCache$1 : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas$1(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    var _equalArrays = equalArrays$2;

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */

    function mapToArray$1(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    var _mapToArray = mapToArray$1;

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */

    function setToArray$3(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    var _setToArray = setToArray$3;

    var Symbol$3 = _Symbol,
        Uint8Array = _Uint8Array,
        eq = eq_1,
        equalArrays$1 = _equalArrays,
        mapToArray = _mapToArray,
        setToArray$2 = _setToArray;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$4 = 1,
        COMPARE_UNORDERED_FLAG$2 = 2;

    /** `Object#toString` result references. */
    var boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        mapTag$2 = '[object Map]',
        numberTag = '[object Number]',
        regexpTag = '[object RegExp]',
        setTag$2 = '[object Set]',
        stringTag$1 = '[object String]',
        symbolTag$1 = '[object Symbol]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]';

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$1 = Symbol$3 ? Symbol$3.prototype : undefined,
        symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : undefined;

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag$1:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag$2:
          var convert = mapToArray;

        case setTag$2:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
          convert || (convert = setToArray$2);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG$2;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag$1:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    var _equalByTag = equalByTag$1;

    var getAllKeys = _getAllKeys;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$3 = 1;

    /** Used for built-in method references. */
    var objectProto$3 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty$3.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    var _equalObjects = equalObjects$1;

    var Stack$1 = _Stack,
        equalArrays = _equalArrays,
        equalByTag = _equalByTag,
        equalObjects = _equalObjects,
        getTag$2 = _getTag,
        isArray$c = isArray_1,
        isBuffer$2 = isBuffer$5.exports,
        isTypedArray$2 = isTypedArray_1;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$2 = 1;

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        objectTag = '[object Object]';

    /** Used for built-in method references. */
    var objectProto$2 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray$c(object),
          othIsArr = isArray$c(other),
          objTag = objIsArr ? arrayTag : getTag$2(object),
          othTag = othIsArr ? arrayTag : getTag$2(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer$2(object)) {
        if (!isBuffer$2(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack$1);
        return (objIsArr || isTypedArray$2(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
        var objIsWrapped = objIsObj && hasOwnProperty$2.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty$2.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack$1);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack$1);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    var _baseIsEqualDeep = baseIsEqualDeep$1;

    var baseIsEqualDeep = _baseIsEqualDeep,
        isObjectLike$3 = isObjectLike_1;

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual$2(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike$3(value) && !isObjectLike$3(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$2, stack);
    }

    var _baseIsEqual = baseIsEqual$2;

    var Stack = _Stack,
        baseIsEqual$1 = _baseIsEqual;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$1 = 1,
        COMPARE_UNORDERED_FLAG$1 = 2;

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch$1(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    var _baseIsMatch = baseIsMatch$1;

    var isObject$1 = isObject_1;

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable$2(value) {
      return value === value && !isObject$1(value);
    }

    var _isStrictComparable = isStrictComparable$2;

    var isStrictComparable$1 = _isStrictComparable,
        keys$1 = keys_1;

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData$1(object) {
      var result = keys$1(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable$1(value)];
      }
      return result;
    }

    var _getMatchData = getMatchData$1;

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */

    function matchesStrictComparable$2(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    var _matchesStrictComparable = matchesStrictComparable$2;

    var baseIsMatch = _baseIsMatch,
        getMatchData = _getMatchData,
        matchesStrictComparable$1 = _matchesStrictComparable;

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches$1(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    var _baseMatches = baseMatches$1;

    var baseGetTag$1 = _baseGetTag,
        isObjectLike$2 = isObjectLike_1;

    /** `Object#toString` result references. */
    var symbolTag = '[object Symbol]';

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol$3(value) {
      return typeof value == 'symbol' ||
        (isObjectLike$2(value) && baseGetTag$1(value) == symbolTag);
    }

    var isSymbol_1 = isSymbol$3;

    var isArray$b = isArray_1,
        isSymbol$2 = isSymbol_1;

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/;

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey$3(value, object) {
      if (isArray$b(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol$2(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    var _isKey = isKey$3;

    var MapCache = _MapCache;

    /** Error message constants. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize$1(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize$1.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize$1.Cache = MapCache;

    var memoize_1 = memoize$1;

    var memoize = memoize_1;

    /** Used as the maximum memoize cache size. */
    var MAX_MEMOIZE_SIZE = 500;

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped$1(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    var _memoizeCapped = memoizeCapped$1;

    var memoizeCapped = _memoizeCapped;

    /** Used to match property names within property paths. */
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath$1 = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    var _stringToPath = stringToPath$1;

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */

    function arrayMap$3(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    var _arrayMap = arrayMap$3;

    var Symbol$2 = _Symbol,
        arrayMap$2 = _arrayMap,
        isArray$a = isArray_1,
        isSymbol$1 = isSymbol_1;

    /** Used as references for various `Number` constants. */
    var INFINITY$2 = 1 / 0;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol$2 ? Symbol$2.prototype : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString$1(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray$a(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap$2(value, baseToString$1) + '';
      }
      if (isSymbol$1(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$2) ? '-0' : result;
    }

    var _baseToString = baseToString$1;

    var baseToString = _baseToString;

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString$1(value) {
      return value == null ? '' : baseToString(value);
    }

    var toString_1 = toString$1;

    var isArray$9 = isArray_1,
        isKey$2 = _isKey,
        stringToPath = _stringToPath,
        toString = toString_1;

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath$2(value, object) {
      if (isArray$9(value)) {
        return value;
      }
      return isKey$2(value, object) ? [value] : stringToPath(toString(value));
    }

    var _castPath = castPath$2;

    var isSymbol = isSymbol_1;

    /** Used as references for various `Number` constants. */
    var INFINITY$1 = 1 / 0;

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey$4(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
    }

    var _toKey = toKey$4;

    var castPath$1 = _castPath,
        toKey$3 = _toKey;

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet$2(object, path) {
      path = castPath$1(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey$3(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    var _baseGet = baseGet$2;

    var baseGet$1 = _baseGet;

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get$1(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet$1(object, path);
      return result === undefined ? defaultValue : result;
    }

    var get_1 = get$1;

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */

    function baseHasIn$1(object, key) {
      return object != null && key in Object(object);
    }

    var _baseHasIn = baseHasIn$1;

    var castPath = _castPath,
        isArguments$2 = isArguments_1,
        isArray$8 = isArray_1,
        isIndex = _isIndex,
        isLength = isLength_1,
        toKey$2 = _toKey;

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath$2(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey$2(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray$8(object) || isArguments$2(object));
    }

    var _hasPath = hasPath$2;

    var baseHasIn = _baseHasIn,
        hasPath$1 = _hasPath;

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn$1(object, path) {
      return object != null && hasPath$1(object, path, baseHasIn);
    }

    var hasIn_1 = hasIn$1;

    var baseIsEqual = _baseIsEqual,
        get = get_1,
        hasIn = hasIn_1,
        isKey$1 = _isKey,
        isStrictComparable = _isStrictComparable,
        matchesStrictComparable = _matchesStrictComparable,
        toKey$1 = _toKey;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty$1(path, srcValue) {
      if (isKey$1(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey$1(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    var _baseMatchesProperty = baseMatchesProperty$1;

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */

    function baseProperty$2(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    var _baseProperty = baseProperty$2;

    var baseGet = _baseGet;

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep$1(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    var _basePropertyDeep = basePropertyDeep$1;

    var baseProperty$1 = _baseProperty,
        basePropertyDeep = _basePropertyDeep,
        isKey = _isKey,
        toKey = _toKey;

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property$1(path) {
      return isKey(path) ? baseProperty$1(toKey(path)) : basePropertyDeep(path);
    }

    var property_1 = property$1;

    var baseMatches = _baseMatches,
        baseMatchesProperty = _baseMatchesProperty,
        identity$2 = identity_1,
        isArray$7 = isArray_1,
        property = property_1;

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee$4(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity$2;
      }
      if (typeof value == 'object') {
        return isArray$7(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    var _baseIteratee = baseIteratee$4;

    var arrayFilter = _arrayFilter,
        baseFilter = _baseFilter,
        baseIteratee$3 = _baseIteratee,
        isArray$6 = isArray_1;

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray$6(collection) ? arrayFilter : baseFilter;
      return func(collection, baseIteratee$3(predicate));
    }

    var filter_1 = filter;

    /** Used for built-in method references. */

    var objectProto$1 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas$1(object, key) {
      return object != null && hasOwnProperty$1.call(object, key);
    }

    var _baseHas = baseHas$1;

    var baseHas = _baseHas,
        hasPath = _hasPath;

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    var has_1 = has;

    var baseKeys$1 = _baseKeys,
        getTag$1 = _getTag,
        isArguments$1 = isArguments_1,
        isArray$5 = isArray_1,
        isArrayLike$3 = isArrayLike_1,
        isBuffer$1 = isBuffer$5.exports,
        isPrototype = _isPrototype,
        isTypedArray$1 = isTypedArray_1;

    /** `Object#toString` result references. */
    var mapTag$1 = '[object Map]',
        setTag$1 = '[object Set]';

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike$3(value) &&
          (isArray$5(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer$1(value) || isTypedArray$1(value) || isArguments$1(value))) {
        return !value.length;
      }
      var tag = getTag$1(value);
      if (tag == mapTag$1 || tag == setTag$1) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys$1(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    var isEmpty_1 = isEmpty;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */

    function isUndefined(value) {
      return value === undefined;
    }

    var isUndefined_1 = isUndefined;

    var baseEach$1 = _baseEach,
        isArrayLike$2 = isArrayLike_1;

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap$1(collection, iteratee) {
      var index = -1,
          result = isArrayLike$2(collection) ? Array(collection.length) : [];

      baseEach$1(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    var _baseMap = baseMap$1;

    var arrayMap$1 = _arrayMap,
        baseIteratee$2 = _baseIteratee,
        baseMap = _baseMap,
        isArray$4 = isArray_1;

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray$4(collection) ? arrayMap$1 : baseMap;
      return func(collection, baseIteratee$2(iteratee));
    }

    var map_1 = map;

    /**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */

    function arrayReduce$1(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    var _arrayReduce = arrayReduce$1;

    /**
     * The base implementation of `_.reduce` and `_.reduceRight`, without support
     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initAccum Specify using the first or last element of
     *  `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */

    function baseReduce$1(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initAccum
          ? (initAccum = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    var _baseReduce = baseReduce$1;

    var arrayReduce = _arrayReduce,
        baseEach = _baseEach,
        baseIteratee$1 = _baseIteratee,
        baseReduce = _baseReduce,
        isArray$3 = isArray_1;

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray$3(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, baseIteratee$1(iteratee), accumulator, initAccum, baseEach);
    }

    var reduce_1 = reduce;

    var baseGetTag = _baseGetTag,
        isArray$2 = isArray_1,
        isObjectLike$1 = isObjectLike_1;

    /** `Object#toString` result references. */
    var stringTag = '[object String]';

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString$1(value) {
      return typeof value == 'string' ||
        (!isArray$2(value) && isObjectLike$1(value) && baseGetTag(value) == stringTag);
    }

    var isString_1 = isString$1;

    var baseProperty = _baseProperty;

    /**
     * Gets the size of an ASCII `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    var asciiSize$1 = baseProperty('length');

    var _asciiSize = asciiSize$1;

    /** Used to compose unicode character classes. */

    var rsAstralRange$1 = '\\ud800-\\udfff',
        rsComboMarksRange$1 = '\\u0300-\\u036f',
        reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
        rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
        rsVarRange$1 = '\\ufe0e\\ufe0f';

    /** Used to compose unicode capture groups. */
    var rsZWJ$1 = '\\u200d';

    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
    var reHasUnicode = RegExp('[' + rsZWJ$1 + rsAstralRange$1  + rsComboRange$1 + rsVarRange$1 + ']');

    /**
     * Checks if `string` contains Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
     */
    function hasUnicode$1(string) {
      return reHasUnicode.test(string);
    }

    var _hasUnicode = hasUnicode$1;

    /** Used to compose unicode character classes. */

    var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsVarRange = '\\ufe0e\\ufe0f';

    /** Used to compose unicode capture groups. */
    var rsAstral = '[' + rsAstralRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsZWJ = '\\u200d';

    /** Used to compose unicode regexes. */
    var reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

    /**
     * Gets the size of a Unicode `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    function unicodeSize$1(string) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string)) {
        ++result;
      }
      return result;
    }

    var _unicodeSize = unicodeSize$1;

    var asciiSize = _asciiSize,
        hasUnicode = _hasUnicode,
        unicodeSize = _unicodeSize;

    /**
     * Gets the number of symbols in `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the string size.
     */
    function stringSize$1(string) {
      return hasUnicode(string)
        ? unicodeSize(string)
        : asciiSize(string);
    }

    var _stringSize = stringSize$1;

    var baseKeys = _baseKeys,
        getTag = _getTag,
        isArrayLike$1 = isArrayLike_1,
        isString = isString_1,
        stringSize = _stringSize;

    /** `Object#toString` result references. */
    var mapTag = '[object Map]',
        setTag = '[object Set]';

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike$1(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    var size_1 = size;

    var arrayEach = _arrayEach,
        baseCreate = _baseCreate,
        baseForOwn = _baseForOwn,
        baseIteratee = _baseIteratee,
        getPrototype = _getPrototype,
        isArray$1 = isArray_1,
        isBuffer = isBuffer$5.exports,
        isFunction = isFunction_1,
        isObject = isObject_1,
        isTypedArray = isTypedArray_1;

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray$1(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = baseIteratee(iteratee);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    var transform_1 = transform;

    var Symbol$1 = _Symbol,
        isArguments = isArguments_1,
        isArray = isArray_1;

    /** Built-in value references. */
    var spreadableSymbol = Symbol$1 ? Symbol$1.isConcatSpreadable : undefined;

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable$1(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    var _isFlattenable = isFlattenable$1;

    var arrayPush = _arrayPush,
        isFlattenable = _isFlattenable;

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten$1(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten$1(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    var _baseFlatten = baseFlatten$1;

    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */

    function apply$1(func, thisArg, args) {
      switch (args.length) {
        case 0: return func.call(thisArg);
        case 1: return func.call(thisArg, args[0]);
        case 2: return func.call(thisArg, args[0], args[1]);
        case 3: return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }

    var _apply = apply$1;

    var apply = _apply;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax = Math.max;

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest$1(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    var _overRest = overRest$1;

    var constant = constant_1,
        defineProperty = _defineProperty,
        identity$1 = identity_1;

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString$1 = !defineProperty ? identity$1 : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    var _baseSetToString = baseSetToString$1;

    /** Used to detect hot functions by number of calls within a span of milliseconds. */

    var HOT_COUNT = 800,
        HOT_SPAN = 16;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeNow = Date.now;

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut$1(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    var _shortOut = shortOut$1;

    var baseSetToString = _baseSetToString,
        shortOut = _shortOut;

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString$1 = shortOut(baseSetToString);

    var _setToString = setToString$1;

    var identity = identity_1,
        overRest = _overRest,
        setToString = _setToString;

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest$1(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    var _baseRest = baseRest$1;

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */

    function baseFindIndex$1(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    var _baseFindIndex = baseFindIndex$1;

    /**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */

    function baseIsNaN$1(value) {
      return value !== value;
    }

    var _baseIsNaN = baseIsNaN$1;

    /**
     * A specialized version of `_.indexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */

    function strictIndexOf$1(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    var _strictIndexOf = strictIndexOf$1;

    var baseFindIndex = _baseFindIndex,
        baseIsNaN = _baseIsNaN,
        strictIndexOf = _strictIndexOf;

    /**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf$1(array, value, fromIndex) {
      return value === value
        ? strictIndexOf(array, value, fromIndex)
        : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    var _baseIndexOf = baseIndexOf$1;

    var baseIndexOf = _baseIndexOf;

    /**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludes$1(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    var _arrayIncludes = arrayIncludes$1;

    /**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */

    function arrayIncludesWith$1(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }

    var _arrayIncludesWith = arrayIncludesWith$1;

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */

    function noop$1() {
      // No operation performed.
    }

    var noop_1 = noop$1;

    var Set$1 = _Set,
        noop = noop_1,
        setToArray$1 = _setToArray;

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0;

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet$1 = !(Set$1 && (1 / setToArray$1(new Set$1([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set$1(values);
    };

    var _createSet = createSet$1;

    var SetCache = _SetCache,
        arrayIncludes = _arrayIncludes,
        arrayIncludesWith = _arrayIncludesWith,
        cacheHas = _cacheHas,
        createSet = _createSet,
        setToArray = _setToArray;

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq$1(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    var _baseUniq = baseUniq$1;

    var isArrayLike = isArrayLike_1,
        isObjectLike = isObjectLike_1;

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject$1(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    var isArrayLikeObject_1 = isArrayLikeObject$1;

    var baseFlatten = _baseFlatten,
        baseRest = _baseRest,
        baseUniq = _baseUniq,
        isArrayLikeObject = isArrayLikeObject_1;

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    var union_1 = union;

    var arrayMap = _arrayMap;

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues$1(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }

    var _baseValues = baseValues$1;

    var baseValues = _baseValues,
        keys = keys_1;

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    var values_1 = values;

    /* global window */

    var lodash;

    if (typeof commonjsRequire === "function") {
      try {
        lodash = {
          clone: clone_1,
          constant: constant_1,
          each: each,
          filter: filter_1,
          has:  has_1,
          isArray: isArray_1,
          isEmpty: isEmpty_1,
          isFunction: isFunction_1,
          isUndefined: isUndefined_1,
          keys: keys_1,
          map: map_1,
          reduce: reduce_1,
          size: size_1,
          transform: transform_1,
          union: union_1,
          values: values_1
        };
      } catch (e) {
        // continue regardless of error
      }
    }

    if (!lodash) {
      lodash = window._;
    }

    var lodash_1 = lodash;

    var _$b = lodash_1;

    var graph = Graph$2;

    var DEFAULT_EDGE_NAME = "\x00";
    var GRAPH_NODE = "\x00";
    var EDGE_KEY_DELIM = "\x01";

    // Implementation notes:
    //
    //  * Node id query functions should return string ids for the nodes
    //  * Edge id query functions should return an "edgeObj", edge object, that is
    //    composed of enough information to uniquely identify an edge: {v, w, name}.
    //  * Internally we use an "edgeId", a stringified form of the edgeObj, to
    //    reference edges. This is because we need a performant way to look these
    //    edges up and, object properties, which have string keys, are the closest
    //    we're going to get to a performant hashtable in JavaScript.

    function Graph$2(opts) {
      this._isDirected = _$b.has(opts, "directed") ? opts.directed : true;
      this._isMultigraph = _$b.has(opts, "multigraph") ? opts.multigraph : false;
      this._isCompound = _$b.has(opts, "compound") ? opts.compound : false;

      // Label for the graph itself
      this._label = undefined;

      // Defaults to be set when creating a new node
      this._defaultNodeLabelFn = _$b.constant(undefined);

      // Defaults to be set when creating a new edge
      this._defaultEdgeLabelFn = _$b.constant(undefined);

      // v -> label
      this._nodes = {};

      if (this._isCompound) {
        // v -> parent
        this._parent = {};

        // v -> children
        this._children = {};
        this._children[GRAPH_NODE] = {};
      }

      // v -> edgeObj
      this._in = {};

      // u -> v -> Number
      this._preds = {};

      // v -> edgeObj
      this._out = {};

      // v -> w -> Number
      this._sucs = {};

      // e -> edgeObj
      this._edgeObjs = {};

      // e -> label
      this._edgeLabels = {};
    }

    /* Number of nodes in the graph. Should only be changed by the implementation. */
    Graph$2.prototype._nodeCount = 0;

    /* Number of edges in the graph. Should only be changed by the implementation. */
    Graph$2.prototype._edgeCount = 0;


    /* === Graph functions ========= */

    Graph$2.prototype.isDirected = function() {
      return this._isDirected;
    };

    Graph$2.prototype.isMultigraph = function() {
      return this._isMultigraph;
    };

    Graph$2.prototype.isCompound = function() {
      return this._isCompound;
    };

    Graph$2.prototype.setGraph = function(label) {
      this._label = label;
      return this;
    };

    Graph$2.prototype.graph = function() {
      return this._label;
    };


    /* === Node functions ========== */

    Graph$2.prototype.setDefaultNodeLabel = function(newDefault) {
      if (!_$b.isFunction(newDefault)) {
        newDefault = _$b.constant(newDefault);
      }
      this._defaultNodeLabelFn = newDefault;
      return this;
    };

    Graph$2.prototype.nodeCount = function() {
      return this._nodeCount;
    };

    Graph$2.prototype.nodes = function() {
      return _$b.keys(this._nodes);
    };

    Graph$2.prototype.sources = function() {
      var self = this;
      return _$b.filter(this.nodes(), function(v) {
        return _$b.isEmpty(self._in[v]);
      });
    };

    Graph$2.prototype.sinks = function() {
      var self = this;
      return _$b.filter(this.nodes(), function(v) {
        return _$b.isEmpty(self._out[v]);
      });
    };

    Graph$2.prototype.setNodes = function(vs, value) {
      var args = arguments;
      var self = this;
      _$b.each(vs, function(v) {
        if (args.length > 1) {
          self.setNode(v, value);
        } else {
          self.setNode(v);
        }
      });
      return this;
    };

    Graph$2.prototype.setNode = function(v, value) {
      if (_$b.has(this._nodes, v)) {
        if (arguments.length > 1) {
          this._nodes[v] = value;
        }
        return this;
      }

      this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);
      if (this._isCompound) {
        this._parent[v] = GRAPH_NODE;
        this._children[v] = {};
        this._children[GRAPH_NODE][v] = true;
      }
      this._in[v] = {};
      this._preds[v] = {};
      this._out[v] = {};
      this._sucs[v] = {};
      ++this._nodeCount;
      return this;
    };

    Graph$2.prototype.node = function(v) {
      return this._nodes[v];
    };

    Graph$2.prototype.hasNode = function(v) {
      return _$b.has(this._nodes, v);
    };

    Graph$2.prototype.removeNode =  function(v) {
      var self = this;
      if (_$b.has(this._nodes, v)) {
        var removeEdge = function(e) { self.removeEdge(self._edgeObjs[e]); };
        delete this._nodes[v];
        if (this._isCompound) {
          this._removeFromParentsChildList(v);
          delete this._parent[v];
          _$b.each(this.children(v), function(child) {
            self.setParent(child);
          });
          delete this._children[v];
        }
        _$b.each(_$b.keys(this._in[v]), removeEdge);
        delete this._in[v];
        delete this._preds[v];
        _$b.each(_$b.keys(this._out[v]), removeEdge);
        delete this._out[v];
        delete this._sucs[v];
        --this._nodeCount;
      }
      return this;
    };

    Graph$2.prototype.setParent = function(v, parent) {
      if (!this._isCompound) {
        throw new Error("Cannot set parent in a non-compound graph");
      }

      if (_$b.isUndefined(parent)) {
        parent = GRAPH_NODE;
      } else {
        // Coerce parent to string
        parent += "";
        for (var ancestor = parent;
          !_$b.isUndefined(ancestor);
          ancestor = this.parent(ancestor)) {
          if (ancestor === v) {
            throw new Error("Setting " + parent+ " as parent of " + v +
                            " would create a cycle");
          }
        }

        this.setNode(parent);
      }

      this.setNode(v);
      this._removeFromParentsChildList(v);
      this._parent[v] = parent;
      this._children[parent][v] = true;
      return this;
    };

    Graph$2.prototype._removeFromParentsChildList = function(v) {
      delete this._children[this._parent[v]][v];
    };

    Graph$2.prototype.parent = function(v) {
      if (this._isCompound) {
        var parent = this._parent[v];
        if (parent !== GRAPH_NODE) {
          return parent;
        }
      }
    };

    Graph$2.prototype.children = function(v) {
      if (_$b.isUndefined(v)) {
        v = GRAPH_NODE;
      }

      if (this._isCompound) {
        var children = this._children[v];
        if (children) {
          return _$b.keys(children);
        }
      } else if (v === GRAPH_NODE) {
        return this.nodes();
      } else if (this.hasNode(v)) {
        return [];
      }
    };

    Graph$2.prototype.predecessors = function(v) {
      var predsV = this._preds[v];
      if (predsV) {
        return _$b.keys(predsV);
      }
    };

    Graph$2.prototype.successors = function(v) {
      var sucsV = this._sucs[v];
      if (sucsV) {
        return _$b.keys(sucsV);
      }
    };

    Graph$2.prototype.neighbors = function(v) {
      var preds = this.predecessors(v);
      if (preds) {
        return _$b.union(preds, this.successors(v));
      }
    };

    Graph$2.prototype.isLeaf = function (v) {
      var neighbors;
      if (this.isDirected()) {
        neighbors = this.successors(v);
      } else {
        neighbors = this.neighbors(v);
      }
      return neighbors.length === 0;
    };

    Graph$2.prototype.filterNodes = function(filter) {
      var copy = new this.constructor({
        directed: this._isDirected,
        multigraph: this._isMultigraph,
        compound: this._isCompound
      });

      copy.setGraph(this.graph());

      var self = this;
      _$b.each(this._nodes, function(value, v) {
        if (filter(v)) {
          copy.setNode(v, value);
        }
      });

      _$b.each(this._edgeObjs, function(e) {
        if (copy.hasNode(e.v) && copy.hasNode(e.w)) {
          copy.setEdge(e, self.edge(e));
        }
      });

      var parents = {};
      function findParent(v) {
        var parent = self.parent(v);
        if (parent === undefined || copy.hasNode(parent)) {
          parents[v] = parent;
          return parent;
        } else if (parent in parents) {
          return parents[parent];
        } else {
          return findParent(parent);
        }
      }

      if (this._isCompound) {
        _$b.each(copy.nodes(), function(v) {
          copy.setParent(v, findParent(v));
        });
      }

      return copy;
    };

    /* === Edge functions ========== */

    Graph$2.prototype.setDefaultEdgeLabel = function(newDefault) {
      if (!_$b.isFunction(newDefault)) {
        newDefault = _$b.constant(newDefault);
      }
      this._defaultEdgeLabelFn = newDefault;
      return this;
    };

    Graph$2.prototype.edgeCount = function() {
      return this._edgeCount;
    };

    Graph$2.prototype.edges = function() {
      return _$b.values(this._edgeObjs);
    };

    Graph$2.prototype.setPath = function(vs, value) {
      var self = this;
      var args = arguments;
      _$b.reduce(vs, function(v, w) {
        if (args.length > 1) {
          self.setEdge(v, w, value);
        } else {
          self.setEdge(v, w);
        }
        return w;
      });
      return this;
    };

    /*
     * setEdge(v, w, [value, [name]])
     * setEdge({ v, w, [name] }, [value])
     */
    Graph$2.prototype.setEdge = function() {
      var v, w, name, value;
      var valueSpecified = false;
      var arg0 = arguments[0];

      if (typeof arg0 === "object" && arg0 !== null && "v" in arg0) {
        v = arg0.v;
        w = arg0.w;
        name = arg0.name;
        if (arguments.length === 2) {
          value = arguments[1];
          valueSpecified = true;
        }
      } else {
        v = arg0;
        w = arguments[1];
        name = arguments[3];
        if (arguments.length > 2) {
          value = arguments[2];
          valueSpecified = true;
        }
      }

      v = "" + v;
      w = "" + w;
      if (!_$b.isUndefined(name)) {
        name = "" + name;
      }

      var e = edgeArgsToId(this._isDirected, v, w, name);
      if (_$b.has(this._edgeLabels, e)) {
        if (valueSpecified) {
          this._edgeLabels[e] = value;
        }
        return this;
      }

      if (!_$b.isUndefined(name) && !this._isMultigraph) {
        throw new Error("Cannot set a named edge when isMultigraph = false");
      }

      // It didn't exist, so we need to create it.
      // First ensure the nodes exist.
      this.setNode(v);
      this.setNode(w);

      this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);

      var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);
      // Ensure we add undirected edges in a consistent way.
      v = edgeObj.v;
      w = edgeObj.w;

      Object.freeze(edgeObj);
      this._edgeObjs[e] = edgeObj;
      incrementOrInitEntry(this._preds[w], v);
      incrementOrInitEntry(this._sucs[v], w);
      this._in[w][e] = edgeObj;
      this._out[v][e] = edgeObj;
      this._edgeCount++;
      return this;
    };

    Graph$2.prototype.edge = function(v, w, name) {
      var e = (arguments.length === 1
        ? edgeObjToId(this._isDirected, arguments[0])
        : edgeArgsToId(this._isDirected, v, w, name));
      return this._edgeLabels[e];
    };

    Graph$2.prototype.hasEdge = function(v, w, name) {
      var e = (arguments.length === 1
        ? edgeObjToId(this._isDirected, arguments[0])
        : edgeArgsToId(this._isDirected, v, w, name));
      return _$b.has(this._edgeLabels, e);
    };

    Graph$2.prototype.removeEdge = function(v, w, name) {
      var e = (arguments.length === 1
        ? edgeObjToId(this._isDirected, arguments[0])
        : edgeArgsToId(this._isDirected, v, w, name));
      var edge = this._edgeObjs[e];
      if (edge) {
        v = edge.v;
        w = edge.w;
        delete this._edgeLabels[e];
        delete this._edgeObjs[e];
        decrementOrRemoveEntry(this._preds[w], v);
        decrementOrRemoveEntry(this._sucs[v], w);
        delete this._in[w][e];
        delete this._out[v][e];
        this._edgeCount--;
      }
      return this;
    };

    Graph$2.prototype.inEdges = function(v, u) {
      var inV = this._in[v];
      if (inV) {
        var edges = _$b.values(inV);
        if (!u) {
          return edges;
        }
        return _$b.filter(edges, function(edge) { return edge.v === u; });
      }
    };

    Graph$2.prototype.outEdges = function(v, w) {
      var outV = this._out[v];
      if (outV) {
        var edges = _$b.values(outV);
        if (!w) {
          return edges;
        }
        return _$b.filter(edges, function(edge) { return edge.w === w; });
      }
    };

    Graph$2.prototype.nodeEdges = function(v, w) {
      var inEdges = this.inEdges(v, w);
      if (inEdges) {
        return inEdges.concat(this.outEdges(v, w));
      }
    };

    function incrementOrInitEntry(map, k) {
      if (map[k]) {
        map[k]++;
      } else {
        map[k] = 1;
      }
    }

    function decrementOrRemoveEntry(map, k) {
      if (!--map[k]) { delete map[k]; }
    }

    function edgeArgsToId(isDirected, v_, w_, name) {
      var v = "" + v_;
      var w = "" + w_;
      if (!isDirected && v > w) {
        var tmp = v;
        v = w;
        w = tmp;
      }
      return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM +
                 (_$b.isUndefined(name) ? DEFAULT_EDGE_NAME : name);
    }

    function edgeArgsToObj(isDirected, v_, w_, name) {
      var v = "" + v_;
      var w = "" + w_;
      if (!isDirected && v > w) {
        var tmp = v;
        v = w;
        w = tmp;
      }
      var edgeObj =  { v: v, w: w };
      if (name) {
        edgeObj.name = name;
      }
      return edgeObj;
    }

    function edgeObjToId(isDirected, edgeObj) {
      return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);
    }

    var version = '2.1.8';

    // Includes only the "core" of graphlib
    var lib$1 = {
      Graph: graph,
      version: version
    };

    var _$a = lodash_1;
    var Graph$1 = graph;

    var json = {
      write: write,
      read: read
    };

    function write(g) {
      var json = {
        options: {
          directed: g.isDirected(),
          multigraph: g.isMultigraph(),
          compound: g.isCompound()
        },
        nodes: writeNodes(g),
        edges: writeEdges(g)
      };
      if (!_$a.isUndefined(g.graph())) {
        json.value = _$a.clone(g.graph());
      }
      return json;
    }

    function writeNodes(g) {
      return _$a.map(g.nodes(), function(v) {
        var nodeValue = g.node(v);
        var parent = g.parent(v);
        var node = { v: v };
        if (!_$a.isUndefined(nodeValue)) {
          node.value = nodeValue;
        }
        if (!_$a.isUndefined(parent)) {
          node.parent = parent;
        }
        return node;
      });
    }

    function writeEdges(g) {
      return _$a.map(g.edges(), function(e) {
        var edgeValue = g.edge(e);
        var edge = { v: e.v, w: e.w };
        if (!_$a.isUndefined(e.name)) {
          edge.name = e.name;
        }
        if (!_$a.isUndefined(edgeValue)) {
          edge.value = edgeValue;
        }
        return edge;
      });
    }

    function read(json) {
      var g = new Graph$1(json.options).setGraph(json.value);
      _$a.each(json.nodes, function(entry) {
        g.setNode(entry.v, entry.value);
        if (entry.parent) {
          g.setParent(entry.v, entry.parent);
        }
      });
      _$a.each(json.edges, function(entry) {
        g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);
      });
      return g;
    }

    var _$9 = lodash_1;

    var components_1 = components;

    function components(g) {
      var visited = {};
      var cmpts = [];
      var cmpt;

      function dfs(v) {
        if (_$9.has(visited, v)) return;
        visited[v] = true;
        cmpt.push(v);
        _$9.each(g.successors(v), dfs);
        _$9.each(g.predecessors(v), dfs);
      }

      _$9.each(g.nodes(), function(v) {
        cmpt = [];
        dfs(v);
        if (cmpt.length) {
          cmpts.push(cmpt);
        }
      });

      return cmpts;
    }

    var _$8 = lodash_1;

    var priorityQueue = PriorityQueue$2;

    /**
     * A min-priority queue data structure. This algorithm is derived from Cormen,
     * et al., "Introduction to Algorithms". The basic idea of a min-priority
     * queue is that you can efficiently (in O(1) time) get the smallest key in
     * the queue. Adding and removing elements takes O(log n) time. A key can
     * have its priority decreased in O(log n) time.
     */
    function PriorityQueue$2() {
      this._arr = [];
      this._keyIndices = {};
    }

    /**
     * Returns the number of elements in the queue. Takes `O(1)` time.
     */
    PriorityQueue$2.prototype.size = function() {
      return this._arr.length;
    };

    /**
     * Returns the keys that are in the queue. Takes `O(n)` time.
     */
    PriorityQueue$2.prototype.keys = function() {
      return this._arr.map(function(x) { return x.key; });
    };

    /**
     * Returns `true` if **key** is in the queue and `false` if not.
     */
    PriorityQueue$2.prototype.has = function(key) {
      return _$8.has(this._keyIndices, key);
    };

    /**
     * Returns the priority for **key**. If **key** is not present in the queue
     * then this function returns `undefined`. Takes `O(1)` time.
     *
     * @param {Object} key
     */
    PriorityQueue$2.prototype.priority = function(key) {
      var index = this._keyIndices[key];
      if (index !== undefined) {
        return this._arr[index].priority;
      }
    };

    /**
     * Returns the key for the minimum element in this queue. If the queue is
     * empty this function throws an Error. Takes `O(1)` time.
     */
    PriorityQueue$2.prototype.min = function() {
      if (this.size() === 0) {
        throw new Error("Queue underflow");
      }
      return this._arr[0].key;
    };

    /**
     * Inserts a new key into the priority queue. If the key already exists in
     * the queue this function returns `false`; otherwise it will return `true`.
     * Takes `O(n)` time.
     *
     * @param {Object} key the key to add
     * @param {Number} priority the initial priority for the key
     */
    PriorityQueue$2.prototype.add = function(key, priority) {
      var keyIndices = this._keyIndices;
      key = String(key);
      if (!_$8.has(keyIndices, key)) {
        var arr = this._arr;
        var index = arr.length;
        keyIndices[key] = index;
        arr.push({key: key, priority: priority});
        this._decrease(index);
        return true;
      }
      return false;
    };

    /**
     * Removes and returns the smallest key in the queue. Takes `O(log n)` time.
     */
    PriorityQueue$2.prototype.removeMin = function() {
      this._swap(0, this._arr.length - 1);
      var min = this._arr.pop();
      delete this._keyIndices[min.key];
      this._heapify(0);
      return min.key;
    };

    /**
     * Decreases the priority for **key** to **priority**. If the new priority is
     * greater than the previous priority, this function will throw an Error.
     *
     * @param {Object} key the key for which to raise priority
     * @param {Number} priority the new priority for the key
     */
    PriorityQueue$2.prototype.decrease = function(key, priority) {
      var index = this._keyIndices[key];
      if (priority > this._arr[index].priority) {
        throw new Error("New priority is greater than current priority. " +
            "Key: " + key + " Old: " + this._arr[index].priority + " New: " + priority);
      }
      this._arr[index].priority = priority;
      this._decrease(index);
    };

    PriorityQueue$2.prototype._heapify = function(i) {
      var arr = this._arr;
      var l = 2 * i;
      var r = l + 1;
      var largest = i;
      if (l < arr.length) {
        largest = arr[l].priority < arr[largest].priority ? l : largest;
        if (r < arr.length) {
          largest = arr[r].priority < arr[largest].priority ? r : largest;
        }
        if (largest !== i) {
          this._swap(i, largest);
          this._heapify(largest);
        }
      }
    };

    PriorityQueue$2.prototype._decrease = function(index) {
      var arr = this._arr;
      var priority = arr[index].priority;
      var parent;
      while (index !== 0) {
        parent = index >> 1;
        if (arr[parent].priority < priority) {
          break;
        }
        this._swap(index, parent);
        index = parent;
      }
    };

    PriorityQueue$2.prototype._swap = function(i, j) {
      var arr = this._arr;
      var keyIndices = this._keyIndices;
      var origArrI = arr[i];
      var origArrJ = arr[j];
      arr[i] = origArrJ;
      arr[j] = origArrI;
      keyIndices[origArrJ.key] = i;
      keyIndices[origArrI.key] = j;
    };

    var _$7 = lodash_1;
    var PriorityQueue$1 = priorityQueue;

    var dijkstra_1 = dijkstra$1;

    var DEFAULT_WEIGHT_FUNC$1 = _$7.constant(1);

    function dijkstra$1(g, source, weightFn, edgeFn) {
      return runDijkstra(g, String(source),
        weightFn || DEFAULT_WEIGHT_FUNC$1,
        edgeFn || function(v) { return g.outEdges(v); });
    }

    function runDijkstra(g, source, weightFn, edgeFn) {
      var results = {};
      var pq = new PriorityQueue$1();
      var v, vEntry;

      var updateNeighbors = function(edge) {
        var w = edge.v !== v ? edge.v : edge.w;
        var wEntry = results[w];
        var weight = weightFn(edge);
        var distance = vEntry.distance + weight;

        if (weight < 0) {
          throw new Error("dijkstra does not allow negative edge weights. " +
                          "Bad edge: " + edge + " Weight: " + weight);
        }

        if (distance < wEntry.distance) {
          wEntry.distance = distance;
          wEntry.predecessor = v;
          pq.decrease(w, distance);
        }
      };

      g.nodes().forEach(function(v) {
        var distance = v === source ? 0 : Number.POSITIVE_INFINITY;
        results[v] = { distance: distance };
        pq.add(v, distance);
      });

      while (pq.size() > 0) {
        v = pq.removeMin();
        vEntry = results[v];
        if (vEntry.distance === Number.POSITIVE_INFINITY) {
          break;
        }

        edgeFn(v).forEach(updateNeighbors);
      }

      return results;
    }

    var dijkstra = dijkstra_1;
    var _$6 = lodash_1;

    var dijkstraAll_1 = dijkstraAll;

    function dijkstraAll(g, weightFunc, edgeFunc) {
      return _$6.transform(g.nodes(), function(acc, v) {
        acc[v] = dijkstra(g, v, weightFunc, edgeFunc);
      }, {});
    }

    var _$5 = lodash_1;

    var tarjan_1 = tarjan$1;

    function tarjan$1(g) {
      var index = 0;
      var stack = [];
      var visited = {}; // node id -> { onStack, lowlink, index }
      var results = [];

      function dfs(v) {
        var entry = visited[v] = {
          onStack: true,
          lowlink: index,
          index: index++
        };
        stack.push(v);

        g.successors(v).forEach(function(w) {
          if (!_$5.has(visited, w)) {
            dfs(w);
            entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);
          } else if (visited[w].onStack) {
            entry.lowlink = Math.min(entry.lowlink, visited[w].index);
          }
        });

        if (entry.lowlink === entry.index) {
          var cmpt = [];
          var w;
          do {
            w = stack.pop();
            visited[w].onStack = false;
            cmpt.push(w);
          } while (v !== w);
          results.push(cmpt);
        }
      }

      g.nodes().forEach(function(v) {
        if (!_$5.has(visited, v)) {
          dfs(v);
        }
      });

      return results;
    }

    var _$4 = lodash_1;
    var tarjan = tarjan_1;

    var findCycles_1 = findCycles;

    function findCycles(g) {
      return _$4.filter(tarjan(g), function(cmpt) {
        return cmpt.length > 1 || (cmpt.length === 1 && g.hasEdge(cmpt[0], cmpt[0]));
      });
    }

    var _$3 = lodash_1;

    var floydWarshall_1 = floydWarshall;

    var DEFAULT_WEIGHT_FUNC = _$3.constant(1);

    function floydWarshall(g, weightFn, edgeFn) {
      return runFloydWarshall(g,
        weightFn || DEFAULT_WEIGHT_FUNC,
        edgeFn || function(v) { return g.outEdges(v); });
    }

    function runFloydWarshall(g, weightFn, edgeFn) {
      var results = {};
      var nodes = g.nodes();

      nodes.forEach(function(v) {
        results[v] = {};
        results[v][v] = { distance: 0 };
        nodes.forEach(function(w) {
          if (v !== w) {
            results[v][w] = { distance: Number.POSITIVE_INFINITY };
          }
        });
        edgeFn(v).forEach(function(edge) {
          var w = edge.v === v ? edge.w : edge.v;
          var d = weightFn(edge);
          results[v][w] = { distance: d, predecessor: v };
        });
      });

      nodes.forEach(function(k) {
        var rowK = results[k];
        nodes.forEach(function(i) {
          var rowI = results[i];
          nodes.forEach(function(j) {
            var ik = rowI[k];
            var kj = rowK[j];
            var ij = rowI[j];
            var altDistance = ik.distance + kj.distance;
            if (altDistance < ij.distance) {
              ij.distance = altDistance;
              ij.predecessor = kj.predecessor;
            }
          });
        });
      });

      return results;
    }

    var _$2 = lodash_1;

    var topsort_1 = topsort$1;
    topsort$1.CycleException = CycleException;

    function topsort$1(g) {
      var visited = {};
      var stack = {};
      var results = [];

      function visit(node) {
        if (_$2.has(stack, node)) {
          throw new CycleException();
        }

        if (!_$2.has(visited, node)) {
          stack[node] = true;
          visited[node] = true;
          _$2.each(g.predecessors(node), visit);
          delete stack[node];
          results.push(node);
        }
      }

      _$2.each(g.sinks(), visit);

      if (_$2.size(visited) !== g.nodeCount()) {
        throw new CycleException();
      }

      return results;
    }

    function CycleException() {}
    CycleException.prototype = new Error(); // must be an instance of Error to pass testing

    var topsort = topsort_1;

    var isAcyclic_1 = isAcyclic;

    function isAcyclic(g) {
      try {
        topsort(g);
      } catch (e) {
        if (e instanceof topsort.CycleException) {
          return false;
        }
        throw e;
      }
      return true;
    }

    var _$1 = lodash_1;

    var dfs_1 = dfs$3;

    /*
     * A helper that preforms a pre- or post-order traversal on the input graph
     * and returns the nodes in the order they were visited. If the graph is
     * undirected then this algorithm will navigate using neighbors. If the graph
     * is directed then this algorithm will navigate using successors.
     *
     * Order must be one of "pre" or "post".
     */
    function dfs$3(g, vs, order) {
      if (!_$1.isArray(vs)) {
        vs = [vs];
      }

      var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);

      var acc = [];
      var visited = {};
      _$1.each(vs, function(v) {
        if (!g.hasNode(v)) {
          throw new Error("Graph does not have node: " + v);
        }

        doDfs(g, v, order === "post", visited, navigation, acc);
      });
      return acc;
    }

    function doDfs(g, v, postorder, visited, navigation, acc) {
      if (!_$1.has(visited, v)) {
        visited[v] = true;

        if (!postorder) { acc.push(v); }
        _$1.each(navigation(v), function(w) {
          doDfs(g, w, postorder, visited, navigation, acc);
        });
        if (postorder) { acc.push(v); }
      }
    }

    var dfs$2 = dfs_1;

    var postorder_1 = postorder$1;

    function postorder$1(g, vs) {
      return dfs$2(g, vs, "post");
    }

    var dfs$1 = dfs_1;

    var preorder_1 = preorder;

    function preorder(g, vs) {
      return dfs$1(g, vs, "pre");
    }

    var _ = lodash_1;
    var Graph = graph;
    var PriorityQueue = priorityQueue;

    var prim_1 = prim;

    function prim(g, weightFunc) {
      var result = new Graph();
      var parents = {};
      var pq = new PriorityQueue();
      var v;

      function updateNeighbors(edge) {
        var w = edge.v === v ? edge.w : edge.v;
        var pri = pq.priority(w);
        if (pri !== undefined) {
          var edgeWeight = weightFunc(edge);
          if (edgeWeight < pri) {
            parents[w] = v;
            pq.decrease(w, edgeWeight);
          }
        }
      }

      if (g.nodeCount() === 0) {
        return result;
      }

      _.each(g.nodes(), function(v) {
        pq.add(v, Number.POSITIVE_INFINITY);
        result.setNode(v);
      });

      // Start from an arbitrary node
      pq.decrease(g.nodes()[0], 0);

      var init = false;
      while (pq.size() > 0) {
        v = pq.removeMin();
        if (_.has(parents, v)) {
          result.setEdge(v, parents[v]);
        } else if (init) {
          throw new Error("Input graph is not connected: " + g);
        } else {
          init = true;
        }

        g.nodeEdges(v).forEach(updateNeighbors);
      }

      return result;
    }

    var alg = {
      components: components_1,
      dijkstra: dijkstra_1,
      dijkstraAll: dijkstraAll_1,
      findCycles: findCycles_1,
      floydWarshall: floydWarshall_1,
      isAcyclic: isAcyclic_1,
      postorder: postorder_1,
      preorder: preorder_1,
      prim: prim_1,
      tarjan: tarjan_1,
      topsort: topsort_1
    };

    /**
     * Copyright (c) 2014, Chris Pettitt
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are met:
     *
     * 1. Redistributions of source code must retain the above copyright notice, this
     * list of conditions and the following disclaimer.
     *
     * 2. Redistributions in binary form must reproduce the above copyright notice,
     * this list of conditions and the following disclaimer in the documentation
     * and/or other materials provided with the distribution.
     *
     * 3. Neither the name of the copyright holder nor the names of its contributors
     * may be used to endorse or promote products derived from this software without
     * specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */

    var lib = lib$1;

    var graphlib = {
      Graph: lib.Graph,
      json: json,
      alg: alg,
      version: lib.version
    };

    /*
     * Simple doubly linked list implementation derived from Cormen, et al.,
     * "Introduction to Algorithms".
     */

    function List() {
      var sentinel = {};
      sentinel._next = sentinel._prev = sentinel;
      this._sentinel = sentinel;
    }

    List.prototype.dequeue = function () {
      var sentinel = this._sentinel;
      var entry = sentinel._prev;
      if (entry !== sentinel) {
        unlink(entry);
        return entry;
      }
    };

    List.prototype.enqueue = function (entry) {
      var sentinel = this._sentinel;
      if (entry._prev && entry._next) {
        unlink(entry);
      }
      entry._next = sentinel._next;
      sentinel._next._prev = entry;
      sentinel._next = entry;
      entry._prev = sentinel;
    };

    List.prototype.toString = function () {
      var strs = [];
      var sentinel = this._sentinel;
      var curr = sentinel._prev;
      while (curr !== sentinel) {
        strs.push(JSON.stringify(curr, filterOutLinks));
        curr = curr._prev;
      }
      return "[" + strs.join(", ") + "]";
    };

    function unlink(entry) {
      entry._prev._next = entry._next;
      entry._next._prev = entry._prev;
      delete entry._next;
      delete entry._prev;
    }

    function filterOutLinks(k, v) {
      if (k !== "_next" && k !== "_prev") {
        return v;
      }
    }

    /*
     * A greedy heuristic for finding a feedback arc set for a graph. A feedback
     * arc set is a set of edges that can be removed to make a graph acyclic.
     * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, "A fast and
     * effective heuristic for the feedback arc set problem." This implementation
     * adjusts that from the paper to allow for weighted edges.
     */

    var DEFAULT_WEIGHT_FN = lodash$1.exports.constant(1);

    function greedyFAS(g, weightFn) {
      if (g.nodeCount() <= 1) {
        return [];
      }
      var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);
      var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);

      // Expand multi-edges
      return lodash$1.exports.flatten(
        lodash$1.exports.map(results, function (e) {
          return g.outEdges(e.v, e.w);
        }),
        true
      );
    }

    function doGreedyFAS(g, buckets, zeroIdx) {
      var results = [];
      var sources = buckets[buckets.length - 1];
      var sinks = buckets[0];

      var entry;
      while (g.nodeCount()) {
        while ((entry = sinks.dequeue())) {
          removeNode(g, buckets, zeroIdx, entry);
        }
        while ((entry = sources.dequeue())) {
          removeNode(g, buckets, zeroIdx, entry);
        }
        if (g.nodeCount()) {
          for (var i = buckets.length - 2; i > 0; --i) {
            entry = buckets[i].dequeue();
            if (entry) {
              results = results.concat(
                removeNode(g, buckets, zeroIdx, entry, true)
              );
              break;
            }
          }
        }
      }

      return results;
    }

    function removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {
      var results = collectPredecessors ? [] : undefined;

      lodash$1.exports.forEach(g.inEdges(entry.v), function (edge) {
        var weight = g.edge(edge);
        var uEntry = g.node(edge.v);

        if (collectPredecessors) {
          results.push({ v: edge.v, w: edge.w });
        }

        uEntry.out -= weight;
        assignBucket(buckets, zeroIdx, uEntry);
      });

      lodash$1.exports.forEach(g.outEdges(entry.v), function (edge) {
        var weight = g.edge(edge);
        var w = edge.w;
        var wEntry = g.node(w);
        wEntry["in"] -= weight;
        assignBucket(buckets, zeroIdx, wEntry);
      });

      g.removeNode(entry.v);

      return results;
    }

    function buildState(g, weightFn) {
      var fasGraph = new graphlib.Graph();
      var maxIn = 0;
      var maxOut = 0;

      lodash$1.exports.forEach(g.nodes(), function (v) {
        fasGraph.setNode(v, { v: v, in: 0, out: 0 });
      });

      // Aggregate weights on nodes, but also sum the weights across multi-edges
      // into a single edge for the fasGraph.
      lodash$1.exports.forEach(g.edges(), function (e) {
        var prevWeight = fasGraph.edge(e.v, e.w) || 0;
        var weight = weightFn(e);
        var edgeWeight = prevWeight + weight;
        fasGraph.setEdge(e.v, e.w, edgeWeight);
        maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));
        maxIn = Math.max(maxIn, (fasGraph.node(e.w)["in"] += weight));
      });

      var buckets = lodash$1.exports.range(maxOut + maxIn + 3).map(function () {
        return new List();
      });
      var zeroIdx = maxIn + 1;

      lodash$1.exports.forEach(fasGraph.nodes(), function (v) {
        assignBucket(buckets, zeroIdx, fasGraph.node(v));
      });

      return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };
    }

    function assignBucket(buckets, zeroIdx, entry) {
      if (!entry.out) {
        buckets[0].enqueue(entry);
      } else if (!entry["in"]) {
        buckets[buckets.length - 1].enqueue(entry);
      } else {
        buckets[entry.out - entry["in"] + zeroIdx].enqueue(entry);
      }
    }

    function run$2(g) {
      var fas =
        g.graph().acyclicer === "greedy" ? greedyFAS(g, weightFn(g)) : dfsFAS(g);
      lodash$1.exports.forEach(fas, function (e) {
        var label = g.edge(e);
        g.removeEdge(e);
        label.forwardName = e.name;
        label.reversed = true;
        g.setEdge(e.w, e.v, label, lodash$1.exports.uniqueId("rev"));
      });

      function weightFn(g) {
        return function (e) {
          return g.edge(e).weight;
        };
      }
    }

    function dfsFAS(g) {
      var fas = [];
      var stack = {};
      var visited = {};

      function dfs(v) {
        if (lodash$1.exports.has(visited, v)) {
          return;
        }
        visited[v] = true;
        stack[v] = true;
        lodash$1.exports.forEach(g.outEdges(v), function (e) {
          if (lodash$1.exports.has(stack, e.w)) {
            fas.push(e);
          } else {
            dfs(e.w);
          }
        });
        delete stack[v];
      }

      lodash$1.exports.forEach(g.nodes(), dfs);
      return fas;
    }

    /* eslint "no-console": off */

    /*
     * Adds a dummy node to the graph and return v.
     */
    function addDummyNode(g, type, attrs, name) {
      var v;
      do {
        v = lodash$1.exports.uniqueId(name);
      } while (g.hasNode(v));

      attrs.dummy = type;
      g.setNode(v, attrs);
      return v;
    }

    /*
     * Returns a new graph with only simple edges. Handles aggregation of data
     * associated with multi-edges.
     */
    function simplify(g) {
      var simplified = new graphlib.Graph().setGraph(g.graph());
      lodash$1.exports.forEach(g.nodes(), function (v) {
        simplified.setNode(v, g.node(v));
      });
      lodash$1.exports.forEach(g.edges(), function (e) {
        var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };
        var label = g.edge(e);
        simplified.setEdge(e.v, e.w, {
          weight: simpleLabel.weight + label.weight,
          minlen: Math.max(simpleLabel.minlen, label.minlen),
        });
      });
      return simplified;
    }

    function asNonCompoundGraph(g) {
      var simplified = new graphlib.Graph({
        multigraph: g.isMultigraph(),
      }).setGraph(g.graph());
      lodash$1.exports.forEach(g.nodes(), function (v) {
        if (!g.children(v).length) {
          simplified.setNode(v, g.node(v));
        }
      });
      lodash$1.exports.forEach(g.edges(), function (e) {
        simplified.setEdge(e, g.edge(e));
      });
      return simplified;
    }

    /*
     * Given a DAG with each node assigned "rank" and "order" properties, this
     * function will produce a matrix with the ids of each node.
     */
    function buildLayerMatrix(g) {
      var layering = lodash$1.exports.map(lodash$1.exports.range(maxRank(g) + 1), function () {
        return [];
      });
      lodash$1.exports.forEach(g.nodes(), function (v) {
        var node = g.node(v);
        var rank = node.rank;
        if (!lodash$1.exports.isUndefined(rank)) {
          layering[rank][node.order] = v;
        }
      });
      return layering;
    }

    /*
     * Adjusts the ranks for all nodes in the graph such that all nodes v have
     * rank(v) >= 0 and at least one node w has rank(w) = 0.
     */
    function normalizeRanks(g) {
      var min = lodash$1.exports.min(
        lodash$1.exports.map(g.nodes(), function (v) {
          return g.node(v).rank;
        })
      );
      lodash$1.exports.forEach(g.nodes(), function (v) {
        var node = g.node(v);
        if (lodash$1.exports.has(node, "rank")) {
          node.rank -= min;
        }
      });
    }

    function removeEmptyRanks(g) {
      // Ranks may not start at 0, so we need to offset them
      var offset = lodash$1.exports.min(
        lodash$1.exports.map(g.nodes(), function (v) {
          return g.node(v).rank;
        })
      );

      var layers = [];
      lodash$1.exports.forEach(g.nodes(), function (v) {
        var rank = g.node(v).rank - offset;
        if (!layers[rank]) {
          layers[rank] = [];
        }
        layers[rank].push(v);
      });

      var delta = 0;
      var nodeRankFactor = g.graph().nodeRankFactor;
      lodash$1.exports.forEach(layers, function (vs, i) {
        if (lodash$1.exports.isUndefined(vs) && i % nodeRankFactor !== 0) {
          --delta;
        } else if (delta) {
          lodash$1.exports.forEach(vs, function (v) {
            g.node(v).rank += delta;
          });
        }
      });
    }

    function addBorderNode$1(g, prefix, rank, order) {
      var node = {
        width: 0,
        height: 0,
      };
      if (arguments.length >= 4) {
        node.rank = rank;
        node.order = order;
      }
      return addDummyNode(g, "border", node, prefix);
    }

    function maxRank(g) {
      return lodash$1.exports.max(
        lodash$1.exports.map(g.nodes(), function (v) {
          var rank = g.node(v).rank;
          if (!lodash$1.exports.isUndefined(rank)) {
            return rank;
          }
        })
      );
    }

    /*
     * Partition a collection into two groups: `lhs` and `rhs`. If the supplied
     * function returns true for an entry it goes into `lhs`. Otherwise it goes
     * into `rhs.
     */
    function partition(collection, fn) {
      var result = { lhs: [], rhs: [] };
      lodash$1.exports.forEach(collection, function (value) {
        if (fn(value)) {
          result.lhs.push(value);
        } else {
          result.rhs.push(value);
        }
      });
      return result;
    }

    /*
     * Returns a new function that wraps `fn` with a timer. The wrapper logs the
     * time it takes to execute the function.
     */
    function time(name, fn) {
      var start = lodash$1.exports.now();
      try {
        return fn();
      } finally {
        console.log(name + " time: " + (lodash$1.exports.now() - start) + "ms");
      }
    }

    function notime(name, fn) {
      return fn();
    }

    /*
     * Breaks any long edges in the graph into short segments that span 1 layer
     * each. This operation is undoable with the denormalize function.
     *
     * Pre-conditions:
     *
     *    1. The input graph is a DAG.
     *    2. Each node in the graph has a "rank" property.
     *
     * Post-condition:
     *
     *    1. All edges in the graph have a length of 1.
     *    2. Dummy nodes are added where edges have been split into segments.
     *    3. The graph is augmented with a "dummyChains" attribute which contains
     *       the first dummy in each chain of dummy nodes produced.
     */
    function run$1(g) {
      g.graph().dummyChains = [];
      lodash$1.exports.forEach(g.edges(), function (edge) {
        normalizeEdge(g, edge);
      });
    }

    function normalizeEdge(g, e) {
      var v = e.v;
      var vRank = g.node(v).rank;
      var w = e.w;
      var wRank = g.node(w).rank;
      var name = e.name;
      var edgeLabel = g.edge(e);
      var labelRank = edgeLabel.labelRank;

      if (wRank === vRank + 1) return;

      g.removeEdge(e);

      var dummy, attrs, i;
      for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {
        edgeLabel.points = [];
        attrs = {
          width: 0,
          height: 0,
          edgeLabel: edgeLabel,
          edgeObj: e,
          rank: vRank,
        };
        dummy = addDummyNode(g, "edge", attrs, "_d");
        if (vRank === labelRank) {
          attrs.width = edgeLabel.width;
          attrs.height = edgeLabel.height;
          attrs.dummy = "edge-label";
          attrs.labelpos = edgeLabel.labelpos;
        }
        g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);
        if (i === 0) {
          g.graph().dummyChains.push(dummy);
        }
        v = dummy;
      }

      g.setEdge(v, w, { weight: edgeLabel.weight }, name);
    }

    /*
     * Initializes ranks for the input graph using the longest path algorithm. This
     * algorithm scales well and is fast in practice, it yields rather poor
     * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom
     * ranks wide and leaving edges longer than necessary. However, due to its
     * speed, this algorithm is good for getting an initial ranking that can be fed
     * into other algorithms.
     *
     * This algorithm does not normalize layers because it will be used by other
     * algorithms in most cases. If using this algorithm directly, be sure to
     * run normalize at the end.
     *
     * Pre-conditions:
     *
     *    1. Input graph is a DAG.
     *    2. Input graph node labels can be assigned properties.
     *
     * Post-conditions:
     *
     *    1. Each node will be assign an (unnormalized) "rank" property.
     */
    function longestPath(g) {
      var visited = {};

      function dfs(v) {
        var label = g.node(v);
        if (lodash$1.exports.has(visited, v)) {
          return label.rank;
        }
        visited[v] = true;

        var rank = lodash$1.exports.min(
          lodash$1.exports.map(g.outEdges(v), function (e) {
            return dfs(e.w) - g.edge(e).minlen;
          })
        );

        if (
          rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3
          rank === undefined || // return value of _.map([]) for Lodash 4
          rank === null
        ) {
          // return value of _.map([null])
          rank = 0;
        }

        return (label.rank = rank);
      }

      lodash$1.exports.forEach(g.sources(), dfs);
    }

    /*
     * Returns the amount of slack for the given edge. The slack is defined as the
     * difference between the length of the edge and its minimum length.
     */
    function slack(g, e) {
      return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;
    }

    /*
     * Constructs a spanning tree with tight edges and adjusted the input node's
     * ranks to achieve this. A tight edge is one that is has a length that matches
     * its "minlen" attribute.
     *
     * The basic structure for this function is derived from Gansner, et al., "A
     * Technique for Drawing Directed Graphs."
     *
     * Pre-conditions:
     *
     *    1. Graph must be a DAG.
     *    2. Graph must be connected.
     *    3. Graph must have at least one node.
     *    5. Graph nodes must have been previously assigned a "rank" property that
     *       respects the "minlen" property of incident edges.
     *    6. Graph edges must have a "minlen" property.
     *
     * Post-conditions:
     *
     *    - Graph nodes will have their rank adjusted to ensure that all edges are
     *      tight.
     *
     * Returns a tree (undirected graph) that is constructed using only "tight"
     * edges.
     */
    function feasibleTree(g) {
      var t = new graphlib.Graph({ directed: false });

      // Choose arbitrary node from which to start our tree
      var start = g.nodes()[0];
      var size = g.nodeCount();
      t.setNode(start, {});

      var edge, delta;
      while (tightTree(t, g) < size) {
        edge = findMinSlackEdge(t, g);
        delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);
        shiftRanks(t, g, delta);
      }

      return t;
    }

    /*
     * Finds a maximal tree of tight edges and returns the number of nodes in the
     * tree.
     */
    function tightTree(t, g) {
      function dfs(v) {
        lodash$1.exports.forEach(g.nodeEdges(v), function (e) {
          var edgeV = e.v,
            w = v === edgeV ? e.w : edgeV;
          if (!t.hasNode(w) && !slack(g, e)) {
            t.setNode(w, {});
            t.setEdge(v, w, {});
            dfs(w);
          }
        });
      }

      lodash$1.exports.forEach(t.nodes(), dfs);
      return t.nodeCount();
    }

    /*
     * Finds the edge with the smallest slack that is incident on tree and returns
     * it.
     */
    function findMinSlackEdge(t, g) {
      return lodash$1.exports.minBy(g.edges(), function (e) {
        if (t.hasNode(e.v) !== t.hasNode(e.w)) {
          return slack(g, e);
        }
      });
    }

    function shiftRanks(t, g, delta) {
      lodash$1.exports.forEach(t.nodes(), function (v) {
        g.node(v).rank += delta;
      });
    }

    // Expose some internals for testing purposes
    networkSimplex.initLowLimValues = initLowLimValues;
    networkSimplex.initCutValues = initCutValues;
    networkSimplex.calcCutValue = calcCutValue;
    networkSimplex.leaveEdge = leaveEdge;
    networkSimplex.enterEdge = enterEdge;
    networkSimplex.exchangeEdges = exchangeEdges;

    /*
     * The network simplex algorithm assigns ranks to each node in the input graph
     * and iteratively improves the ranking to reduce the length of edges.
     *
     * Preconditions:
     *
     *    1. The input graph must be a DAG.
     *    2. All nodes in the graph must have an object value.
     *    3. All edges in the graph must have "minlen" and "weight" attributes.
     *
     * Postconditions:
     *
     *    1. All nodes in the graph will have an assigned "rank" attribute that has
     *       been optimized by the network simplex algorithm. Ranks start at 0.
     *
     *
     * A rough sketch of the algorithm is as follows:
     *
     *    1. Assign initial ranks to each node. We use the longest path algorithm,
     *       which assigns ranks to the lowest position possible. In general this
     *       leads to very wide bottom ranks and unnecessarily long edges.
     *    2. Construct a feasible tight tree. A tight tree is one such that all
     *       edges in the tree have no slack (difference between length of edge
     *       and minlen for the edge). This by itself greatly improves the assigned
     *       rankings by shorting edges.
     *    3. Iteratively find edges that have negative cut values. Generally a
     *       negative cut value indicates that the edge could be removed and a new
     *       tree edge could be added to produce a more compact graph.
     *
     * Much of the algorithms here are derived from Gansner, et al., "A Technique
     * for Drawing Directed Graphs." The structure of the file roughly follows the
     * structure of the overall algorithm.
     */
    function networkSimplex(g) {
      g = simplify(g);
      longestPath(g);
      var t = feasibleTree(g);
      initLowLimValues(t);
      initCutValues(t, g);

      var e, f;
      while ((e = leaveEdge(t))) {
        f = enterEdge(t, g, e);
        exchangeEdges(t, g, e, f);
      }
    }

    /*
     * Initializes cut values for all edges in the tree.
     */
    function initCutValues(t, g) {
      var vs = graphlib.alg.postorder(t, t.nodes());
      vs = vs.slice(0, vs.length - 1);
      lodash$1.exports.forEach(vs, function (v) {
        assignCutValue(t, g, v);
      });
    }

    function assignCutValue(t, g, child) {
      var childLab = t.node(child);
      var parent = childLab.parent;
      t.edge(child, parent).cutvalue = calcCutValue(t, g, child);
    }

    /*
     * Given the tight tree, its graph, and a child in the graph calculate and
     * return the cut value for the edge between the child and its parent.
     */
    function calcCutValue(t, g, child) {
      var childLab = t.node(child);
      var parent = childLab.parent;
      // True if the child is on the tail end of the edge in the directed graph
      var childIsTail = true;
      // The graph's view of the tree edge we're inspecting
      var graphEdge = g.edge(child, parent);
      // The accumulated cut value for the edge between this node and its parent
      var cutValue = 0;

      if (!graphEdge) {
        childIsTail = false;
        graphEdge = g.edge(parent, child);
      }

      cutValue = graphEdge.weight;

      lodash$1.exports.forEach(g.nodeEdges(child), function (e) {
        var isOutEdge = e.v === child,
          other = isOutEdge ? e.w : e.v;

        if (other !== parent) {
          var pointsToHead = isOutEdge === childIsTail,
            otherWeight = g.edge(e).weight;

          cutValue += pointsToHead ? otherWeight : -otherWeight;
          if (isTreeEdge(t, child, other)) {
            var otherCutValue = t.edge(child, other).cutvalue;
            cutValue += pointsToHead ? -otherCutValue : otherCutValue;
          }
        }
      });

      return cutValue;
    }

    function initLowLimValues(tree, root) {
      if (arguments.length < 2) {
        root = tree.nodes()[0];
      }
      dfsAssignLowLim(tree, {}, 1, root);
    }

    function dfsAssignLowLim(tree, visited, nextLim, v, parent) {
      var low = nextLim;
      var label = tree.node(v);

      visited[v] = true;
      lodash$1.exports.forEach(tree.neighbors(v), function (w) {
        if (!lodash$1.exports.has(visited, w)) {
          nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);
        }
      });

      label.low = low;
      label.lim = nextLim++;
      if (parent) {
        label.parent = parent;
      } else {
        // TODO should be able to remove this when we incrementally update low lim
        delete label.parent;
      }

      return nextLim;
    }

    function leaveEdge(tree) {
      return lodash$1.exports.find(tree.edges(), function (e) {
        return tree.edge(e).cutvalue < 0;
      });
    }

    function enterEdge(t, g, edge) {
      var v = edge.v;
      var w = edge.w;

      // For the rest of this function we assume that v is the tail and w is the
      // head, so if we don't have this edge in the graph we should flip it to
      // match the correct orientation.
      if (!g.hasEdge(v, w)) {
        v = edge.w;
        w = edge.v;
      }

      var vLabel = t.node(v);
      var wLabel = t.node(w);
      var tailLabel = vLabel;
      var flip = false;

      // If the root is in the tail of the edge then we need to flip the logic that
      // checks for the head and tail nodes in the candidates function below.
      if (vLabel.lim > wLabel.lim) {
        tailLabel = wLabel;
        flip = true;
      }

      var candidates = lodash$1.exports.filter(g.edges(), function (edge) {
        return (
          flip === isDescendant(t, t.node(edge.v), tailLabel) &&
          flip !== isDescendant(t, t.node(edge.w), tailLabel)
        );
      });

      return lodash$1.exports.minBy(candidates, function (edge) {
        return slack(g, edge);
      });
    }

    function exchangeEdges(t, g, e, f) {
      var v = e.v;
      var w = e.w;
      t.removeEdge(v, w);
      t.setEdge(f.v, f.w, {});
      initLowLimValues(t);
      initCutValues(t, g);
      updateRanks(t, g);
    }

    function updateRanks(t, g) {
      var root = lodash$1.exports.find(t.nodes(), function (v) {
        return !g.node(v).parent;
      });
      var vs = graphlib.alg.preorder(t, root);
      vs = vs.slice(1);
      lodash$1.exports.forEach(vs, function (v) {
        var parent = t.node(v).parent,
          edge = g.edge(v, parent),
          flipped = false;

        if (!edge) {
          edge = g.edge(parent, v);
          flipped = true;
        }

        g.node(v).rank =
          g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);
      });
    }

    /*
     * Returns true if the edge is in the tree.
     */
    function isTreeEdge(tree, u, v) {
      return tree.hasEdge(u, v);
    }

    /*
     * Returns true if the specified node is descendant of the root node per the
     * assigned low and lim attributes in the tree.
     */
    function isDescendant(tree, vLabel, rootLabel) {
      return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;
    }

    /*
     * Assigns a rank to each node in the input graph that respects the "minlen"
     * constraint specified on edges between nodes.
     *
     * This basic structure is derived from Gansner, et al., "A Technique for
     * Drawing Directed Graphs."
     *
     * Pre-conditions:
     *
     *    1. Graph must be a connected DAG
     *    2. Graph nodes must be objects
     *    3. Graph edges must have "weight" and "minlen" attributes
     *
     * Post-conditions:
     *
     *    1. Graph nodes will have a "rank" attribute based on the results of the
     *       algorithm. Ranks can start at any index (including negative), we'll
     *       fix them up later.
     */
    function rank(g) {
      switch (g.graph().ranker) {
        case "network-simplex":
          networkSimplexRanker(g);
          break;
        case "tight-tree":
          tightTreeRanker(g);
          break;
        case "longest-path":
          longestPathRanker(g);
          break;
        default:
          networkSimplexRanker(g);
      }
    }

    // A fast and simple ranker, but results are far from optimal.
    var longestPathRanker = longestPath;

    function tightTreeRanker(g) {
      longestPath(g);
      feasibleTree(g);
    }

    function networkSimplexRanker(g) {
      networkSimplex(g);
    }

    function parentDummyChains(g) {
      var postorderNums = postorder(g);

      lodash$1.exports.forEach(g.graph().dummyChains, function (v) {
        var node = g.node(v);
        var edgeObj = node.edgeObj;
        var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);
        var path = pathData.path;
        var lca = pathData.lca;
        var pathIdx = 0;
        var pathV = path[pathIdx];
        var ascending = true;

        while (v !== edgeObj.w) {
          node = g.node(v);

          if (ascending) {
            while (
              (pathV = path[pathIdx]) !== lca &&
              g.node(pathV).maxRank < node.rank
            ) {
              pathIdx++;
            }

            if (pathV === lca) {
              ascending = false;
            }
          }

          if (!ascending) {
            while (
              pathIdx < path.length - 1 &&
              g.node((pathV = path[pathIdx + 1])).minRank <= node.rank
            ) {
              pathIdx++;
            }
            pathV = path[pathIdx];
          }

          g.setParent(v, pathV);
          v = g.successors(v)[0];
        }
      });
    }

    // Find a path from v to w through the lowest common ancestor (LCA). Return the
    // full path and the LCA.
    function findPath(g, postorderNums, v, w) {
      var vPath = [];
      var wPath = [];
      var low = Math.min(postorderNums[v].low, postorderNums[w].low);
      var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);
      var parent;
      var lca;

      // Traverse up from v to find the LCA
      parent = v;
      do {
        parent = g.parent(parent);
        vPath.push(parent);
      } while (
        parent &&
        (postorderNums[parent].low > low || lim > postorderNums[parent].lim)
      );
      lca = parent;

      // Traverse from w to LCA
      parent = w;
      while ((parent = g.parent(parent)) !== lca) {
        wPath.push(parent);
      }

      return { path: vPath.concat(wPath.reverse()), lca: lca };
    }

    function postorder(g) {
      var result = {};
      var lim = 0;

      function dfs(v) {
        var low = lim;
        lodash$1.exports.forEach(g.children(v), dfs);
        result[v] = { low: low, lim: lim++ };
      }
      lodash$1.exports.forEach(g.children(), dfs);

      return result;
    }

    /*
     * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,
     * adds appropriate edges to ensure that all cluster nodes are placed between
     * these boundries, and ensures that the graph is connected.
     *
     * In addition we ensure, through the use of the minlen property, that nodes
     * and subgraph border nodes to not end up on the same rank.
     *
     * Preconditions:
     *
     *    1. Input graph is a DAG
     *    2. Nodes in the input graph has a minlen attribute
     *
     * Postconditions:
     *
     *    1. Input graph is connected.
     *    2. Dummy nodes are added for the tops and bottoms of subgraphs.
     *    3. The minlen attribute for nodes is adjusted to ensure nodes do not
     *       get placed on the same rank as subgraph border nodes.
     *
     * The nesting graph idea comes from Sander, "Layout of Compound Directed
     * Graphs."
     */
    function run(g) {
      var root = addDummyNode(g, "root", {}, "_root");
      var depths = treeDepths(g);
      var height = lodash$1.exports.max(lodash$1.exports.values(depths)) - 1; // Note: depths is an Object not an array
      var nodeSep = 2 * height + 1;

      g.graph().nestingRoot = root;

      // Multiply minlen by nodeSep to align nodes on non-border ranks.
      lodash$1.exports.forEach(g.edges(), function (e) {
        g.edge(e).minlen *= nodeSep;
      });

      // Calculate a weight that is sufficient to keep subgraphs vertically compact
      var weight = sumWeights(g) + 1;

      // Create border nodes and link them up
      lodash$1.exports.forEach(g.children(), function (child) {
        dfs(g, root, nodeSep, weight, height, depths, child);
      });

      // Save the multiplier for node layers for later removal of empty border
      // layers.
      g.graph().nodeRankFactor = nodeSep;
    }

    function dfs(g, root, nodeSep, weight, height, depths, v) {
      var children = g.children(v);
      if (!children.length) {
        if (v !== root) {
          g.setEdge(root, v, { weight: 0, minlen: nodeSep });
        }
        return;
      }

      var top = addBorderNode$1(g, "_bt");
      var bottom = addBorderNode$1(g, "_bb");
      var label = g.node(v);

      g.setParent(top, v);
      label.borderTop = top;
      g.setParent(bottom, v);
      label.borderBottom = bottom;

      lodash$1.exports.forEach(children, function (child) {
        dfs(g, root, nodeSep, weight, height, depths, child);

        var childNode = g.node(child);
        var childTop = childNode.borderTop ? childNode.borderTop : child;
        var childBottom = childNode.borderBottom ? childNode.borderBottom : child;
        var thisWeight = childNode.borderTop ? weight : 2 * weight;
        var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;

        g.setEdge(top, childTop, {
          weight: thisWeight,
          minlen: minlen,
          nestingEdge: true,
        });

        g.setEdge(childBottom, bottom, {
          weight: thisWeight,
          minlen: minlen,
          nestingEdge: true,
        });
      });

      if (!g.parent(v)) {
        g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });
      }
    }

    function treeDepths(g) {
      var depths = {};
      function dfs(v, depth) {
        var children = g.children(v);
        if (children && children.length) {
          lodash$1.exports.forEach(children, function (child) {
            dfs(child, depth + 1);
          });
        }
        depths[v] = depth;
      }
      lodash$1.exports.forEach(g.children(), function (v) {
        dfs(v, 1);
      });
      return depths;
    }

    function sumWeights(g) {
      return lodash$1.exports.reduce(
        g.edges(),
        function (acc, e) {
          return acc + g.edge(e).weight;
        },
        0
      );
    }

    function cleanup(g) {
      var graphLabel = g.graph();
      g.removeNode(graphLabel.nestingRoot);
      delete graphLabel.nestingRoot;
      lodash$1.exports.forEach(g.edges(), function (e) {
        var edge = g.edge(e);
        if (edge.nestingEdge) {
          g.removeEdge(e);
        }
      });
    }

    function addBorderSegments(g) {
      function dfs(v) {
        var children = g.children(v);
        var node = g.node(v);
        if (children.length) {
          lodash$1.exports.forEach(children, dfs);
        }

        if (lodash$1.exports.has(node, "minRank")) {
          node.borderLeft = [];
          node.borderRight = [];
          for (
            var rank = node.minRank, maxRank = node.maxRank + 1;
            rank < maxRank;
            ++rank
          ) {
            addBorderNode(g, "borderLeft", "_bl", v, node, rank);
            addBorderNode(g, "borderRight", "_br", v, node, rank);
          }
        }
      }

      lodash$1.exports.forEach(g.children(), dfs);
    }

    function addBorderNode(g, prop, prefix, sg, sgNode, rank) {
      var label = { width: 0, height: 0, rank: rank, borderType: prop };
      var prev = sgNode[prop][rank - 1];
      var curr = addDummyNode(g, "border", label, prefix);
      sgNode[prop][rank] = curr;
      g.setParent(curr, sg);
      if (prev) {
        g.setEdge(prev, curr, { weight: 1 });
      }
    }

    /*
     * Assigns an initial order value for each node by performing a DFS search
     * starting from nodes in the first rank. Nodes are assigned an order in their
     * rank as they are first visited.
     *
     * This approach comes from Gansner, et al., "A Technique for Drawing Directed
     * Graphs."
     *
     * Returns a layering matrix with an array per layer and each layer sorted by
     * the order of its nodes.
     */
    function initOrder(g) {
      var visited = {};
      var simpleNodes = lodash$1.exports.filter(g.nodes(), function (v) {
        return !g.children(v).length;
      });
      var maxRank = lodash$1.exports.max(
        lodash$1.exports.map(simpleNodes, function (v) {
          return g.node(v).rank;
        })
      );
      var layers = lodash$1.exports.map(lodash$1.exports.range(maxRank + 1), function () {
        return [];
      });

      function dfs(v) {
        if (lodash$1.exports.has(visited, v)) return;
        visited[v] = true;
        var node = g.node(v);
        layers[node.rank].push(v);
        lodash$1.exports.forEach(g.successors(v), dfs);
      }

      var orderedVs = lodash$1.exports.sortBy(simpleNodes, function (v) {
        return g.node(v).rank;
      });
      lodash$1.exports.forEach(orderedVs, dfs);

      return layers;
    }

    /*
     * A function that takes a layering (an array of layers, each with an array of
     * ordererd nodes) and a graph and returns a weighted crossing count.
     *
     * Pre-conditions:
     *
     *    1. Input graph must be simple (not a multigraph), directed, and include
     *       only simple edges.
     *    2. Edges in the input graph must have assigned weights.
     *
     * Post-conditions:
     *
     *    1. The graph and layering matrix are left unchanged.
     *
     * This algorithm is derived from Barth, et al., "Bilayer Cross Counting."
     */
    function crossCount(g, layering) {
      var cc = 0;
      for (var i = 1; i < layering.length; ++i) {
        cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);
      }
      return cc;
    }

    function twoLayerCrossCount(g, northLayer, southLayer) {
      // Sort all of the edges between the north and south layers by their position
      // in the north layer and then the south. Map these edges to the position of
      // their head in the south layer.
      var southPos = lodash$1.exports.zipObject(
        southLayer,
        lodash$1.exports.map(southLayer, function (v, i) {
          return i;
        })
      );
      var southEntries = lodash$1.exports.flatten(
        lodash$1.exports.map(northLayer, function (v) {
          return lodash$1.exports.sortBy(
            lodash$1.exports.map(g.outEdges(v), function (e) {
              return { pos: southPos[e.w], weight: g.edge(e).weight };
            }),
            "pos"
          );
        }),
        true
      );

      // Build the accumulator tree
      var firstIndex = 1;
      while (firstIndex < southLayer.length) firstIndex <<= 1;
      var treeSize = 2 * firstIndex - 1;
      firstIndex -= 1;
      var tree = lodash$1.exports.map(new Array(treeSize), function () {
        return 0;
      });

      // Calculate the weighted crossings
      var cc = 0;
      lodash$1.exports.forEach(
        southEntries.forEach(function (entry) {
          var index = entry.pos + firstIndex;
          tree[index] += entry.weight;
          var weightSum = 0;
          while (index > 0) {
            if (index % 2) {
              weightSum += tree[index + 1];
            }
            index = (index - 1) >> 1;
            tree[index] += entry.weight;
          }
          cc += entry.weight * weightSum;
        })
      );

      return cc;
    }

    function barycenter(g, movable) {
      return lodash$1.exports.map(movable, function (v) {
        var inV = g.inEdges(v);
        if (!inV.length) {
          return { v: v };
        } else {
          var result = lodash$1.exports.reduce(
            inV,
            function (acc, e) {
              var edge = g.edge(e),
                nodeU = g.node(e.v);
              return {
                sum: acc.sum + edge.weight * nodeU.order,
                weight: acc.weight + edge.weight,
              };
            },
            { sum: 0, weight: 0 }
          );

          return {
            v: v,
            barycenter: result.sum / result.weight,
            weight: result.weight,
          };
        }
      });
    }

    /*
     * Given a list of entries of the form {v, barycenter, weight} and a
     * constraint graph this function will resolve any conflicts between the
     * constraint graph and the barycenters for the entries. If the barycenters for
     * an entry would violate a constraint in the constraint graph then we coalesce
     * the nodes in the conflict into a new node that respects the contraint and
     * aggregates barycenter and weight information.
     *
     * This implementation is based on the description in Forster, "A Fast and
     * Simple Hueristic for Constrained Two-Level Crossing Reduction," thought it
     * differs in some specific details.
     *
     * Pre-conditions:
     *
     *    1. Each entry has the form {v, barycenter, weight}, or if the node has
     *       no barycenter, then {v}.
     *
     * Returns:
     *
     *    A new list of entries of the form {vs, i, barycenter, weight}. The list
     *    `vs` may either be a singleton or it may be an aggregation of nodes
     *    ordered such that they do not violate constraints from the constraint
     *    graph. The property `i` is the lowest original index of any of the
     *    elements in `vs`.
     */
    function resolveConflicts(entries, cg) {
      var mappedEntries = {};
      lodash$1.exports.forEach(entries, function (entry, i) {
        var tmp = (mappedEntries[entry.v] = {
          indegree: 0,
          in: [],
          out: [],
          vs: [entry.v],
          i: i,
        });
        if (!lodash$1.exports.isUndefined(entry.barycenter)) {
          tmp.barycenter = entry.barycenter;
          tmp.weight = entry.weight;
        }
      });

      lodash$1.exports.forEach(cg.edges(), function (e) {
        var entryV = mappedEntries[e.v];
        var entryW = mappedEntries[e.w];
        if (!lodash$1.exports.isUndefined(entryV) && !lodash$1.exports.isUndefined(entryW)) {
          entryW.indegree++;
          entryV.out.push(mappedEntries[e.w]);
        }
      });

      var sourceSet = lodash$1.exports.filter(mappedEntries, function (entry) {
        return !entry.indegree;
      });

      return doResolveConflicts(sourceSet);
    }

    function doResolveConflicts(sourceSet) {
      var entries = [];

      function handleIn(vEntry) {
        return function (uEntry) {
          if (uEntry.merged) {
            return;
          }
          if (
            lodash$1.exports.isUndefined(uEntry.barycenter) ||
            lodash$1.exports.isUndefined(vEntry.barycenter) ||
            uEntry.barycenter >= vEntry.barycenter
          ) {
            mergeEntries(vEntry, uEntry);
          }
        };
      }

      function handleOut(vEntry) {
        return function (wEntry) {
          wEntry["in"].push(vEntry);
          if (--wEntry.indegree === 0) {
            sourceSet.push(wEntry);
          }
        };
      }

      while (sourceSet.length) {
        var entry = sourceSet.pop();
        entries.push(entry);
        lodash$1.exports.forEach(entry["in"].reverse(), handleIn(entry));
        lodash$1.exports.forEach(entry.out, handleOut(entry));
      }

      return lodash$1.exports.map(
        lodash$1.exports.filter(entries, function (entry) {
          return !entry.merged;
        }),
        function (entry) {
          return lodash$1.exports.pick(entry, ["vs", "i", "barycenter", "weight"]);
        }
      );
    }

    function mergeEntries(target, source) {
      var sum = 0;
      var weight = 0;

      if (target.weight) {
        sum += target.barycenter * target.weight;
        weight += target.weight;
      }

      if (source.weight) {
        sum += source.barycenter * source.weight;
        weight += source.weight;
      }

      target.vs = source.vs.concat(target.vs);
      target.barycenter = sum / weight;
      target.weight = weight;
      target.i = Math.min(source.i, target.i);
      source.merged = true;
    }

    function sort(entries, biasRight) {
      var parts = partition(entries, function (entry) {
        return lodash$1.exports.has(entry, "barycenter");
      });
      var sortable = parts.lhs,
        unsortable = lodash$1.exports.sortBy(parts.rhs, function (entry) {
          return -entry.i;
        }),
        vs = [],
        sum = 0,
        weight = 0,
        vsIndex = 0;

      sortable.sort(compareWithBias(!!biasRight));

      vsIndex = consumeUnsortable(vs, unsortable, vsIndex);

      lodash$1.exports.forEach(sortable, function (entry) {
        vsIndex += entry.vs.length;
        vs.push(entry.vs);
        sum += entry.barycenter * entry.weight;
        weight += entry.weight;
        vsIndex = consumeUnsortable(vs, unsortable, vsIndex);
      });

      var result = { vs: lodash$1.exports.flatten(vs, true) };
      if (weight) {
        result.barycenter = sum / weight;
        result.weight = weight;
      }
      return result;
    }

    function consumeUnsortable(vs, unsortable, index) {
      var last;
      while (unsortable.length && (last = lodash$1.exports.last(unsortable)).i <= index) {
        unsortable.pop();
        vs.push(last.vs);
        index++;
      }
      return index;
    }

    function compareWithBias(bias) {
      return function (entryV, entryW) {
        if (entryV.barycenter < entryW.barycenter) {
          return -1;
        } else if (entryV.barycenter > entryW.barycenter) {
          return 1;
        }

        return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;
      };
    }

    function sortSubgraph(g, v, cg, biasRight) {
      var movable = g.children(v);
      var node = g.node(v);
      var bl = node ? node.borderLeft : undefined;
      var br = node ? node.borderRight : undefined;
      var subgraphs = {};

      if (bl) {
        movable = lodash$1.exports.filter(movable, function (w) {
          return w !== bl && w !== br;
        });
      }

      var barycenters = barycenter(g, movable);
      lodash$1.exports.forEach(barycenters, function (entry) {
        if (g.children(entry.v).length) {
          var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);
          subgraphs[entry.v] = subgraphResult;
          if (lodash$1.exports.has(subgraphResult, "barycenter")) {
            mergeBarycenters(entry, subgraphResult);
          }
        }
      });

      var entries = resolveConflicts(barycenters, cg);
      expandSubgraphs(entries, subgraphs);

      var result = sort(entries, biasRight);

      if (bl) {
        result.vs = lodash$1.exports.flatten([bl, result.vs, br], true);
        if (g.predecessors(bl).length) {
          var blPred = g.node(g.predecessors(bl)[0]),
            brPred = g.node(g.predecessors(br)[0]);
          if (!lodash$1.exports.has(result, "barycenter")) {
            result.barycenter = 0;
            result.weight = 0;
          }
          result.barycenter =
            (result.barycenter * result.weight + blPred.order + brPred.order) /
            (result.weight + 2);
          result.weight += 2;
        }
      }

      return result;
    }

    function expandSubgraphs(entries, subgraphs) {
      lodash$1.exports.forEach(entries, function (entry) {
        entry.vs = lodash$1.exports.flatten(
          entry.vs.map(function (v) {
            if (subgraphs[v]) {
              return subgraphs[v].vs;
            }
            return v;
          }),
          true
        );
      });
    }

    function mergeBarycenters(target, other) {
      if (!lodash$1.exports.isUndefined(target.barycenter)) {
        target.barycenter =
          (target.barycenter * target.weight + other.barycenter * other.weight) /
          (target.weight + other.weight);
        target.weight += other.weight;
      } else {
        target.barycenter = other.barycenter;
        target.weight = other.weight;
      }
    }

    /*
     * Constructs a graph that can be used to sort a layer of nodes. The graph will
     * contain all base and subgraph nodes from the request layer in their original
     * hierarchy and any edges that are incident on these nodes and are of the type
     * requested by the "relationship" parameter.
     *
     * Nodes from the requested rank that do not have parents are assigned a root
     * node in the output graph, which is set in the root graph attribute. This
     * makes it easy to walk the hierarchy of movable nodes during ordering.
     *
     * Pre-conditions:
     *
     *    1. Input graph is a DAG
     *    2. Base nodes in the input graph have a rank attribute
     *    3. Subgraph nodes in the input graph has minRank and maxRank attributes
     *    4. Edges have an assigned weight
     *
     * Post-conditions:
     *
     *    1. Output graph has all nodes in the movable rank with preserved
     *       hierarchy.
     *    2. Root nodes in the movable layer are made children of the node
     *       indicated by the root attribute of the graph.
     *    3. Non-movable nodes incident on movable nodes, selected by the
     *       relationship parameter, are included in the graph (without hierarchy).
     *    4. Edges incident on movable nodes, selected by the relationship
     *       parameter, are added to the output graph.
     *    5. The weights for copied edges are aggregated as need, since the output
     *       graph is not a multi-graph.
     */
    function buildLayerGraph(g, rank, relationship) {
      var root = createRootNode(g),
        result = new graphlib.Graph({ compound: true })
          .setGraph({ root: root })
          .setDefaultNodeLabel(function (v) {
            return g.node(v);
          });

      lodash$1.exports.forEach(g.nodes(), function (v) {
        var node = g.node(v),
          parent = g.parent(v);

        if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {
          result.setNode(v);
          result.setParent(v, parent || root);

          // This assumes we have only short edges!
          lodash$1.exports.forEach(g[relationship](v), function (e) {
            var u = e.v === v ? e.w : e.v,
              edge = result.edge(u, v),
              weight = !lodash$1.exports.isUndefined(edge) ? edge.weight : 0;
            result.setEdge(u, v, { weight: g.edge(e).weight + weight });
          });

          if (lodash$1.exports.has(node, "minRank")) {
            result.setNode(v, {
              borderLeft: node.borderLeft[rank],
              borderRight: node.borderRight[rank],
            });
          }
        }
      });

      return result;
    }

    function createRootNode(g) {
      var v;
      while (g.hasNode((v = lodash$1.exports.uniqueId("_root"))));
      return v;
    }

    function addSubgraphConstraints(g, cg, vs) {
      var prev = {},
        rootPrev;

      lodash$1.exports.forEach(vs, function (v) {
        var child = g.parent(v),
          parent,
          prevChild;
        while (child) {
          parent = g.parent(child);
          if (parent) {
            prevChild = prev[parent];
            prev[parent] = child;
          } else {
            prevChild = rootPrev;
            rootPrev = child;
          }
          if (prevChild && prevChild !== child) {
            cg.setEdge(prevChild, child);
            return;
          }
          child = parent;
        }
      });

      /*
      function dfs(v) {
        var children = v ? g.children(v) : g.children();
        if (children.length) {
          var min = Number.POSITIVE_INFINITY,
              subgraphs = [];
          _.each(children, function(child) {
            var childMin = dfs(child);
            if (g.children(child).length) {
              subgraphs.push({ v: child, order: childMin });
            }
            min = Math.min(min, childMin);
          });
          _.reduce(_.sortBy(subgraphs, "order"), function(prev, curr) {
            cg.setEdge(prev.v, curr.v);
            return curr;
          });
          return min;
        }
        return g.node(v).order;
      }
      dfs(undefined);
      */
    }

    var id2LNode = {};
    function runSpringEmbedder(g, layering, opts, cy) {
        var nodes = opts.eles.nodes();
        var filteredLayers = filterDummyNodesFromLayers(layering);
        randomizeOrderInLayers(filteredLayers);
        var l = new HySELayout(filteredLayers, cy);
        assignInitialPositions(g, filteredLayers, opts);
        l.swapPeriod = opts.swapPeriod;
        l.minPairSwapPeriod = opts.minPairSwapPeriod;
        l.isFastCooling = opts.isFastCooling;
        l.swapForceLimit = opts.swapForceLimit;
        l.coolingCoefficient = opts.coolingCoefficient;
        l.orderFlipPeriod = opts.orderFlipPeriod;
        l.nodeRepulsionCalculationWidth = opts.nodeRepulsionCalculationWidth;
        l.fullyCalcRep4Ticks = opts.fullyCalcRep4Ticks;
        l.uniformNodeDimensions = opts.uniformNodeDimensions;
        l.maxNodeDisplacement = opts.maxNodeDisplacement;
        l.expansionCoefficient = opts.expansionCoefficient;
        l.orderGap = opts.orderGap;
        l.performPostProcessing = opts.performPostProcessing;
        l.displayInitialPositions = opts.displayInitialPositions;
        l.randomizeInitialPositions = opts.randomizeInitialPositions;
        l.nodeRepulsion = opts.nodeRepulsion;
        l.useFRGridVariantHySE = opts.useFRGridVariant;
        l.idealEdgeLength = opts.idealEdgeLength;
        l.colorSwappedPair = !opts.colorSwappedPair;
        coseBase.CoSEConstants.TILE = false;
        console.log("opts: ", opts);
        var gm = l.newGraphManager();
        processNodes(g, gm.addRoot(), l, opts);
        processEdges(g, gm, opts);
        if (opts.animate != "during") {
            l.runLayout();
            console.log("setting positions");
            for (var i = 0; i < gm.getAllNodes().length; i++) {
                var n = gm.getAllNodes()[i];
                // console.log(counter++);
                if (!opts.isRelayer) {
                    // console.log("setting position of "+n.id.id()+" to "+n.rect.x+","+n.rect.y);
                    if (n.id instanceof Object) {
                        window['cy'].nodes('#' + n.id.id()).scratch("force_directed_pos", { x: n.rect.x, y: n.rect.y });
                    }
                    else {
                        window['cy'].nodes('#' + n.id).scratch("force_directed_pos", { x: n.rect.x, y: n.rect.y });
                    }
                }
            }
            if (opts.isRelayer) {
                layering = getNewLayeringFromForceDirected(gm, layering);
            }
        }
        else {
            runTickByTickAnimated(l, nodes, opts);
        }
        return layering;
    }
    function runTickByTickAnimated(layout, nodes, options) {
        layout.beforeLayout();
        layout.swapPeriod = options.swapPeriod;
        layout.minPairSwapPeriod = options.minPairSwapPeriod;
        layout.isFastCooling = options.isFastCooling;
        layout.swapForceLimit = options.swapForceLimit;
        layout.coolingCoefficient = options.coolingCoefficient;
        layout.orderFlipPeriod = options.orderFlipPeriod;
        layout.nodeRepulsionCalculationWidth = options.nodeRepulsionCalculationWidth;
        layout.fullyCalcRep4Ticks = options.fullyCalcRep4Ticks;
        layout.uniformNodeDimensions = options.uniformNodeDimensions;
        layout.maxNodeDisplacement = options.maxNodeDisplacement;
        layout.expansionCoefficient = options.expansionCoefficient;
        layout.orderGap = options.orderGap;
        layout.performPostProcessing = options.performPostProcessing;
        layout.displayInitialPositions = options.displayInitialPositions;
        layout.randomizeInitialPositions = options.randomizeInitialPositions;
        layout.nodeRepulsion = options.nodeRepulsion;
        layout.useFRGridVariantHySE = options.useFRGridVariant;
        layout.idealEdgeLength = options.idealEdgeLength;
        coseBase.CoSEConstants.TILE = false;
        var executeTickFn = function () {
            setTimeout(function () {
                var isLayoutEnded = false;
                for (var i = 0; i < options.ticksPerFrame && !isLayoutEnded; i++) {
                    isLayoutEnded = layout.tick();
                }
                nodes.positions(function (ele) {
                    var lNode = id2LNode[ele.id()];
                    return {
                        x: lNode.getRect().x,
                        y: lNode.getRect().y
                    };
                });
                if (!isLayoutEnded) {
                    window['cy'].fit();
                    requestAnimationFrame(executeTickFn);
                }
                else {
                    if (layout.performPostProcessing) {
                        layout.postLayoutRepulsionPhase();
                        nodes.positions(function (ele) {
                            var lNode = id2LNode[ele.id()];
                            return {
                                x: lNode.getRect().x,
                                y: lNode.getRect().y
                            };
                        });
                    }
                    console.log("Ended in ", layout.totalIterations, " ticks ");
                    if (options.stop && typeof options.stop == "function") {
                        options.stop();
                    }
                }
            }, options.tickDelay);
        };
        requestAnimationFrame(executeTickFn);
    }
    function getNewLayeringFromForceDirected(gm, layering) {
        var newLayering = [];
        var _loop_1 = function (i) {
            var layer = gm.allNodes.filter(function (x) { return x.rank == i; }).sort(function (a, b) { return a.rect.x - b.rect.x; }).map(function (x) { return x.id; });
            newLayering.push(layer);
        };
        for (var i = 0; i < layering.length; i++) {
            _loop_1(i);
        }
        return newLayering;
    }
    function assignInitialPositions(g, layering, opts) {
        var rankGap = opts.rankGap;
        var orderGap = opts.orderGap;
        var maxLayerSize = Math.max.apply(Math, __spreadArray([], __read(layering.map(function (x) { return x.length; })), false));
        var maxWidth = maxLayerSize * orderGap;
        for (var i = 0; i < layering.length; i++) {
            for (var j = 0; j < layering[i].length; j++) {
                var n = g.node(layering[i][j]);
                var layerSize = layering[i].length;
                n.x = (maxWidth / (layerSize + 1)) * (j + 1);
                n.y = rankGap * i;
            }
        }
    }
    function addChildren(g, parent, layout, opts, nodesVisited, node, hyseParent) {
        for (var i = 0; i < node.children().length; i++) {
            var n = node.children()[i];
            if (nodesVisited.includes(n.id())) {
                return;
            }
            nodesVisited.push(n.id());
            var points = null;
            var dimension = null;
            console.log("n", n);
            if (n.data("isDirected") != 1) {
                points = new coseBase$1.exports.layoutBase.PointD(0, 0);
                var nbb = n.layoutDimensions(opts);
                dimension = new coseBase$1.exports.layoutBase.DimensionD(nbb.w, nbb.h);
                var hyseNode = new HySENode(layout.graphManager, points, dimension, null, n.id(), -1);
                hyseNode.nodeRepulsion = opts.nodeRepulsion;
                hyseNode.isDirected = opts.eles.nodes('#' + n.id()).data('isDirected');
                hyseNode.noOfChildren = opts.eles.nodes('#' + n.id()).children().length + 1;
                if (hyseNode.noOfChildren > 1) {
                    var newGraph = layout.newGraph();
                    var updatedG = layout.graphManager.add(newGraph, hyseNode);
                    addChildren(g, updatedG, layout, opts, nodesVisited, n, hyseNode);
                }
                if (opts.eles.nodes('#' + n.id()).data("parent")) {
                    hyseNode.parentId = opts.eles.nodes('#' + n.id()).data("parent");
                }
                if (hyseNode.noOfChildren >= 2) {
                    hyseNode.noOfChildren -= 1;
                }
                var lNode = hyseParent.getChild().add(hyseNode);
                id2LNode[n.id()] = lNode;
            }
        }
    }
    function processNodes(g, parent, layout, opts) {
        var nodes = opts.eles.nodes().filter(function (x) { return !x.id().startsWith('_d'); });
        // node ların sol üst köşesinin koordinatları veriliyor
        var nodesVisited = [];
        for (var i = 0; i < nodes.length; i++) {
            var n = nodes[i];
            if (nodesVisited.includes(n.id())) {
                continue;
            }
            nodesVisited.push(n.id());
            var points = null;
            var dimension = null;
            //console.log("n", n);
            if (n.data("isDirected") != 1) {
                points = new coseBase$1.exports.layoutBase.PointD(0, 0);
                var nbb = n.layoutDimensions(opts);
                //console.log("nbb for ", n.id(), nbb);
                dimension = new coseBase$1.exports.layoutBase.DimensionD(nbb.w, nbb.h);
                var hyseNode = new HySENode(layout.graphManager, points, dimension, null, nodes[i].id(), -1);
                hyseNode.nodeRepulsion = opts.nodeRepulsion;
                hyseNode.isDirected = 0;
                if (hyseNode.isDirected == undefined) {
                    hyseNode.isDirected = 0;
                }
                hyseNode.noOfChildren = opts.eles.nodes('#' + nodes[i].id()).children().length + 1;
                //console.log("hyseNode.noOfChildren", opts.eles.nodes('#' + nodes[i].id()).children());
                if (hyseNode.noOfChildren > 1) {
                    var newGraph = layout.newGraph();
                    var updatedG = layout.graphManager.add(newGraph, hyseNode);
                    addChildren(g, updatedG, layout, opts, nodesVisited, n, hyseNode);
                }
                if (opts.eles.nodes('#' + nodes[i].id()).data("parent")) {
                    hyseNode.parentId = opts.eles.nodes('#' + nodes[i].id()).data("parent");
                }
                //hyseNode.parentId = opts.eles.nodes('#' + nodes[i]).parent().id();
                if (hyseNode.noOfChildren >= 2) {
                    hyseNode.noOfChildren -= 1;
                }
                var lNode = parent.add(hyseNode);
                id2LNode[nodes[i].id()] = lNode;
            }
            else {
                n = g.node(n.id());
                points = new coseBase$1.exports.layoutBase.PointD(n.x, n.y);
                dimension = new coseBase$1.exports.layoutBase.DimensionD(n.width, n.height);
                var hyseNode = new HySENode(layout.graphManager, points, dimension, null, nodes[i].id(), n.rank);
                hyseNode.nodeRepulsion = opts.nodeRepulsion;
                hyseNode.isDirected = 1;
                //hyseNode.parentId = opts.eles.nodes('#' + nodes[i]).parent().id();
                var lNode = parent.add(hyseNode);
                id2LNode[nodes[i].id()] = lNode;
            }
        }
    }
    function processEdges(g, gm, opts) {
        var edges = opts.eles.edges();
        //console.log(edges);
        var name2vw = {};
        for (var i = 0; i < edges.length; i++) {
            if (!name2vw[edges[i].id()]) {
                name2vw[edges[i].id()] = {};
            }
            //console.log(edges[i]);
            var v = edges[i].source().id();
            var w = edges[i].target().id();
            if (!v.startsWith('_d')) {
                name2vw[edges[i].id()].v = v;
            }
            if (!w.startsWith('_d')) {
                name2vw[edges[i].id()].w = w;
            }
        }
        for (var name_1 in name2vw) {
            var edge = name2vw[name_1];
            var sourceNode = id2LNode[edge.v];
            var targetNode = id2LNode[edge.w];
            var hiseEdge = new HySEEdge(sourceNode, targetNode, null);
            hiseEdge.idealLength = opts.idealEdgeLength;
            hiseEdge.edgeElasticity = opts.edgeElasticity;
            gm.add(hiseEdge, sourceNode, targetNode);
        }
    }
    function filterDummyNodesFromLayers(layering) {
        var l2 = [];
        for (var i = 0; i < layering.length; i++) {
            var currLayer = [];
            for (var j = 0; j < layering[i].length; j++) {
                if (layering[i][j].startsWith('_d')) {
                    continue;
                }
                currLayer.push(layering[i][j]);
            }
            if (currLayer.length > 0) {
                l2.push(currLayer);
            }
        }
        return l2;
    }
    function randomizeOrderInLayers(layering) {
        for (var i = 0; i < layering.length; i++) {
            layering[i].sort(function () { return Math.random() - 0.5; });
        }
    }

    /*
     * Applies heuristics to minimize edge crossings in the graph and sets the best
     * order solution as an order attribute on each node.
     *
     * Pre-conditions:
     *
     *    1. Graph must be DAG
     *    2. Graph nodes must be objects with a "rank" attribute
     *    3. Graph edges must have the "weight" attribute
     *
     * Post-conditions:
     *
     *    1. Graph nodes will have an "order" attribute based on the results of the
     *       algorithm.
     */
    function order(g, opts, cy) {
      var maxRank$1 = maxRank(g),
        downLayerGraphs = buildLayerGraphs(g, lodash$1.exports.range(1, maxRank$1 + 1), "inEdges"),
        upLayerGraphs = buildLayerGraphs(
          g,
          lodash$1.exports.range(maxRank$1 - 1, -1, -1),
          "outEdges"
        );

      var layering = initOrder(g);
      assignOrder(g, layering);

      if (opts.isForceDirected) {
        console.log("calling spring embedder");
        const newLayering = runSpringEmbedder(g, layering, opts, cy);
        if (opts.isRelayer) {
          assignOrder(g, newLayering);
        }
        return;
      }

      var bestCC = Number.POSITIVE_INFINITY,
        best;

      for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {
        sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);

        layering = buildLayerMatrix(g);
        var cc = crossCount(g, layering);
        if (cc < bestCC) {
          lastBest = 0;
          best = lodash$1.exports.cloneDeep(layering);
          bestCC = cc;
        }
      }

      assignOrder(g, best);
    }

    function buildLayerGraphs(g, ranks, relationship) {
      return lodash$1.exports.map(ranks, function (rank) {
        return buildLayerGraph(g, rank, relationship);
      });
    }

    function sweepLayerGraphs(layerGraphs, biasRight) {
      var cg = new graphlib.Graph();
      lodash$1.exports.forEach(layerGraphs, function (lg) {
        var root = lg.graph().root;
        var sorted = sortSubgraph(lg, root, cg, biasRight);
        lodash$1.exports.forEach(sorted.vs, function (v, i) {
          lg.node(v).order = i;
        });
        addSubgraphConstraints(lg, cg, sorted.vs);
      });
    }

    function assignOrder(g, layering) {
      lodash$1.exports.forEach(layering, function (layer) {
        lodash$1.exports.forEach(layer, function (v, i) {
          g.node(v).order = i;
        });
      });
    }

    function layout(g, opts, cy) {
      var time$1 = opts && opts.debugTiming ? time : notime;
      time$1("layout", function () {
        var layoutGraph = time$1("  buildLayoutGraph", function () {
          return buildLayoutGraph(g);
        });
        time$1("  runLayout", function () {
          console.log("%c" + "run layout dagre", "color:" + "red" + ";font-weight:bold;");
          runLayout(layoutGraph, time$1, opts, cy);
        });
        // time("  updateInputGraph", function () {
        //   updateInputGraph(g, layoutGraph);
        // });
      });
    }

    function runLayout(g, time, opts, cy) {
      time("    makeSpaceForEdgeLabels", function () {
        console.log("%c" + "makeSpaceForEdgeLabels", "color:" + "red" + ";font-weight:bold;");
        makeSpaceForEdgeLabels(g);
      });
      time("    removeSelfEdges", function () {
        console.log("%c" + "removeSelfEdges", "color:" + "red" + ";font-weight:bold;");
        removeSelfEdges(g);
      });
      time("    acyclic", function () {
        console.log("%c" + "acyclic", "color:" + "red" + ";font-weight:bold;");
        run$2(g);
      });
      time("    nestingGraph.run", function () {
        console.log("%c" + "nestingGraph.run", "color:" + "red" + ";font-weight:bold;");

        run(g);
      });
      time("    rank", function () {
        console.log("%c" + "rank", "color:" + "red" + ";font-weight:bold;");

        rank(asNonCompoundGraph(g));
      });
      time("    injectEdgeLabelProxies", function () {
        injectEdgeLabelProxies(g);
      });
      time("    removeEmptyRanks", function () {
        removeEmptyRanks(g);
      });
      time("    nestingGraph.cleanup", function () {
        cleanup(g);
      });
      time("    normalizeRanks", function () {
        normalizeRanks(g);
      });
      time("    assignRankMinMax", function () {
        assignRankMinMax(g);
      });
      time("    removeEdgeLabelProxies", function () {
        removeEdgeLabelProxies(g);
      });
      time("    normalize.run", function () {
        run$1(g);
      });
      time("    parentDummyChains", function () {
        parentDummyChains(g);
      });
      time("    addBorderSegments", function () {
        addBorderSegments(g);
      });
      time("    order", function () {
        // order(g);
        console.log("%c" + "order", "color:" + "red" + ";font-weight:bold;");

        order(g, opts, cy);
      });
      // time("    insertSelfEdges", function () {
      //   console.log("%c" + "insertSelfEdges", "color:" + "red" + ";font-weight:bold;");

      //   insertSelfEdges(g);
      // });
      // time("    adjustCoordinateSystem", function () {
      //   console.log("%c" + "adjustCoordinateSystem", "color:" + "red" + ";font-weight:bold;");

      //   coordinateSystem.adjust(g);
      // });
      // time("    position", function () {
      //   console.log("%c" + "position", "color:" + "red" + ";font-weight:bold;");

      //   position(g);
      // });
      // time("    positionSelfEdges", function () {
      //   console.log("%c" + "positionSelfEdges", "color:" + "red" + ";font-weight:bold;");

      //   positionSelfEdges(g);
      // });
      // time("    removeBorderNodes", function () {
      //   console.log("%c" + "removeBorderNodes", "color:" + "red" + ";font-weight:bold;");

      //   removeBorderNodes(g);
      // });
      // time("    normalize.undo", function () {
      //   normalize.undo(g);
      // });
      // time("    fixupEdgeLabelCoords", function () {
      //   fixupEdgeLabelCoords(g);
      // });
      // time("    undoCoordinateSystem", function () {
      //   coordinateSystem.undo(g);
      // });
      // time("    translateGraph", function () {
      //   translateGraph(g);
      // });
      // time("    assignNodeIntersects", function () {
      //   assignNodeIntersects(g);
      // });
      // time("    reversePoints", function () {
      //   reversePointsForReversedEdges(g);
      // });
      // time("    acyclic.undo", function () {
      //   acyclic.undo(g);
      // });
    }

    var graphNumAttrs = ["nodesep", "edgesep", "ranksep", "marginx", "marginy"];
    var graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: "tb" };
    var graphAttrs = ["acyclicer", "ranker", "rankdir", "align"];
    var nodeNumAttrs = ["width", "height"];
    var nodeDefaults = { width: 0, height: 0 };
    var edgeNumAttrs = ["minlen", "weight", "width", "height", "labeloffset"];
    var edgeDefaults = {
      minlen: 1,
      weight: 1,
      width: 0,
      height: 0,
      labeloffset: 10,
      labelpos: "r",
    };
    var edgeAttrs = ["labelpos"];

    /*
     * Constructs a new graph from the input graph, which can be used for layout.
     * This process copies only whitelisted attributes from the input graph to the
     * layout graph. Thus this function serves as a good place to determine what
     * attributes can influence layout.
     */
    function buildLayoutGraph(inputGraph) {
      var g = new graphlib.Graph({ multigraph: true, compound: true });
      var graph = canonicalize(inputGraph.graph());

      g.setGraph(
        lodash$1.exports.merge(
          {},
          graphDefaults,
          selectNumberAttrs(graph, graphNumAttrs),
          lodash$1.exports.pick(graph, graphAttrs)
        )
      );

      lodash$1.exports.forEach(inputGraph.nodes(), function (v) {
        var node = canonicalize(inputGraph.node(v));
        g.setNode(
          v,
          lodash$1.exports.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults)
        );
        g.setParent(v, inputGraph.parent(v));
      });

      lodash$1.exports.forEach(inputGraph.edges(), function (e) {
        var edge = canonicalize(inputGraph.edge(e));
        g.setEdge(
          e,
          lodash$1.exports.merge(
            {},
            edgeDefaults,
            selectNumberAttrs(edge, edgeNumAttrs),
            lodash$1.exports.pick(edge, edgeAttrs)
          )
        );
      });

      return g;
    }

    /*
     * This idea comes from the Gansner paper: to account for edge labels in our
     * layout we split each rank in half by doubling minlen and halving ranksep.
     * Then we can place labels at these mid-points between nodes.
     *
     * We also add some minimal padding to the width to push the label for the edge
     * away from the edge itself a bit.
     */
    function makeSpaceForEdgeLabels(g) {
      var graph = g.graph();
      graph.ranksep /= 2;
      lodash$1.exports.forEach(g.edges(), function (e) {
        var edge = g.edge(e);
        edge.minlen *= 2;
        if (edge.labelpos.toLowerCase() !== "c") {
          if (graph.rankdir === "TB" || graph.rankdir === "BT") {
            edge.width += edge.labeloffset;
          } else {
            edge.height += edge.labeloffset;
          }
        }
      });
    }

    /*
     * Creates temporary dummy nodes that capture the rank in which each edge's
     * label is going to, if it has one of non-zero width and height. We do this
     * so that we can safely remove empty ranks while preserving balance for the
     * label's position.
     */
    function injectEdgeLabelProxies(g) {
      lodash$1.exports.forEach(g.edges(), function (e) {
        var edge = g.edge(e);
        if (edge.width && edge.height) {
          var v = g.node(e.v);
          var w = g.node(e.w);
          var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };
          addDummyNode(g, "edge-proxy", label, "_ep");
        }
      });
    }

    function assignRankMinMax(g) {
      var maxRank = 0;
      lodash$1.exports.forEach(g.nodes(), function (v) {
        var node = g.node(v);
        if (node.borderTop) {
          node.minRank = g.node(node.borderTop).rank;
          node.maxRank = g.node(node.borderBottom).rank;
          maxRank = lodash$1.exports.max(maxRank, node.maxRank);
        }
      });
      g.graph().maxRank = maxRank;
    }

    function removeEdgeLabelProxies(g) {
      lodash$1.exports.forEach(g.nodes(), function (v) {
        var node = g.node(v);
        if (node.dummy === "edge-proxy") {
          g.edge(node.e).labelRank = node.rank;
          g.removeNode(v);
        }
      });
    }

    function removeSelfEdges(g) {
      lodash$1.exports.forEach(g.edges(), function (e) {
        if (e.v === e.w) {
          var node = g.node(e.v);
          if (!node.selfEdges) {
            node.selfEdges = [];
          }
          node.selfEdges.push({ e: e, label: g.edge(e) });
          g.removeEdge(e);
        }
      });
    }

    function selectNumberAttrs(obj, attrs) {
      return lodash$1.exports.mapValues(lodash$1.exports.pick(obj, attrs), Number);
    }

    function canonicalize(attrs) {
      var newAttrs = {};
      lodash$1.exports.forEach(attrs, function (v, k) {
        newAttrs[k.toLowerCase()] = v;
      });
      return newAttrs;
    }

    // mosty copy-pasted from https://github.com/cytoscape/cytoscape.js-dagre used spring embedder in some places
    var DagreAndSpringEmbedderLayout = /** @class */ (function () {
        function DagreAndSpringEmbedderLayout(options) {
            this.options = Object.assign({}, DEFAULT_OPTIONS, options);
        }
        DagreAndSpringEmbedderLayout.prototype.run = function () {
            var t1 = new Date().getTime();
            console.log("running dagre and spring embedder layout");
            var options = this.options;
            var cy = options.cy; // cy is automatically populated for us in the constructor
            var eles = options.eles;
            var getVal = function (ele, val) {
                return isFunction$4(val) ? val.apply(ele, [ele]) : val;
            };
            var bb = options.boundingBox || { x1: 0, y1: 0, w: cy.width(), h: cy.height() };
            if (bb.x2 === undefined) {
                bb.x2 = bb.x1 + bb.w;
            }
            if (bb.w === undefined) {
                bb.w = bb.x2 - bb.x1;
            }
            if (bb.y2 === undefined) {
                bb.y2 = bb.y1 + bb.h;
            }
            if (bb.h === undefined) {
                bb.h = bb.y2 - bb.y1;
            }
            var g = new graphlib.Graph({
                multigraph: true,
                compound: true
            });
            var gObj = {};
            var setGObj = function (name, val) {
                if (val != null) {
                    gObj[name] = val;
                }
            };
            // add nodes to dagre
            //only add those nodes which are in the heirachical layout
            var nodes = eles.nodes().filter(function (ele) {
                return ele.data("isDirected") == 1;
            });
            //let nodes = eles.nodes();
            var maxHeight = 0;
            var maxWidth = 0;
            for (var i = 0; i < nodes.length; i++) {
                var node = nodes[i];
                var nbb = node.layoutDimensions(options);
                g.setNode(node.id(), {
                    width: nbb.w,
                    height: nbb.h,
                    name: node.id(),
                    isDirected: node.data("isDirected"),
                });
                if (nbb.h > maxHeight) {
                    maxHeight = nbb.h;
                }
                if (nbb.w > maxWidth) {
                    maxWidth = nbb.w;
                }
                // console.log( g.node(node.id()) );
            }
            options.rankGap += maxHeight;
            if (options.orderGap < 20 + maxWidth) {
                options.orderGap = 20 + maxWidth;
            }
            setGObj('nodesep', options.nodeSep);
            setGObj('edgesep', options.edgeSep);
            setGObj('ranksep', options.rankSep);
            setGObj('rankdir', options.rankDir);
            setGObj('align', options.align);
            setGObj('ranker', options.ranker);
            setGObj('acyclicer', options.acyclicer);
            g.setGraph(gObj);
            g.setDefaultEdgeLabel(function () { return {}; });
            g.setDefaultNodeLabel(function () { return {}; });
            // add edges to dagre
            var edges = eles.edges().stdFilter(function (edge) {
                return edge.source().data("isDirected") == 1 && edge.target().data("isDirected") == 1;
            });
            for (var i = 0; i < edges.length; i++) {
                var edge = edges[i];
                //console.log(edge);
                g.setEdge(edge.source().id(), edge.target().id(), {
                    minlen: getVal(edge, options.minLen),
                    weight: getVal(edge, options.edgeWeight),
                    name: edge.id()
                }, edge.id());
            }
            layout(g, options, cy);
            var gNodeIds = g.nodes();
            for (var i = 0; i < gNodeIds.length; i++) {
                var id = gNodeIds[i];
                // console.log("id", id);
                var n = g.node(id);
                cy.getElementById(id).scratch().dagre = n;
            }
            var dagreBB;
            if (options.boundingBox) {
                dagreBB = { x1: Infinity, x2: -Infinity, y1: Infinity, y2: -Infinity };
                nodes.forEach(function (node) {
                    var dModel = node.scratch().dagre;
                    dagreBB.x1 = Math.min(dagreBB.x1, dModel.x);
                    dagreBB.x2 = Math.max(dagreBB.x2, dModel.x);
                    dagreBB.y1 = Math.min(dagreBB.y1, dModel.y);
                    dagreBB.y2 = Math.max(dagreBB.y2, dModel.y);
                });
                dagreBB.w = dagreBB.x2 - dagreBB.x1;
                dagreBB.h = dagreBB.y2 - dagreBB.y1;
            }
            else {
                dagreBB = bb;
            }
            var constrainPos = function (p) {
                if (options.boundingBox) {
                    var xPct = dagreBB.w === 0 ? 0 : (p.x - dagreBB.x1) / dagreBB.w;
                    var yPct = dagreBB.h === 0 ? 0 : (p.y - dagreBB.y1) / dagreBB.h;
                    return {
                        x: bb.x1 + xPct * bb.w,
                        y: bb.y1 + yPct * bb.h
                    };
                }
                else {
                    return p;
                }
            };
            var counter = 0;
            if (options.isForceDirected && !options.isRelayer) {
                nodes.layoutPositions(this, options, function (ele) {
                    counter++;
                    ele = typeof ele === "object" ? ele : this;
                    if (ele != undefined) {
                        var dModel = ele.scratch('force_directed_pos');
                        // console.log("found force directed position for node " + ele.id() + " as ", dModel);
                        // console.log(counter);
                        if (dModel != undefined) {
                            return {
                                x: dModel.x,
                                y: dModel.y
                            };
                        }
                    }
                });
            }
            else {
                //console.log("not force directed");
                //console.log("not f nodes", nodes);
                nodes.layoutPositions(this, options, function (ele) {
                    counter++;
                    ele = typeof ele === "object" ? ele : this;
                    var dModel = ele.scratch().dagre;
                    return constrainPos({
                        x: dModel.x,
                        y: dModel.y
                    });
                });
            }
            var t = (new Date().getTime() - t1);
            if (!window['hyseExecutionTimes']) {
                window['hyseExecutionTimes'] = [];
            }
            window['hyseExecutionTimes'].push(t);
            console.log(counter);
            console.log("HySE executed in", t, "ms");
            return this; // chaining
        };
        return DagreAndSpringEmbedderLayout;
    }());

    function register(cytoscape) {
        if (!cytoscape) {
            return;
        } // can't register if cytoscape unspecified
        // register dagre and spring embedder combined version
        cytoscape('layout', 'hyse', DagreAndSpringEmbedderLayout);
        // register force directed layout algorithm (used for step by step animated version)
        cytoscape('layout', 'force-directed', ForceDirectedLayout);
    }
    if (typeof window["cytoscape"] !== "undefined") {
        register(window["cytoscape"]);
    }

    return register;

}));
//# sourceMappingURL=cytoscape-hyse.js.map
